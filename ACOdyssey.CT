<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"enable .10b"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11

///***********************************************///
aobscanmodule(petHealthRegenCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 0F ** ** ** ** 0F ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(petHealthRegenCallerAOB)

label(bHavePet)
registersymbol(bHavePet)
label(pPet)
registersymbol(pPet)

alloc(newmem17,2048,petHealthRegenCallerAOB+5) //"ACOdyssey.exe"+239845B)
label(originalcode17_enable)
registersymbol(originalcode17_enable)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
mov rsi,bHavePet
mov sil,[rsi]
test sil,sil
jz @f
mov rsi,pPet
mov [rsi],rcx
test rcx,rcx
jz @f
cmp rcx,1
je @f
//mov rdi,[rcx+10]
mov rdi,[rsp+8]
mov [rsi+8],rdi
end17:

originalcode17_enable:
readmem(petHealthRegenCallerAOB+5,15)
//movaps xmm6,[rsp+30]
//movaps xmm7,[rsp+20]
//mov rsi,[rsp+58]

exit17:
jmp petHealthRegenCallerAOB+14 //"ACOdyssey.exe"+239846A

///
bHavePet:
dd 0
pPet:
///

petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
jmp newmem17

///***********************************************///
aobscanmodule(havePetFlagChkForPetHealthRegenAOB,ACOdyssey.exe,40 ** 48 ** ** ** 80 ** 38 00 48 ** ** 74 ** 48 ** ** ** ** E8 ** ** ** ** 48 ** ** E8)
registersymbol(havePetFlagChkForPetHealthRegenAOB)

alloc(newmem17b,2048,havePetFlagChkForPetHealthRegenAOB) //"ACOdyssey.exe"+23CE6F0)
label(originalcode17b_enable)
registersymbol(originalcode17b_enable)
label(exit17b)

newmem17b: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(havePetFlagChkForPetHealthRegenAOB,6)
push rax
mov rdi,bHavePet
mov al,[rcx+38]
mov [rdi],al
test al,al
jnz @f

xor rax,rax
mov rdi,pPet
mov [rdi],rax
mov [rdi+8],rax

@@:
pop rax
readmem(havePetFlagChkForPetHealthRegenAOB+6,7)
jnz @f

push rax
mov rax,havePetFlagChkForPetHealthRegenAOB
xor rdi,rdi
mov dil,[rax+e]
lea rdi,[rax+rdi+f]
pop rax
jmp rdi

@@:
jmp exit17b

originalcode17b_enable:
readmem(havePetFlagChkForPetHealthRegenAOB,15)
//push rdi
//sub rsp,20
//cmp byte ptr [rcx+38],00
//mov rdi,rcx
//je ACOdyssey.exe+23CE74F

exit17b:
jmp havePetFlagChkForPetHealthRegenAOB+f //"ACOdyssey.exe"+23CE6FF

///

havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
jmp newmem17b

///***********************************************///
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,8B ** 2B ** 41 ** ** 85 C0 7F ** 48 ** ** ** ** 44)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB) //"ACOdyssey.exe"+22F5C35)
label(originalcode18_healthCalOnHitAOB)
registersymbol(originalcode18_healthCalOnHitAOB)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,[rsp+78]

push rdi

mov rdi,pPlayer
test rdi,rdi
jz @f
cmp [rdi+8],rcx
je isplayer18
mov rdi,pPet
cmp [rdi+8],rcx
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+48],rcx
je @f
cmp [rsp+58],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
readmem(healthCalOnHitAOB,4)
//mov eax,ebp
//sub eax,edx

test eax,eax
jg @f
mov ebp,edx
inc ebp
@@:
jmp end18

//
domaxdamage18:
cmp edx,ebp
cmovl edx,ebp
jmp end18

//
end18:
xor rdi,rdi
mov rcx,originalcode18_healthCalOnHitAOB
mov dil,[rcx+a]
mov rcx,healthCalOnHitAOB //"ACOdyssey.exe"+22F5C35
lea rcx,[rcx+b]
//xor rdi,rdi
//mov dil,[rcx-1]
lea rcx,[rcx+rdi]
pop rdi

readmem(healthCalOnHitAOB,9)
//mov eax,ebp
//sub eax,edx
//mov [r14],eax
//test eax,eax
jle @f
jmp rcx

@@:
readmem(healthCalOnHitAOB+b,5)
//mov rdx,[rsp+30]
jmp exit18

originalcode18_healthCalOnHitAOB:
readmem(healthCalOnHitAOB,16)
//mov eax,ebp
//sub eax,edx
//mov [r14],eax
//test eax,eax
//jg ACOdyssey.exe+22F5C5E
//mov rdx,[rsp+30]

exit18:
jmp healthCalOnHitAOB+10 //"ACOdyssey.exe"+22F5C45

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB: //"ACOdyssey.exe"+22F5C35:
jmp newmem18

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
dealloc(newmem17)
petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
readmem(originalcode17_enable,15)
//db 0F 28 74 24 30 0F 28 7C 24 20 48 8B 74 24 58
//Alt: movaps xmm6,[rsp+30]
//Alt: movaps xmm7,[rsp+20]
//Alt: mov rsi,[rsp+58]
unregistersymbol(originalcode17_enable)

unregistersymbol(bHavePet)
unregistersymbol(pPet)

///***********************************************///
dealloc(newmem17b)
havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
readmem(originalcode17b_enable,15)
//db 40 57 48 83 EC 20 80 79 38 00 48 8B F9 74 50
//Alt: push rdi
//Alt: sub rsp,20
//Alt: cmp byte ptr [rcx+38],00
//Alt: mov rdi,rcx
//Alt: je ACOdyssey.exe+23CE74F
unregistersymbol(originalcode17b_enable)

///***********************************************///
dealloc(newmem18)
healthCalOnHitAOB: //"ACOdyssey.exe"+22F5C35:
readmem(originalcode18_healthCalOnHitAOB,16)
//db 8B C5 2B C2 41 89 06 85 C0 7F 1E 48 8B 54 24 30
//Alt: mov eax,ebp
//Alt: sub eax,edx
//Alt: mov [r14],eax
//Alt: test eax,eax
//Alt: jg ACOdyssey.exe+22F5C5E
//Alt: mov rdx,[rsp+30]
unregistersymbol(originalcode18_healthCalOnHitAOB)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)

///***********************************************///
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4512</ID>
          <Description>"[human battle]"</Description>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>4386</ID>
              <Description>"undead .7"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bPlayerUndead:
db 1
bPetUndead:
db 1


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bPlayerUndead:
db 0
bPetUndead:
db 0
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4857</ID>
                  <Description>"Alexios/Kassandra"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:not applied
1:applied
</DropDownList>
                  <Color>008000</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bPlayerUndead</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4858</ID>
                  <Description>"pet"</Description>
                  <Options moHideChildren="1"/>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:not applied
1:applied
</DropDownList>
                  <Color>008000</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bPetUndead</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4888</ID>
                      <Description>"have pet?"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:no pet
1:have pet
2:pet in battle
</DropDownList>
                      <Color>008000</Color>
                      <VariableType>Byte</VariableType>
                      <Address>bHavePet</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>4883</ID>
                      <Description>"current health"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>PpET</Address>
                      <Offsets>
                        <Offset>[playerFetchAOB+17]</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>4884</ID>
                          <Description>"max health base"</Description>
                          <Color>0000FF</Color>
                          <VariableType>4 Bytes</VariableType>
                          <Address>+4</Address>
                          <CheatEntries>
                            <CheatEntry>
                              <ID>4885</ID>
                              <Description>"multi 1 (armor)"</Description>
                              <Color>0000FF</Color>
                              <VariableType>Float</VariableType>
                              <Address>+8</Address>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>4886</ID>
                              <Description>"multi 2 (curse penalty)"</Description>
                              <Color>0000FF</Color>
                              <VariableType>Float</VariableType>
                              <Address>+c</Address>
                            </CheatEntry>
                            <CheatEntry>
                              <ID>4887</ID>
                              <Description>"multi 3 (?)"</Description>
                              <Color>0000FF</Color>
                              <VariableType>Float</VariableType>
                              <Address>+10</Address>
                            </CheatEntry>
                          </CheatEntries>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4424</ID>
              <Description>"inf. oxygen"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(infOxygenFlagChk1AOB,ACOdyssey.exe,48 85 C0 0F 84 ** ** ** ** 80 78 ** 01 75)
registersymbol(infOxygenFlagChk1AOB)

alloc(originalcode_infoxygen,8)
registersymbol(originalcode_infoxygen)

originalcode_infoxygen:
readmem(infOxygenFlagChk1AOB+9,4)

///

infOxygenFlagChk1AOB+9: //"ACOdyssey.exe"+327129D:
db 90 48 85 C0

///******************************************///
aobscanmodule(infOxygenFlagRead1APB,ACOdyssey.exe,48 8B CB E8 ** ** ** ** 0F B6 47 42 88 ** ** ** ** ** 48 ** ** ** ** ** ** ** ** 5F C3)
registersymbol(infOxygenFlagRead1APB)

alloc(originalcode2_infoxygen,8)
registersymbol(originalcode2_infoxygen)

originalcode2_infoxygen:
readmem(infOxygenFlagRead1APB+8,4)

///

infOxygenFlagRead1APB+8: //"ACOdyssey.exe"+327131C:
db 31 C0 B0 01

///******************************************///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infOxygenFlagChk1AOB+9: //"ACOdyssey.exe"+327129D:
readmem(originalcode_infoxygen,4)
//db 80 78 42 01
//Alt: cmp byte ptr [rax+42],01
dealloc(originalcode_infoxygen)
unregistersymbol(originalcode_infoxygen)

///******************************************///
infOxygenFlagRead1APB+8: //"ACOdyssey.exe"+327131C:
readmem(originalcode2_infoxygen,4)
//db 0F B6 47 42
//Alt: movzx eax,byte ptr [rdi+42]
dealloc(originalcode2_infoxygen)
unregistersymbol(originalcode2_infoxygen)

///******************************************///
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4441</ID>
              <Description>"inf. adrenaline .2"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
/*
luaCall(lua_aobscan("adrenalineWrite1OnChangeAOB","ACOdyssey.exe","E8 ** ** ** ** 33 ** 89 BB ** ** ** ** 8B ** F7 ** ** ** ** ** 3B ** ** ** ** ** 75",1))

alloc(newmem,2048,adrenalineWrite1OnChangeAOB+7) //"ACOdyssey.exe"+20FF065)
label(originalcode_infadrenaline)
registersymbol(originalcode_infadrenaline)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(adrenalineWrite1OnChangeAOB+8,5)
//lea rdi,[rbx+278]
mov edi,[rdi+4]

originalcode_infadrenaline:
readmem(adrenalineWrite1OnChangeAOB+7,14)
//mov [rbx+00000278],edi
//mov eax,edi
//div [rbx+000001AC]

exit:
jmp adrenalineWrite1OnChangeAOB+15 //"ACOdyssey.exe"+20FF073

///

adrenalineWrite1OnChangeAOB+7: //"ACOdyssey.exe"+20FF065:
jmp newmem

///*******************************************///
luaCall(lua_aobscan("adrenalineWrite2OnChangeAOB","ACOdyssey.exe","E8 ** ** ** ** 33 ** 89 BB ** ** ** ** 8B ** F7 ** ** ** ** ** 3B ** ** ** ** ** 75",2))

alloc(newmem2,2048,adrenalineWrite2OnChangeAOB+7) //"ACOdyssey.exe"+211B2B9)
label(originalcode2_infadrenaline)
registersymbol(originalcode2_infadrenaline)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(adrenalineWrite2OnChangeAOB+8,5)
//lea rdi,[rbx+278]
mov edi,[rdi+4]

originalcode2_infadrenaline:
readmem(adrenalineWrite2OnChangeAOB+7,14)
//mov [rbx+00000278],edi
//mov eax,edi
//div [rbx+000001AC]

exit2:
jmp adrenalineWrite2OnChangeAOB+15 //"ACOdyssey.exe"+211B2C7

///

adrenalineWrite2OnChangeAOB+7: //"ACOdyssey.exe"+211B2B9:
jmp newmem2

///*******************************************///
/*
luaCall(lua_aobscan("adrenalineWriteOnUseAOB","ACOdyssey.exe","E8 ** ** ** ** 33 ** 89 BB ** ** ** ** 8B ** F7 ** ** ** ** ** 3B ** ** ** ** ** 75",3))

alloc(newmem3,2048,adrenalineWriteOnUseAOB+7) //"ACOdyssey.exe"+2189B65)
label(originalcode3_infadrenaline)
registersymbol(originalcode3_infadrenaline)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(adrenalineWriteOnUseAOB+8,5)
//lea rdi,[rbx+278]
mov edi,[rdi+4]

originalcode3_infadrenaline:
readmem(adrenalineWriteOnUseAOB+7,14)
//mov [rbx+00000278],edi
//mov eax,edi
//div [rbx+000001AC]

exit3:
jmp adrenalineWriteOnUseAOB+15 //"ACOdyssey.exe"+2189B73

///

adrenalineWriteOnUseAOB+7: //"ACOdyssey.exe"+2189B65:
jmp newmem3

///*******************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
/*
dealloc(newmem)
adrenalineWrite1OnChangeAOB+7: //"ACOdyssey.exe"+20FF065:
readmem(originalcode_infadrenaline,14)
//db 89 BB 78 02 00 00 8B C7 F7 B3 AC 01 00 00
//Alt: mov [rbx+00000278],edi
//Alt: mov eax,edi
//Alt: div [rbx+000001AC]
unregistersymbol(originalcode_infadrenaline)

///*******************************************///
dealloc(newmem2)
adrenalineWrite2OnChangeAOB+7: //"ACOdyssey.exe"+211B2B9:
readmem(originalcode2_infadrenaline,14)
//db 89 BB 78 02 00 00 8B C7 F7 B3 AC 01 00 00
//Alt: mov [rbx+00000278],edi
//Alt: mov eax,edi
//Alt: div [rbx+000001AC]
unregistersymbol(originalcode2_infadrenaline)

///*******************************************///
/*
dealloc(newmem3)
adrenalineWriteOnUseAOB+7: //"ACOdyssey.exe"+2189B65:
readmem(originalcode3_infadrenaline,14)
//db 89 BB 78 02 00 00 8B C7 F7 B3 AC 01 00 00
//Alt: mov [rbx+00000278],edi
//Alt: mov eax,edi
//Alt: div [rbx+000001AC]
unregistersymbol(originalcode3_infadrenaline)

///*******************************************///
//800
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4422</ID>
              <Description>"inf. arrow .3"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someWrite1AOB,ACOdyssey.exe,45 ** ** 41 ** ** 41 ** ** ** 44 2B C0 44 ** ** 75)
registersymbol(someWrite1AOB)

///
aobscanmodule(ammoWriteCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** E8 ** ** ** ** EB ** 0F 1F)
registersymbol(ammoWriteCallerAOB)
///

alloc(newmem,2048,someWrite1AOB) //"ACOdyssey.exe"+2463877)
label(originalcode_infitemmod)
registersymbol(originalcode_infitemmod)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

readmem(someWrite1AOB,10)
//cmp r12d,r8d
//mov eax,r8d
//cmovbe eax,r12d

//mov rcx,"ACOdyssey.exe"+963E01F
mov rcx,ammoWriteCallerAOB
lea rcx,[rcx+5]
cmp [rsp+1d8],rcx
jne end

mov ecx,r8d
sub ecx,eax
cmp ecx,8
jge end
mov r8d,8
add r8d,eax

end:
readmem(someWrite1AOB+a,6)
//sub r8d,eax
//mov [rbx],r8d
jmp exit

originalcode_infitemmod:
readmem(someWrite1AOB,16)
//cmp r12d,r8d
//mov eax,r8d
//cmovbe eax,r12d
//sub r8d,eax
//mov [rbx],r8d

exit:
jmp someWrite1AOB+10 //"ACOdyssey.exe"+2463887

///

someWrite1AOB: //"ACOdyssey.exe"+2463877:
jmp newmem

///***************************************///
/*
aobscanmodule(setArrowQToShootWithCurrentArrowPouchForWarriorBowOnAimAOB,ACOdyssey.exe,E8 ** ** ** ** 3B C3 0F 42 D8)
registersymbol(setArrowQToShootWithCurrentArrowPouchForWarriorBowOnAimAOB)

setArrowQToShootWithCurrentArrowPouchForWarriorBowOnAimAOB+7:
db 90 90 90

///***************************************///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someWrite1AOB: //"ACOdyssey.exe"+2463877:
readmem(originalcode_infitemmod,16)
//db 45 3B E0 41 8B C0 41 0F 46 C4 44 2B C0 44 89 03
//Alt: cmp r12d,r8d
//Alt: mov eax,r8d
//Alt: cmovbe eax,r12d
//Alt: sub r8d,eax
//Alt: mov [rbx],r8d
unregistersymbol(originalcode_infitemmod)

///***************************************///
/*
setArrowQToShootWithCurrentArrowPouchForWarriorBowOnAimAOB+7:
db 0F 42 D8
//Alt: cmovb ebx,eax

///***************************************///
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>2468</ID>
              <Description>"instant bow charge"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(bowChargeSpeedReadOnAimAOB,ACOdyssey.exe,48 8B 90 ** ** ** ** F3 0F 10 90 ** ** ** ** 0F B6 92 ** ** ** ** E8)
registersymbol(bowChargeSpeedReadOnAimAOB)

alloc(newmem2,2048,bowChargeSpeedReadOnAimAOB)
label(originalcode2_instanthunterbowcharge)
registersymbol(originalcode2_instanthunterbowcharge)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov edx,(float)0.1
movd xmm2,edx

db F3 0F 11
readmem(bowChargeSpeedReadOnAimAOB+a,5)

originalcode2_instanthunterbowcharge:
readmem(bowChargeSpeedReadOnAimAOB,15)

exit2:
jmp bowChargeSpeedReadOnAimAOB+f

///

bowChargeSpeedReadOnAimAOB:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
bowChargeSpeedReadOnAimAOB:
readmem(originalcode2_instanthunterbowcharge,15)

unregistersymbol(originalcode2_instanthunterbowcharge)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4461</ID>
              <Description>"instant abilities cooldown .2"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(abilitiesCooldownCalAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** 75 04 48 ** ** ** 80 ** ** ** 74 ** 48 ** ** ** 48)
registersymbol(abilitiesCooldownCalAOB)

alloc(newmem,2048,abilitiesCooldownCalAOB) //"ACOdyssey.exe"+FF79770)
label(originalcode_instantcooldown)
registersymbol(originalcode_instantcooldown)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(abilitiesCooldownCalAOB,7)
//mov rdx,[rcx+20]
//test rdx,rdx
jne @f

readmem(abilitiesCooldownCalAOB+9,1)
db 8D
readmem(abilitiesCooldownCalAOB+b,2)
//lea rdx,[rcx+8]
mov rdx,[rdx+10]
readmem(abilitiesCooldownCalAOB+9,1)
db 89
readmem(abilitiesCooldownCalAOB+b,2)
//mov [rcx+8],rdx

readmem(abilitiesCooldownCalAOB+9,4)
//mov rdx,[rcx+08]

@@:
readmem(abilitiesCooldownCalAOB+d,4)
//cmp byte ptr [rcx+28],00
jmp exit

originalcode_instantcooldown:
readmem(abilitiesCooldownCalAOB,17)
//mov rdx,[rcx+20]
//test rdx,rdx
//jne ACOdyssey.exe+FF7977D
//mov rdx,[rcx+08]
//cmp byte ptr [rcx+28],00

exit:
jmp abilitiesCooldownCalAOB+11 //"ACOdyssey.exe"+FF79781

///

abilitiesCooldownCalAOB: //"ACOdyssey.exe"+FF79770:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
abilitiesCooldownCalAOB: //"ACOdyssey.exe"+FF79770:
readmem(originalcode_instantcooldown,17)
//db 48 8B 51 20 48 85 D2 75 04 48 8B 51 08 80 79 28 00
//Alt: mov rdx,[rcx+20]
//Alt: test rdx,rdx
//Alt: jne ACOdyssey.exe+FF7977D
//Alt: mov rdx,[rcx+08]
//Alt: cmp byte ptr [rcx+28],00
unregistersymbol(originalcode_instantcooldown)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>24048</ID>
              <Description>"alt combat abilities set key"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(altcabilitiessetkeyiddefault,12)

aobscanmodule(cAbilitiesSetToggleAOB,ACOdyssey.exe,C6 ** ** ** 00 C7 ** ** ** ** ** 00 00 E8 ** ** ** ** 84 C0 74)
registersymbol(cAbilitiesSetToggleAOB)

label(bAltCAbilitiesSetKey)
registersymbol(bAltCAbilitiesSetKey)

alloc(newmem,2048,cAbilitiesSetToggleAOB+5) //"ACOdyssey.exe"+362BFF7)
label(originalcode_cAbilitiesSetToggleAOB)
registersymbol(originalcode_cAbilitiesSetToggleAOB)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(cAbilitiesSetToggleAOB+5,8)
//mov [rsp+4C],000000CC
reassemble(cAbilitiesSetToggleAOB+d)
//call ACOdyssey.exe+36325B0

mov rcx,bAltCAbilitiesSetKey
cmp byte ptr [rcx],1
jne notpressing
cmp byte ptr [rcx+2],1
je end
or al,1
mov [rcx+2],al
jmp end

notpressing:
cmp byte ptr [rcx+2],1
jne end
xor al,al
mov [rcx+2],al
or al,1

end:
readmem(cAbilitiesSetToggleAOB+12,2)
//test al,al
jmp exit

originalcode_cAbilitiesSetToggleAOB:
readmem(cAbilitiesSetToggleAOB+5,15)
//mov [rsp+4C],000000CC
//call ACOdyssey.exe+36325B0
//test al,al

exit:
jmp cAbilitiesSetToggleAOB+14 //"ACOdyssey.exe"+362C006

///
bAltCAbilitiesSetKey:
dd 0
///

cAbilitiesSetToggleAOB+5: //"ACOdyssey.exe"+362BFF7:
jmp newmem

///**************************************************///
label(bEndThread_altCAbilitiesSkillSetKey_keylistener_mem)
registersymbol(bEndThread_altCAbilitiesSkillSetKey_keylistener_mem)

label(bAltCAbilitiesSetKeyID)
registersymbol(bAltCAbilitiesSetKeyID)

alloc(altCAbilitiesSkillSetKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(altCAbilitiesSkillSetKey_keylistener_mem)
createthread(altCAbilitiesSkillSetKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

altCAbilitiesSkillSetKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bAltCAbilitiesSetKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bAltCAbilitiesSetKey
mov [rcx],ax
jmp keylistenerend

keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_altCAbilitiesSkillSetKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_altCAbilitiesSkillSetKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_altCAbilitiesSkillSetKey_keylistener_mem:
dd 0
bAltCAbilitiesSetKeyID:
dd altcabilitiessetkeyiddefault
///

///**************************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_altCAbilitiesSkillSetKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_altCAbilitiesSkillSetKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_altCAbilitiesSkillSetKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_altCAbilitiesSkillSetKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
cAbilitiesSetToggleAOB+5: //"ACOdyssey.exe"+362BFF7:
readmem(originalcode_cAbilitiesSetToggleAOB,15)
//db C7 44 24 4C CC 00 00 00 E8 AC 65 00 00 84 C0
//Alt: mov [rsp+4C],000000CC
//Alt: call ACOdyssey.exe+36325B0
//Alt: test al,al
unregistersymbol(originalcode_cAbilitiesSetToggleAOB)

unregistersymbol(bAltCAbilitiesSetKey)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>24049</ID>
                  <Description>"mod key"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>008000</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bAltCAbilitiesSetKeyID</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24050</ID>
                  <Description>"hold key to use the "inactive" set"</Description>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4859</ID>
              <Description>"one-hit-kill mod key .5"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(onehitkillkeydefault,14)

label(bEndThread_oneHitKillKey_keylistener_mem)
registersymbol(bEndThread_oneHitKillKey_keylistener_mem)

label(bOneHitKillKeyID)
registersymbol(bOneHitKillKeyID)

alloc(oneHitKillKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(oneHitKillKey_keylistener_mem)
createthread(oneHitKillKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

oneHitKillKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bOneHitKill
cmp byte ptr [rcx+2],1
jne @f
mov byte ptr [rcx],1
jmp keylistenerend

@@:
mov rcx,bOneHitKillKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bOneHitKill
mov [rcx],ax
jmp keylistenerend

keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_oneHitKillKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_oneHitKillKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_oneHitKillKey_keylistener_mem:
dd 0
bOneHitKillKeyID:
dd onehitkillkeydefault
///

///********************************************************///
aobscanmodule(bowDamageBarVisualCalAOB,ACOdyssey.exe,E8 ** ** ** ** 0F 28 ** 48 ** ** ** ** 48 ** ** 74)
registersymbol(bowDamageBarVisualCalAOB)

alloc(newmem2,2048,bowDamageBarVisualCalAOB) //"ACOdyssey.exe"+3361073)
label(originalcode2_onehitkillkey)
registersymbol(originalcode2_onehitkillkey)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
reassemble(bowDamageBarVisualCalAOB)
//mov rdx,pPlayer
//mov rdx,[rdx+10]
//cmp [rsp+b0],rdx
//jne @f
mov rdx,bOneHitKill
cmp byte ptr [rdx],1
jne @f
mov edx,3F800000
movd xmm0,edx

@@:
readmem(bowDamageBarVisualCalAOB+5,11)
jmp exit2

originalcode2_onehitkillkey:
readmem(bowDamageBarVisualCalAOB,16)
//call ACOdyssey.exe+33600F0
//movaps xmm6,xmm0
//mov rdx,[rsp+50]
//test rdx,rdx

exit2:
jmp bowDamageBarVisualCalAOB+10 //returnhere2

///

bowDamageBarVisualCalAOB: //"ACOdyssey.exe"+3361073:
jmp newmem2

///********************************************************///
luaCall(lua_aobscan("damageBarsVisualCalAOB","ACOdyssey.exe","76 0C 0F ** ** F3 ** ** ** ** F3 ** ** ** F3 ** ** ** 0F 28",1))

alloc(newmem6,2048,damageBarsVisualCalAOB) //"ACOdyssey.exe"+28AFAD8)
label(originalcode6_onehitkillkey)
registersymbol(originalcode6_onehitkillkey)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
jna @f
readmem(damageBarsVisualCalAOB+2,12)

mov rbx,bOneHitKill
cmp byte ptr [rbx],1
jne @f
mov ebx,3F800000
movd xmm6,ebx

@@:
readmem(damageBarsVisualCalAOB+e,4)

end6:
jmp exit6

originalcode6_onehitkillkey:
readmem(damageBarsVisualCalAOB,18)
//jna ACOdyssey.exe+28AFAE6
//xorps xmm6,xmm6
//cvtsi2ss xmm6,rbx
//divss xmm6,xmm1
//maxss xmm6,xmm7

exit6:
jmp damageBarsVisualCalAOB+12 //"ACOdyssey.exe"+28AFAEA

///

damageBarsVisualCalAOB: //"ACOdyssey.exe"+28AFAD8:
jmp newmem6

///********************************************************///

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_oneHitKillKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_oneHitKillKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_oneHitKillKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_oneHitKillKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem2)
bowDamageBarVisualCalAOB: //"ACOdyssey.exe"+3361073:
readmem(originalcode2_onehitkillkey,16)
//db E8 78 F0 FF FF 0F 28 F0 48 8B 54 24 50 48 85 D2
//Alt: call ACOdyssey.exe+33600F0
//Alt: movaps xmm6,xmm0
//Alt: mov rdx,[rsp+50]
//Alt: test rdx,rdx
unregistersymbol(originalcode2_onehitkillkey)

///********************************************************///
dealloc(newmem6)
damageBarsVisualCalAOB: //"ACOdyssey.exe"+28AFAD8:
readmem(originalcode6_onehitkillkey,18)
//db 76 0C 0F 57 F6 F3 48 0F 2A F3 F3 0F 5E F1 F3 0F 5F F7
//Alt: jna ACOdyssey.exe+28AFAE6
//Alt: xorps xmm6,xmm6
//Alt: cvtsi2ss xmm6,rbx
//Alt: divss xmm6,xmm1
//Alt: maxss xmm6,xmm7
unregistersymbol(originalcode6_onehitkillkey)

///********************************************************///
unregistersymbol(bEndThread_oneHitKillKey_keylistener_mem)

dealloc(oneHitKillKey_keylistener_mem)
unregistersymbol(oneHitKillKey_keylistener_mem)

unregistersymbol(bOneHitKillKeyID)

///
bOneHitKill:
dd 0

///********************************************************///

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4891</ID>
                  <Description>"method"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:use mod key
1:always
</DropDownList>
                  <Color>008000</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bOneHitKill+2</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4860</ID>
                  <Description>"mod key"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>008000</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bOneHitKillKeyID</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4892</ID>
                  <Description>"status"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:normal damage
1:one-hit-kill damaged
</DropDownList>
                  <Color>808080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bOneHitKill</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4897</ID>
              <Description>"healing snake .2"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(proportionalDamageCalAOB,ACOdyssey.exe,F3 ** ** ** 2C F3 ** ** ** ** 44 ** ** 44 ** ** ** EB ** E8 ** ** ** ** 44 ** ** ** 44 ** ** ** 44 ** ** ** ** 44)
registersymbol(proportionalDamageCalAOB)

alloc(newmem,2048,proportionalDamageCalAOB) //"ACOdyssey.exe"+2327433)
label(originalcode_healingsnake)
registersymbol(originalcode_healingsnake)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r14,pPlayer
cmp [r14+8],rsi
jne @f
xor r14d,r14d
jmp exit

originalcode_healingsnake:
readmem(proportionalDamageCalAOB,17)
//mulss xmm0,[rax+2C]
//cvttss2si r14d,xmm0
//cmp r14d,ecx
//cmovle r14d,ecx

exit:
jmp proportionalDamageCalAOB+11

///

proportionalDamageCalAOB: //"ACOdyssey.exe"+2327433:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
proportionalDamageCalAOB: //"ACOdyssey.exe"+2327433:
readmem(originalcode_healingsnake,17)
//db F3 0F 59 40 2C F3 44 0F 2C F0 44 3B F1 44 0F 4E F1
//Alt: mulss xmm0,[rax+2C]
//Alt: cvttss2si r14d,xmm0
//Alt: cmp r14d,ecx
//Alt: cmovle r14d,ecx
unregistersymbol(originalcode_healingsnake)

/*
ACOdyssey.exe+2327396 - F3 0F58 05 9E72B701   - addss xmm0,dword ptr [ACOdyssey.exe+3E9E63C] { (0.50) }
ACOdyssey.exe+232739E - F3 44 0F2C F8         - cvttss2si r15d,xmm0
ACOdyssey.exe+23273A3 - 44 3B F9              - cmp r15d,ecx
ACOdyssey.exe+23273A6 - 44 0F4C F9            - cmovl r15d,ecx
ACOdyssey.exe+23273AA - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+23273AD - E8 DE65C100           - call ACOdyssey.exe+2F3D990
ACOdyssey.exe+23273B2 - 66 0F6E 45 77         - movd xmm0,[rbp+77]
ACOdyssey.exe+23273B7 - 0F5B C0               - cvtdq2ps xmm0,xmm0
ACOdyssey.exe+23273BA - F3 0F59 40 2C         - mulss xmm0,[rax+2C]
ACOdyssey.exe+23273BF - F3 44 0F2C F0         - cvttss2si r14d,xmm0
ACOdyssey.exe+23273C4 - 48 85 F6              - test rsi,rsi
ACOdyssey.exe+23273C7 - 0F84 94010000         - je ACOdyssey.exe+2327561
ACOdyssey.exe+23273CD - 48 8B 4E 10           - mov rcx,[rsi+10]
ACOdyssey.exe+23273D1 - 48 8B 1D 60B05F03     - mov rbx,[ACOdyssey.exe+5922438] { (144B5F6B0) }
ACOdyssey.exe+23273D8 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+23273DB - FF 90 A0000000        - call qword ptr [rax+000000A0]
ACOdyssey.exe+23273E1 - 0FB6 4B 49            - movzx ecx,byte ptr [rbx+49]
ACOdyssey.exe+23273E5 - 48 8B 00              - mov rax,[rax]
ACOdyssey.exe+23273E8 - 48 8B 0C C8           - mov rcx,[rax+rcx*8]
ACOdyssey.exe+23273EC - 48 85 C9              - test rcx,rcx
ACOdyssey.exe+23273EF - 0F84 6C010000         - je ACOdyssey.exe+2327561
ACOdyssey.exe+23273F5 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+23273F8 - 45 3B FE              - cmp r15d,r14d
ACOdyssey.exe+23273FB - 45 0F4E F7            - cmovle r14d,r15d
ACOdyssey.exe+23273FF - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+2327402 - 41 8B D6              - mov edx,r14d
ACOdyssey.exe+2327405 - FF 50 60              - call qword ptr [rax+60]
ACOdyssey.exe+2327408 - E9 54010000           - jmp ACOdyssey.exe+2327561
ACOdyssey.exe+232740D - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+2327410 - E8 7B65C100           - call ACOdyssey.exe+2F3D990
ACOdyssey.exe+2327415 - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+2327418 - 44 38 A0 99000000     - cmp [rax+00000099],r12l
ACOdyssey.exe+232741F - 74 25                 - je ACOdyssey.exe+2327446
ACOdyssey.exe+2327421 - E8 6A65C100           - call ACOdyssey.exe+2F3D990
ACOdyssey.exe+2327426 - 66 0F6E 45 77         - movd xmm0,[rbp+77]
ACOdyssey.exe+232742B - B9 01000000           - mov ecx,00000001 { 1 }
ACOdyssey.exe+2327430 - 0F5B C0               - cvtdq2ps xmm0,xmm0
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+2327433 - F3 0F59 40 2C         - mulss xmm0,[rax+2C]
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+2327438 - F3 44 0F2C F0         - cvttss2si r14d,xmm0
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+232743D - 44 3B F1              - cmp r14d,ecx
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+2327440 - 44 0F4E F1            - cmovle r14d,ecx
ACOdyssey.exe+2327444 - EB 12                 - jmp ACOdyssey.exe+2327458
ACOdyssey.exe+2327446 - E8 4565C100           - call ACOdyssey.exe+2F3D990
ACOdyssey.exe+232744B - 44 8B 70 24           - mov r14d,[rax+24]
ACOdyssey.exe+232744F - 44 3B 75 77           - cmp r14d,[rbp+77]
ACOdyssey.exe+2327453 - 44 0F4F 75 77         - cmovg r14d,[rbp+77]
ACOdyssey.exe+2327458 - 44 39 75 7F           - cmp [rbp+7F],r14d
ACOdyssey.exe+232745C - 0F88 B1000000         - js ACOdyssey.exe+2327513
ACOdyssey.exe+2327462 - 48 85 F6              - test rsi,rsi
ACOdyssey.exe+2327465 - 0F84 F6000000         - je ACOdyssey.exe+2327561
ACOdyssey.exe+232746B - 48 8B 4E 10           - mov rcx,[rsi+10]
ACOdyssey.exe+232746F - 48 8B 1D C2AF5F03     - mov rbx,[ACOdyssey.exe+5922438] { (144B5F6B0) }
ACOdyssey.exe+2327476 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+2327479 - FF 90 A0000000        - call qword ptr [rax+000000A0]
ACOdyssey.exe+232747F - 0FB6 4B 49            - movzx ecx,byte ptr [rbx+49]
ACOdyssey.exe+2327483 - 48 8B 00              - mov rax,[rax]
ACOdyssey.exe+2327486 - 48 8B 0C C8           - mov rcx,[rax+rcx*8]
ACOdyssey.exe+232748A - 48 85 C9              - test rcx,rcx
ACOdyssey.exe+232748D - 74 0F                 - je ACOdyssey.exe+232749E
ACOdyssey.exe+232748F - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+2327492 - 41 F7 DE              - neg r14d
ACOdyssey.exe+2327495 - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+2327498 - 41 8B D6              - mov edx,r14d
ACOdyssey.exe+232749B - FF 50 60              - call qword ptr [rax+60]
ACOdyssey.exe+232749E - 48 8B 4E 10           - mov rcx,[rsi+10]
ACOdyssey.exe+23274A2 - 48 8B 1D 8FAF5F03     - mov rbx,[ACOdyssey.exe+5922438] { (144B5F6B0) }
ACOdyssey.exe+23274A9 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+23274AC - FF 90 A0000000        - call qword ptr [rax+000000A0]
ACOdyssey.exe+23274B2 - 0FB6 4B 49            - movzx ecx,byte ptr [rbx+49]
ACOdyssey.exe+23274B6 - 48 8B 00              - mov rax,[rax]
ACOdyssey.exe+23274B9 - 48 8B 0C C8           - mov rcx,[rax+rcx*8]
ACOdyssey.exe+23274BD - 48 85 C9              - test rcx,rcx
ACOdyssey.exe+23274C0 - 0F84 9B000000         - je ACOdyssey.exe+2327561
ACOdyssey.exe+23274C6 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+23274C9 - 48 8D 55 7F           - lea rdx,[rbp+7F]
*/
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4513</ID>
          <Description>"[ship]"</Description>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>4924</ID>
              <Description>"poseidon .2"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someFlagRead382AOB,ACOdyssey.exe,48 ** ** ** 48 ** ** 48 ** ** FF ** ** ** 00 00 0F B6 48 08 33 C0 88 0B 48 83 C4 20 5B C3)
registersymbol(someFlagRead382AOB)

alloc(newmem,2048,someFlagRead382AOB+10) //"ACOdyssey.exe"+2E9BC26)
label(originalcode_someFlagRead382AOB)
registersymbol(originalcode_someFlagRead382AOB)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayerShipHealthBase
mov rcx,[rcx]
lea rcx,[rcx+1b8]
cmp rcx,rax
jne @f
mov ecx,1
readmem(someFlagRead382AOB+14,10)
//xor eax,eax
//mov [rbx],cl
//add rsp,20
//pop rbx
//ret

originalcode_someFlagRead382AOB:
readmem(someFlagRead382AOB+10,14)
//movzx ecx,byte ptr [rax+08]
//xor eax,eax
//mov [rbx],cl
//add rsp,20
//pop rbx
//ret

///

someFlagRead382AOB+10: //"ACOdyssey.exe"+2E9BC26:
jmp newmem

///*****************************************///
aobscanmodule(shipGodFlagChkAOB,ACOdyssey.exe,32 C0 48 ** ** ** 5B C3 80 ** ** ** 00 00 00 75 ** 48 ** ** FF ** ** ** 00 00 84 C0 74 ** 48 ** ** 48)
registersymbol(shipGodFlagChkAOB)

alloc(newmem2,2048,shipGodFlagChkAOB+8) //"ACOdyssey.exe"+2E87198)
label(originalcode2_shipGodFlagChkAOB)
registersymbol(originalcode2_shipGodFlagChkAOB)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
cmp [rax],rcx
je @f

readmem(shipGodFlagChkAOB+8,7)
je end2

@@:
readmem(shipGodFlagChkAOB,8)

end2:
readmem(shipGodFlagChkAOB+11,9)
jmp exit2

originalcode2_shipGodFlagChkAOB:
readmem(shipGodFlagChkAOB+8,18)
//cmp byte ptr [rcx+000001C0],00
//jne ACOdyssey.exe+2E87190
//mov rax,[rcx]
//call qword ptr [rax+00000100]

exit2:
jmp shipGodFlagChkAOB+1a //"ACOdyssey.exe"+2E871AA

///

shipGodFlagChkAOB+8: //"ACOdyssey.exe"+2E87198:
jmp newmem2

///*****************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someFlagRead382AOB+10: //"ACOdyssey.exe"+2E9BC26:
readmem(originalcode_someFlagRead382AOB,14)
//db 0F B6 48 08 33 C0 88 0B 48 83 C4 20 5B C3
//Alt: movzx ecx,byte ptr [rax+08]
//Alt: xor eax,eax
//Alt: mov [rbx],cl
//Alt: add rsp,20
//Alt: pop rbx
//Alt: ret
unregistersymbol(originalcode_someFlagRead382AOB)

///*****************************************///
dealloc(newmem2)
shipGodFlagChkAOB+8: //"ACOdyssey.exe"+2E87198:
readmem(originalcode2_shipGodFlagChkAOB,18)
//db 80 B9 C0 01 00 00 00 75 EF 48 8B 01 FF 90 00 01 00 00
//Alt: cmp byte ptr [rcx+000001C0],00
//Alt: jne ACOdyssey.exe+2E87190
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+00000100]
unregistersymbol(originalcode2_shipGodFlagChkAOB)

///*****************************************///
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4510</ID>
              <Description>"inf. ship stamina"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(shipStaminaWriteAOB,ACOdyssey.exe,45 ** ** ** F3 44 ** ** ** ** 74 07 80 ** ** ** ** ** **)
registersymbol(shipStaminaWriteAOB)

///
aobscanmodule(shipStaminaOffsetSetAOB,ACOdyssey.exe,48 ** ** ** ** ** ** 0F 28 ** 48 ** ** FF ** 48 ** ** ** ** ** ** 0F 28 ** E8)
registersymbol(shipStaminaOffsetSetAOB)
///

label(dMinShipStaminaPercentage)
registersymbol(dMinShipStaminaPercentage)

alloc(newmem,2048,shipStaminaWriteAOB) //"ACOdyssey.exe"+2DAC495)
label(originalcode_maxstamina)
registersymbol(originalcode_maxstamina)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

push rax
push rcx
mov rax,shipStaminaOffsetSetAOB
xor rcx,rcx
mov ecx,[rax+3]

mov rax,pPlayerShipBase1
mov rax,[rax]
lea rax,[rax+rcx]

cmp rax,rbx
jne @f
mov rcx,dMinShipStaminaPercentage
mulss xmm0,[rcx]
maxss xmm8,xmm0
divss xmm0,[rcx]


@@:
pop rcx
pop rax

originalcode_maxstamina:
readmem(shipStaminaWriteAOB,24)
//ucomiss xmm9,xmm8
//movss [rbx+50],xmm8
//je ACOdyssey.exe+2DAC4A8
//or byte ptr [rbx+00000082],01
//movaps xmm6,[rsp+50]

exit:
jmp shipStaminaWriteAOB+18

///
dMinShipStaminaPercentage:
dd (float)0.99
///

shipStaminaWriteAOB: //"ACOdyssey.exe"+2DAC495:
jmp newmem



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
shipStaminaWriteAOB: //"ACOdyssey.exe"+2DAC495:
readmem(originalcode_maxstamina,24)
//db 45 0F 2E C8 F3 44 0F 11 43 50 74 07 80 8B 82 00 00 00 01 0F 28 74 24 50
//Alt: ucomiss xmm9,xmm8
//Alt: movss [rbx+50],xmm8
//Alt: je ACOdyssey.exe+2DAC4A8
//Alt: or byte ptr [rbx+00000082],01
//Alt: movaps xmm6,[rsp+50]
unregistersymbol(originalcode_maxstamina)

unregistersymbol(dMinShipStaminaPercentage)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4514</ID>
          <Description>"[misc.]"</Description>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>4498</ID>
              <Description>"stealth mod"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someBase1Trace17AOB,ACOdyssey.exe,48 8B ** ** ** ** ** 45 ** ** 44 ** ** ** ** 48 ** ** ** ** 00 00 BA ** ** ** ** 48 ** ** ** ** 00 00 00 00 E8 ** ** ** ** 48 ** ** ** 5B C3)
registersymbol(someBase1Trace17AOB)

label(pSomeBase1Trace)
registersymbol(pSomeBase1Trace)
label(pCrouch)
registersymbol(pCrouch)

alloc(newmem,2048,someBase1Trace17AOB+7) //"ACOdyssey.exe"+333993A)
label(originalcode_stealthmod)
registersymbol(originalcode_stealthmod)
label(exit)
//0, disable; 1, in sneak; 2, always
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r9,pSomeBase1Trace
mov [r9],rcx

readmem(someBase1Trace17AOB+f,7)

mov r8,[rcx]
test r8,r8
jz @f
mov r8,[r8+8]
test r8,r8
jz @f
mov r8,[r8+60]
test r8,r8
jz @f
mov r8,[r8]
test r8,r8
jz @f
lea r8,[r8+660]
mov [r9+8],r8

@@:
//
mov r8,[r9+8]
test r8,r8
jz @f

mov r9,bStealthMod
cmp byte ptr [r9],1
jne @f
mov r9,pPlayer
mov r9,[r9+18]
test r9,r9
jz end
mov r8l,[r8]
mov [r9+a6],r8l
jmp end

@@:
mov r8,pPlayer
mov r8,[r8+18]
test r8,r8
jz end

cmp byte ptr [r9],2
jne @f
mov byte ptr [r8+a6],1
jmp end

@@:
cmp byte ptr [r9+1],1
jne end
mov byte ptr [r9+1],0
mov byte ptr [r8+a6],0
//

end:
readmem(someBase1Trace17AOB+7,8)
jmp exit

originalcode_stealthmod:
readmem(someBase1Trace17AOB+7,15)
//xor r9d,r9d
//mov r8d,[rsp+40]
//add rcx,000000D8

exit:
jmp someBase1Trace17AOB+16

///
pSomeBase1Trace:
dq 0
pCrouch:
dq 0
///

someBase1Trace17AOB+7: //"ACOdyssey.exe"+333993A:
jmp newmem

///****************************************************///
bStealthMod:
db 1


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someBase1Trace17AOB+7: //"ACOdyssey.exe"+333993A:
readmem(originalcode_stealthmod,15)
//db 45 33 C9 44 8B 44 24 40 48 81 C1 D8 00 00 00
//Alt: xor r9d,r9d
//Alt: mov r8d,[rsp+40]
//Alt: add rcx,000000D8
unregistersymbol(originalcode_stealthmod)

unregistersymbol(pSomeBase1Trace)
unregistersymbol(pCrouch)

///****************************************************///
[pPlayer+18]+a6:
db 00
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4499</ID>
                  <Description>"status"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0000:disabled
0100:disabling...
0001:in sneak
0002:always
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>008000</Color>
                  <VariableType>2 Bytes</VariableType>
                  <Address>bStealthMod</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>96</Key>
                        <Key>111</Key>
                      </Keys>
                      <Value>0100</Value>
                      <ID>0</ID>
                      <ActivateSound TTS="">stealth disabled</ActivateSound>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>96</Key>
                        <Key>106</Key>
                      </Keys>
                      <Value>0001</Value>
                      <ID>1</ID>
                      <ActivateSound TTS="">stealth in sneak</ActivateSound>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>96</Key>
                        <Key>109</Key>
                      </Keys>
                      <Value>0002</Value>
                      <ID>2</ID>
                      <ActivateSound TTS="">stealth always</ActivateSound>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>4502</ID>
                  <Description>"numpad0 + numpad/ _ disable"</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4500</ID>
                      <Description>"crouch flag"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>pCrouch</Address>
                      <Offsets>
                        <Offset>0</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>4501</ID>
                      <Description>""</Description>
                      <Options moHideChildren="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>FFFFFF</Color>
                      <VariableType>Byte</VariableType>
                      <Address>pPlayer+18</Address>
                      <Offsets>
                        <Offset>a6</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>4503</ID>
                  <Description>"numpad0 + numpad* _ stealth in sneak"</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>4504</ID>
                  <Description>"numpad0 + numpad- _ always in stealth"</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4898</ID>
              <Description>"ignore health penalty"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
luaCall(lua_aobscan("curseHealthPenaltyWriteAOB","ACOdyssey.exe","40 ** 48 ** ** ** 48 ** ** ** ** ** ** 48 ** ** F3 0F 11 ** ** ** ** ** E8",1))

alloc(newmem,2048,curseHealthPenaltyWriteAOB) //"ACOdyssey.exe"+21DD1E0)
label(originalcode_ignorecursehealthpenalty)
registersymbol(originalcode_ignorecursehealthpenalty)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xorps xmm1,xmm1

originalcode_ignorecursehealthpenalty:
readmem(curseHealthPenaltyWriteAOB,16)
//push rbx
//sub rsp,20
//lea rbx,[rcx-000002A0]
//mov rcx,rbx

exit:
jmp curseHealthPenaltyWriteAOB+10 //"ACOdyssey.exe"+21DD1F0

///

curseHealthPenaltyWriteAOB: //"ACOdyssey.exe"+21DD1E0:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
curseHealthPenaltyWriteAOB: //"ACOdyssey.exe"+21DD1E0:
readmem(originalcode_ignorecursehealthpenalty,16)
//db 40 53 48 83 EC 20 48 8D 99 60 FD FF FF 48 8B CB
//Alt: push rbx
//Alt: sub rsp,20
//Alt: lea rbx,[rcx-000002A0]
//Alt: mov rcx,rbx
unregistersymbol(originalcode_ignorecursehealthpenalty)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4403</ID>
              <Description>"ignore drachmae/resources .4"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
luaCall(lua_aobscan("currencyChkOnBuyQChangeMerchantAccessAOB","ACOdyssey.exe","E8 ** ** ** ** 48 ** ** ** ** 41 3B C6 4C",2))

currencyChkOnBuyQChangeMerchantAccessAOB+a: //"ACOdyssey.exe"+23AAB5A:
db 90 39 C0

///*******************************************///
aobscanmodule(currencyResourcesChkForEngraveOnMerchantAccessAOB,ACOdyssey.exe,E8 ** ** ** ** 3B ** 0F 82 ** ** ** ** 48 ** ** ** 48 ** ** 75 ** B1)
registersymbol(currencyResourcesChkForEngraveOnMerchantAccessAOB)

currencyResourcesChkForEngraveOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EAEAE2:
db 39 C0

///*******************************************///
aobscanmodule(currencyResourcesChkForUpgradeOnMerchantAccessAOB,ACOdyssey.exe,E8 ** ** ** ** 3B C3 0F 82 ** ** ** ** 48 ** ** ** 48 ** ** 75 ** B1)
registersymbol(currencyResourcesChkForUpgradeOnMerchantAccessAOB)

currencyResourcesChkForUpgradeOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EB50C5:
db 39 C0

///*******************************************///
aobscanmodule(resourcesChkOnShipMenuAccessAOB,ACOdyssey.exe,E8 ** ** ** ** 3B ** 0F 82 ** ** ** ** 48 ** ** ** 48 ** ** 75)
registersymbol(resourcesChkOnShipMenuAccessAOB)

alloc(originalcode4_ignoredr,8,resourcesChkOnShipMenuAccessAOB+5)
registersymbol(originalcode4_ignoredr)

originalcode4_ignoredr:
readmem(resourcesChkOnShipMenuAccessAOB+5,2)

///

resourcesChkOnShipMenuAccessAOB+5: //"ACOdyssey.exe"+2E54D80:
db 39 C0

///*******************************************///
aobscanmodule(resourcesChkForCraftOnInventoryMenuAccessAOB,ACOdyssey.exe,48 ** ** E8 ** ** ** ** 3B C7 72)
registersymbol(resourcesChkForCraftOnInventoryMenuAccessAOB)

resourcesChkForCraftOnInventoryMenuAccessAOB+8: //"ACOdyssey.exe"+2E8949E:
db 39 C0

///*******************************************///
aobscanmodule(currencyChkForBountyPayOnMapMenuAccessAOB,ACOdyssey.exe,8B ** ** ** ** ** 85 FF 74 ** 3B F7 72)
registersymbol(currencyChkForBountyPayOnMapMenuAccessAOB)

currencyChkForBountyPayOnMapMenuAccessAOB+a: //"ACOdyssey.exe"+2CE359F:
db 39 F6

///*******************************************///
aobscanmodule(currencyChkForEngraveLearnOnMerchantAccessAOB,ACOdyssey.exe,3B ** ** ** 00 00 48 ** ** 0F 93 C0 38)
registersymbol(currencyChkForEngraveLearnOnMerchantAccessAOB)

currencyChkForEngraveLearnOnMerchantAccessAOB+9: //"ACOdyssey.exe"+300381F:
db 90 B0 01

///*******************************************///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
currencyChkOnBuyQChangeMerchantAccessAOB+a: //"ACOdyssey.exe"+23AAB5A:
db 41 3B C6
//Alt: cmp eax,r14d

///*******************************************///
currencyResourcesChkForEngraveOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EAEAE2:
db 3B C7
//Alt: cmp eax,edi

///*******************************************///
currencyResourcesChkForUpgradeOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EB50C5:
db 3B C3
//Alt: cmp eax,ebx

///*******************************************///
resourcesChkOnShipMenuAccessAOB+5: //"ACOdyssey.exe"+2E54D80:
readmem(originalcode4_ignoredr,2)
//db 3B F8
//Alt: cmp edi,eax
dealloc(originalcode4_ignoredr)
unregistersymbol(originalcode4_ignoredr)

///*******************************************///
resourcesChkForCraftOnInventoryMenuAccessAOB+8: //"ACOdyssey.exe"+2E8949E:
db 3B C7
//Alt: cmp eax,edi

///*******************************************///
currencyChkForBountyPayOnMapMenuAccessAOB+a: //"ACOdyssey.exe"+2CE359F:
db 3B F7
//Alt: cmp esi,edi

///*******************************************///
currencyChkForEngraveLearnOnMerchantAccessAOB+9: //"ACOdyssey.exe"+300381F:
db 0F 93 C0
//Alt: setae al

///*******************************************///
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4432</ID>
              <Description>"ignore ability points"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(abilityPointsReadOnAbilitiesMenuAccessAOB,ACOdyssey.exe,8B 41 ** 8B 51 ** 3B C2 73 03 33 C0 C3 2B C2 C3)
registersymbol(abilityPointsReadOnAbilitiesMenuAccessAOB)

label(pAbilityPoints)
registersymbol(pAbilityPoints)

alloc(newmem,2048,abilityPointsReadOnAbilitiesMenuAccessAOB) //"ACOdyssey.exe"+22FB560)
label(originalcode_ignoreap)
registersymbol(originalcode_ignoreap)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB+1,2)
//lea rax,[rcx+10]
push rax
mov rax,pAbilityPoints
pop [rax]

//mov rax,"ACOdyssey.exe"+2EAC19F
//cmp [rsp],rax
//je @f
//mov rax,"ACOdyssey.exe"+2CE272C
//cmp [rsp],rax
//je @f
//readmem(abilityPointsReadOnAbilitiesMenuAccessAOB,3)
//@@:

readmem(abilityPointsReadOnAbilitiesMenuAccessAOB,8)
jae @f
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB+a,3)
@@:
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB+d,2)
jmp exit

originalcode_ignoreap:
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB,15)
//mov eax,[rcx+10]
//mov edx,[rcx+14]
//cmp eax,edx
//jae ACOdyssey.exe+22FB56D
//xor eax,eax
//ret
//sub eax,edx

exit:
jmp abilityPointsReadOnAbilitiesMenuAccessAOB+f

///
pAbilityPoints:
///

abilityPointsReadOnAbilitiesMenuAccessAOB: //"ACOdyssey.exe"+22FB560:
jmp newmem

///*****************************************///
aobscanmodule(setFlagIfEnoughAPToLearnOnAMAccessAOB,ACOdyssey.exe,45 ** ** 72 06 41 ** ** 41 ** ** 3B ** 0F 96 C0 48)
registersymbol(setFlagIfEnoughAPToLearnOnAMAccessAOB)

setFlagIfEnoughAPToLearnOnAMAccessAOB+d: //"ACOdyssey.exe"+2312EEE:
db 90 B0 01

///*****************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
abilityPointsReadOnAbilitiesMenuAccessAOB: //"ACOdyssey.exe"+22FB560:
readmem(originalcode_ignoreap,15)
//db 8B 41 10 8B 51 14 3B C2 73 03 33 C0 C3 2B C2
//Alt: mov eax,[rcx+10]
//Alt: mov edx,[rcx+14]
//Alt: cmp eax,edx
//Alt: jae ACOdyssey.exe+22FB56D
//Alt: xor eax,eax
//Alt: ret
//Alt: sub eax,edx
unregistersymbol(originalcode_ignoreap)

unregistersymbol(pAbilityPoints)

///*****************************************///
setFlagIfEnoughAPToLearnOnAMAccessAOB+d: //"ACOdyssey.exe"+2312EEE:
db 0F 96 C0
//Alt: setbe al

///*****************************************///
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4433</ID>
                  <Description>"obtained"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pAbilityPoints</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4434</ID>
                      <Description>"spent"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4631</ID>
              <Description>"exp multiplier"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(expmultiplierdefault,(float)1.5)

aobscanmodule(expRead3AOB,ACOdyssey.exe,74 ** 48 ** ** 44 ** ** ** ** ** ** EB 03 44 ** ** 44 ** ** ** 41)
registersymbol(expRead3AOB)

label(pPlayerEXP)
registersymbol(pPlayerEXP)

alloc(newmem,2048,expRead3AOB) //"ACOdyssey.exe"+2710AC4)
label(originalcode_expmultiplier)
registersymbol(originalcode_expmultiplier)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je ha1
mov r9,pPlayerEXP
mov [r9+8],rax
readmem(expRead3AOB+2,3)
mov [r9],rax
readmem(expRead3AOB+5,7)
jmp ha2
ha1:
readmem(expRead3AOB+e,3)
ha2:
readmem(expRead3AOB+11,4)
jmp exit

originalcode_expmultiplier:
readmem(expRead3AOB,21)
//je ACOdyssey.exe+2710AD2
//mov rax,[rax]
//mov r9d,[rax+00000648]
//jmp ACOdyssey.exe+2710AD5
//mov r9d,ecx
//mov r8d,[rdi+10]

exit:
jmp expRead3AOB+15

///
pPlayerEXP:
///

expRead3AOB: //"ACOdyssey.exe"+2710AC4:
jmp newmem

///*********************************************///
aobscanmodule(expGainedReadFromStackAPB,ACOdyssey.exe,8B ** ** 4C 8D ** ** ** ** ** 8B ** ** ** ** ** 48 ** ** ** ** ** ** 44 ** ** ** ** ** ** 48 ** ** ** ** ** **89)
registersymbol(expGainedReadFromStackAPB)

label(dEXPMultiplier)
registersymbol(dEXPMultiplier)

alloc(newmem2,2048,expGainedReadFromStackAPB) //"ACOdyssey.exe"+26E6B7E)
label(originalcode2_expmultiplier)
registersymbol(originalcode2_expmultiplier)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
reassemble(expGainedReadFromStackAPB+3)
mov rdx,dEXPMultiplier
fild dword ptr [r9+4]
fmul dword ptr [rdx]
fistp dword ptr [r9+4]

originalcode2_expmultiplier:
readmem(expGainedReadFromStackAPB,16)
//mov eax,[rbx+68]
//lea r9,[rdi+000000B0]
//mov edx,[rdi+000000B4]

exit2:
jmp expGainedReadFromStackAPB+10

///
dEXPMultiplier:
dd expmultiplierdefault
///

expGainedReadFromStackAPB: //"ACOdyssey.exe"+26E6B7E:
jmp newmem2

///*********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
expRead3AOB: //"ACOdyssey.exe"+2710AC4:
readmem(originalcode_expmultiplier,21)
//db 74 0C 48 8B 00 44 8B 88 48 06 00 00 EB 03 44 8B C9 44 8B 47 10
//Alt: je ACOdyssey.exe+2710AD2
//Alt: mov rax,[rax]
//Alt: mov r9d,[rax+00000648]
//Alt: jmp ACOdyssey.exe+2710AD5
//Alt: mov r9d,ecx
//Alt: mov r8d,[rdi+10]
unregistersymbol(originalcode_expmultiplier)

unregistersymbol(pPlayerEXP)

///*********************************************///
dealloc(newmem2)
expGainedReadFromStackAPB: //"ACOdyssey.exe"+26E6B7E:
readmem(originalcode2_expmultiplier,16)
//db 8B 43 68 4C 8D 8F B0 00 00 00 8B 97 B4 00 00 00
//Alt: mov eax,[rbx+68]
//Alt: lea r9,[rdi+000000B0]
//Alt: mov edx,[rdi+000000B4]
unregistersymbol(originalcode2_expmultiplier)

unregistersymbol(dEXPMultiplier)

///*********************************************///
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4630</ID>
                  <Description>"x?"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dEXPMultiplier</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4632</ID>
                  <Description>""</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4628</ID>
                      <Description>"current"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pPlayerEXP</Address>
                      <Offsets>
                        <Offset>[originalcode_expmultiplier+8]</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>4835</ID>
                          <Description>"lvl?"</Description>
                          <Color>0000FF</Color>
                          <VariableType>4 Bytes</VariableType>
                          <Address>-5c</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>24036</ID>
              <Description>"ignore inv capacity"</Description>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(invCapacityChkMax1AOB,ACOdyssey.exe,8B ** ** ** 00 00 39 ** ** 0F 97 C0 84 C0 0F 84)
registersymbol(invCapacityChkMax1AOB)

invCapacityChkMax1AOB+9: //"ACOdyssey.exe"+27D9844:
db 90 30 C0

///**************************************///
aobscanmodule(invCapacityChkMax2AOB,ACOdyssey.exe,8B ** ** ** 00 00 39 ** ** 0F 97 C0 48 ** ** ** C3)
registersymbol(invCapacityChkMax2AOB)

invCapacityChkMax2AOB+9: //"ACOdyssey.exe"+27D342C:
db 90 30 C0

///**************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
invCapacityChkMax1AOB+9: //"ACOdyssey.exe"+27D9844:
db 0F 97 C0
//Alt: seta al

///**************************************///
invCapacityChkMax2AOB+9: //"ACOdyssey.exe"+27D342C:
db 0F 97 C0
//Alt: seta al

///**************************************///
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>4688</ID>
              <Description>"time of day mod"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(timeOfDayRead1AOB,ACOdyssey.exe,48 ** ** ** ** 75 ** 48 8B ** ** ** ** ** F3 0F 10 08 48)
registersymbol(timeOfDayRead1AOB)

define(day_length,(float)24)

label(pTimeOfDay)
registersymbol(pTimeOfDay)
label(bAdvanceTimeOfDay)
registersymbol(bAdvanceTimeOfDay)
label(bRewindTimeOfDay)
registersymbol(bRewindTimeOfDay)
label(fTimeOfDayMod)
registersymbol(fTimeOfDayMod)

alloc(newmem,2048,timeOfDayRead1AOB)
label(originalcode_timeofdaymod)
registersymbol(originalcode_timeofdaymod)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(timeOfDayRead1AOB,14)

//
sub rsp,10
movdqu dqword [rsp],xmm1
sub rsp,10
movdqu dqword [rsp],xmm2
push rcx
push rbx
push rax
//

mov rbx,pTimeOfDay
mov [rbx],rax

mov rbx,fTimeOfDayMod
movss xmm1,[rbx+c]
mov rcx,bAdvanceTimeOfDay
mov eax,[rcx]
test al,al
jnz @f
mulss xmm1,[rbx+10]
mov rcx,bRewindTimeOfDay
mov eax,[rcx]
test al,al
jnz @f
xorps xmm1,xmm1

@@:
movss [rbx+4],xmm1

@@:
movss xmm1,[rbx]
comiss xmm1,[rbx+4]
jb inctodm
ja dectodm
jmp settodm

inctodm:
addss xmm1,[rbx+8]
comiss xmm1,[rbx+4]
jbe settodm
movss xmm1,[rbx+4]
jmp settodm

dectodm:
subss xmm1,[rbx+8]
comiss xmm1,[rbx+4]
jae settodm
movss xmm1,[rbx+4]
jmp settodm

settodm:
movss [rbx],xmm1

@@:
mov eax,day_length
mov rcx,[rsp]
movss xmm1,[rcx]
addss xmm1,[rbx]

xorps xmm2,xmm2
comiss xmm1,xmm2
jae @f
movd xmm2,eax
addss xmm1,xmm2
jmp settod

@@:
movd xmm2,eax
comiss xmm1,xmm2
jbe settod
subss xmm1,xmm2
//xorps xmm1,xmm1

settod:
mov rcx,[rsp]
movss [rcx],xmm1

//
@@:
pop rax
pop rbx
pop rcx
movdqu xmm2,dqword [rsp]
add rsp,10
movdqu xmm1,dqword [rsp]
add rsp,10
//

end:
readmem(timeOfDayRead1AOB+e,4)
jmp exit

originalcode_timeofdaymod:
readmem(timeOfDayRead1AOB,18)

exit:
jmp timeOfDayRead1AOB+12

///
pTimeOfDay:
dq 0
bAdvanceTimeOfDay:
dd 0
bRewindTimeOfDay:
dd 0
fTimeOfDayMod:
dd 0
dd 0
dd (float)0.0027777777777778 //10
dd (float)0.0555555555555556 //200
dd (float)-1
///

timeOfDayRead1AOB:
jmp newmem

///********************************************************///
label(bEndThread_timeOfDay_keylistener_mem)
registersymbol(bEndThread_timeOfDay_keylistener_mem)
label(bAdvanceTimeOfDayTmp)
label(bRewindTimeOfDayTmp)

alloc(timeOfDay_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(timeOfDay_keylistener_mem)
createthread(timeOfDay_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

timeOfDay_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rax,bAdvanceTimeOfDayTmp
mov dword ptr [rax],0
mov rax,bRewindTimeOfDayTmp
mov dword ptr [rax],0

mov rcx,14 //CAPS LOCK key
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
cmp ax,1
jne keylistenerend

mov rcx,22 //PAGE DOWN key
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rax,bAdvanceTimeOfDayTmp
mov dword ptr [rax],1
jmp keylistenerend

@@:
mov rcx,21 //PAGE UP key
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rax,bRewindTimeOfDayTmp
mov dword ptr [rax],1
jmp keylistenerend

keylistenerend:
mov rbx,bAdvanceTimeOfDayTmp
mov eax,[rbx]
mov rbx,bAdvanceTimeOfDay
mov [rbx],eax
mov rbx,bRewindTimeOfDayTmp
mov eax,[rbx]
mov rbx,bRewindTimeOfDay
mov [rbx],eax
mov rcx,#100
call Sleep
mov rbx,bEndThread_timeOfDay_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_timeOfDay_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_timeOfDay_keylistener_mem:
dd 0
bAdvanceTimeOfDayTmp:
dd 0
bRewindTimeOfDayTmp:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_timeOfDay_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_timeOfDay_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_timeOfDay_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_timeOfDay_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
timeOfDayRead1AOB:
readmem(originalcode_timeofdaymod,18)
//db 48 8B 5C 24 40 75 07 48 8B 87 40 02 00 00 F3 0F 10 08
//Alt: mov rbx,[rsp+40]
//Alt: jne ACOrigins.AK::WriteBytesMem::Bytes+2598EA
//Alt: mov rax,[rdi+00000240]
//Alt: movss xmm1,[rax]

unregistersymbol(originalcode_timeofdaymod)
unregistersymbol(pTimeOfDay)
unregistersymbol(bAdvanceTimeOfDay)
unregistersymbol(bRewindTimeOfDay)
unregistersymbol(fTimeOfDayMod)

///********************************************************///
unregistersymbol(bEndThread_timeOfDay_keylistener_mem)

dealloc(timeOfDay_keylistener_mem)
unregistersymbol(timeOfDay_keylistener_mem)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4689</ID>
                  <Description>"CapsLock_PageUp to rewind"</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4690</ID>
                      <Description>"bAdvanceTimeOfDay"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:no
1:yes
</DropDownList>
                      <Color>008000</Color>
                      <VariableType>Byte</VariableType>
                      <Address>bAdvanceTimeOfDay</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>4691</ID>
                      <Description>"bRewindTimeOfDay"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:no
1:yes
</DropDownList>
                      <Color>008000</Color>
                      <VariableType>Byte</VariableType>
                      <Address>bRewindTimeOfDay</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>4692</ID>
                  <Description>"CapsLock_PageDown to advance"</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4693</ID>
                      <Description>"fTimeOfDayMod"</Description>
                      <Color>008000</Color>
                      <VariableType>Float</VariableType>
                      <Address>fTimeOfDayMod</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>4694</ID>
                      <Description>"fTimeOfDayMod+4"</Description>
                      <Color>008000</Color>
                      <VariableType>Float</VariableType>
                      <Address>fTimeOfDayMod+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>4695</ID>
                      <Description>"fTimeOfDayMod+8"</Description>
                      <Color>008000</Color>
                      <VariableType>Float</VariableType>
                      <Address>fTimeOfDayMod+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>4696</ID>
                      <Description>"fTimeOfDayMod+c"</Description>
                      <Color>008000</Color>
                      <VariableType>Float</VariableType>
                      <Address>fTimeOfDayMod+c</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>4697</ID>
                  <Description>"current time of day"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>pTimeOfDay</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4880</ID>
              <Description>"Ikaros teleport"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(eagleteleportkeydefault,14)
define(ettimer,#1000)

aobscanmodule(waypointSetAOB,ACOdyssey.exe,74 ** 48 ** ** ** 0F 29 ** ** 48 ** ** ** 48)
registersymbol(waypointSetAOB)
aobscanmodule(coordsWriteAOB,ACOdyssey.exe,02 ** 28 ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** C3)
registersymbol(coordsWriteAOB)

label(bEagleTeleport)
registersymbol(bEagleTeleport)
label(vEagleWaypoint)
registersymbol(vEagleWaypoint)

alloc(newmem,2048,waypointSetAOB+2) //"ACOdyssey.exe"+2D669AD)
label(originalcode_eagleteleport)
registersymbol(originalcode_eagleteleport)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayer
mov rax,[rax+10]
cmp [rsp+1f8],rax
jne @f

mov rcx,bEagleTeleport
cmp byte ptr [rcx],1
jne @f

mov rcx,vEagleWaypoint
{movaps [rbx+60],xmm3 //t}
//db 0F 11 59 30
db 0F 11 59
readmem(coordsWriteAOB+1b,1)
//movups [rcx+30],xmm3
//db 0F 11 58 50
db 0F 11 58
readmem(coordsWriteAOB+1f,1)
//movups [rax+50],xmm3
mov word ptr [rcx+4],ettimer
jmp end

@@:
mov rax,vEagleWaypoint
xor rcx,rcx
mov [rax],rcx
mov [rax+30],rcx
mov [rax+38],rcx

end:

originalcode_eagleteleport:
readmem(waypointSetAOB+2,16)
//mov rax,[rbx+20]
//movaps [rbx+60],xmm3
//mov rcx,[rax+08]
//shl rcx,20

exit:
jmp waypointSetAOB+12 //"ACOdyssey.exe"+2D669BD

///
bEagleTeleport:
dd 0
vEagleWaypoint:
///

waypointSetAOB+2: //"ACOdyssey.exe"+2D669AD:
jmp newmem

///**************************************************///
alloc(newmem2,2048,coordsWriteAOB+10) //"ACOdyssey.exe"+ABFA882)
label(originalcode2_egaleteleport)
registersymbol(originalcode2_egaleteleport)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here

readmem(coordsWriteAOB+10,8)
//movaps xmm0,[rax+20]
//movaps [rcx+40],xmm0

push rax
mov rax,pPlayer
cmp [rax+10],rcx
mov rax,[rsp]
jne end2

mov rax,vEagleWaypoint
cmp word ptr [rax],0
mov rax,[rsp]
jle @f
mov rax,vEagleWaypoint
dec byte ptr [rax]
//movaps xmm1,[rax+30]//
//movaps [rcx+50],xmm1//

@@:

end2:
readmem(coordsWriteAOB+18,8)
//movaps xmm1,[rax+30]
//movaps [rcx+50],xmm1
pop rax
jmp exit2

originalcode2_egaleteleport:
readmem(coordsWriteAOB+10,16)
//movaps xmm0,[rax+20]
//movaps [rcx+40],xmm0
//movaps xmm1,[rax+30]
//movaps [rcx+50],xmm1

exit2:
jmp coordsWriteAOB+20 //"ACOdyssey.exe"+ABFA892

///

coordsWriteAOB+10: //"ACOdyssey.exe"+ABFA882:
jmp newmem2

///**************************************************///
label(bEndThread_eagleTeleportKey_keylistener_mem)
registersymbol(bEndThread_eagleTeleportKey_keylistener_mem)

label(bEagleTeleportKeyID)
registersymbol(bEagleTeleportKeyID)

alloc(eagleTeleportKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(eagleTeleportKey_keylistener_mem)
createthread(eagleTeleportKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

eagleTeleportKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bEagleTeleportKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bEagleTeleport
mov [rcx],ax
jmp keylistenerend

keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_eagleTeleportKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_eagleTeleportKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_eagleTeleportKey_keylistener_mem:
dd 0
bEagleTeleportKeyID:
dd eagleteleportkeydefault
///

///**************************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_eagleTeleportKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_eagleTeleportKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_eagleTeleportKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_eagleTeleportKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
waypointSetAOB+2: //"ACOdyssey.exe"+2D669AD:
readmem(originalcode_eagleteleport,16)
//db 48 8B 43 20 0F 29 5B 60 48 8B 48 08 48 C1 E1 20
//Alt: mov rax,[rbx+20]
//Alt: movaps [rbx+60],xmm3
//Alt: mov rcx,[rax+08]
//Alt: shl rcx,20
unregistersymbol(originalcode_eagleteleport)

unregistersymbol(bEagleTeleport)
unregistersymbol(vEagleWaypoint)

///**************************************************///
dealloc(newmem2)
coordsWriteAOB+10: //"ACOdyssey.exe"+ABFA882:
readmem(originalcode2_egaleteleport,16)
//db 0F 28 40 20 0F 29 41 40 0F 28 48 30 0F 29 49 50
//Alt: movaps xmm0,[rax+20]
//Alt: movaps [rcx+40],xmm0
//Alt: movaps xmm1,[rax+30]
//Alt: movaps [rcx+50],xmm1
unregistersymbol(originalcode2_egaleteleport)

///**************************************************///
unregistersymbol(bEndThread_eagleTeleportKey_keylistener_mem)

dealloc(eagleTeleportKey_keylistener_mem)
unregistersymbol(eagleTeleportKey_keylistener_mem)

unregistersymbol(bEagleTeleportKeyID)

///**************************************************///
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4882</ID>
                  <Description>"mod key"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>008000</Color>
                  <VariableType>Byte</VariableType>
                  <Address>bEagleTeleportKeyID</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4881</ID>
                  <Description>"should teleport when hovering"</Description>
                  <Options moHideChildren="1"/>
                  <Color>808080</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4909</ID>
              <Description>"movement mod"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(cJmpIfNoHouseSpeedLimitedChkNeededAOB,ACOdyssey.exe,E8 ** ** ** ** 84 ** 74 ** F3 ** ** ** ** ** F3 ** ** ** ** ** 0F 2F ** 76 ** F3 ** ** ** ** ** 49)
registersymbol(cJmpIfNoHouseSpeedLimitedChkNeededAOB)

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>4351</ID>
                  <Description>"movement mod key .5"</Description>
                  <Options moHideChildren="1"/>
                  <Color>FF0000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(walkkeyiddefault,05)
define(jogkeyiddefault,06)
define(walkspeedmultiplier,(float)0.3)
define(jogspeedmultiplier,(float)0.68)

//aobscanmodule(movementSpeedWritesAOB,ACOdyssey.exe,41 ** ** ** 00 00 f3 0f 11 ** ** ** 00 00 e8)
//registersymbol(movementSpeedWritesAOB)
aobscanmodule(movementSpeedWritesAOB,ACOdyssey.exe,41 ** 2b ** 00 00 f3 0f 11 ** ** ** 00 00 e8)
registersymbol(movementSpeedWritesAOB)

label(bWalkKeyID)
registersymbol(bWalkKeyID)
label(bJogKeyID)
registersymbol(bJogKeyID)
label(bWalkKeyPressed)
registersymbol(bWalkKeyPressed)
label(dWalkSpeedMultiplier)
registersymbol(dWalkSpeedMultiplier)

alloc(newmem,2048,movementSpeedWritesAOB) //"ACOdyssey.exe"+338979D)
label(originalcode_walkkey)
registersymbol(originalcode_walkkey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end:

originalcode_walkkey:
readmem(movementSpeedWritesAOB,14)
//mov r8d,0000002B
//movss [rbx+000002B0],xmm0

exit:
jmp movementSpeedWritesAOB+e //"ACOdyssey.exe"+33897AB

///
bWalkKeyID:
dd walkkeyiddefault
bJogKeyID:
dd jogkeyiddefault
bWalkKeyPressed:
dd 0
dWalkSpeedMultiplier:
dd walkspeedmultiplier
dd walkspeedmultiplier
dd jogspeedmultiplier
///

movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
jmp newmem

///********************************************************///
/*
aobscanmodule(horseMovementSpeedWritesAOB,ACOdyssey.exe,41 ** E0 ** ** ** F3 0F 11 ** ** ** ** ** E8)
registersymbol(horseMovementSpeedWritesAOB)

alloc(newmem2,2048,horseMovementSpeedWritesAOB) //"ACOdyssey.exe"+33FAE07)
label(originalcode2_walkkey)
registersymbol(originalcode2_walkkey)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end2

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end2:

originalcode2_walkkey:
readmem(horseMovementSpeedWritesAOB,14)
//mov r8d,000000E0
//movss [rbx+000002E0],xmm0

exit2:
jmp horseMovementSpeedWritesAOB+e //"ACOdyssey.exe"+33FAE15

///

horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
jmp newmem2

///********************************************************///
aobscanmodule(movementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 48)
registersymbol(movementSpeedWritesInAutoMoveAOB)

alloc(newmem6,2048,movementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB0FC)
label(originalcode6_walkkey)
registersymbol(originalcode6_walkkey)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2b0],3F800000
//movdqa [rbx+2a0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end6
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(movementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2b0],ecx

end6:
jmp exit6

originalcode6_walkkey:
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002B0],3F800000
//movdqa [rbx+000002A0],xmm2

exit6:
jmp movementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB10E

///

movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
jmp newmem6

///********************************************************///
/*
aobscanmodule(horseMovementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 41)
registersymbol(horseMovementSpeedWritesInAutoMoveAOB)

alloc(newmem11,2048,horseMovementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB18E)
label(originalcode11_walkkey)
registersymbol(originalcode11_walkkey)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2e0],3F800000
//movdqa [rbx+2d0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end11
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(horseMovementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2e0],ecx

end11:
jmp exit11


originalcode11_walkkey:
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002E0],3F800000
//movdqa [rbx+000002D0],xmm2

exit11:
jmp horseMovementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB1A0

///

horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
jmp newmem11

///********************************************************///
alloc(newmem17,2048,cJmpIfNoHouseSpeedLimitedChkNeededAOB-11) //"ACOdyssey.exe"+1E3DBF7)
label(originalcode17_walkkey)
registersymbol(originalcode17_walkkey)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne @f

mov rcx,pPlayer
test rcx,rcx
jz @f
cmp [rcx+10],r15
jne @f

//mov edx,(float)12
//movd xmm1,edx
//comiss xmm1,[rsp+30]
//jbe @f
mov edx,(float)15
mov rcx,dWalkSpeedMultiplier
movd xmm1,edx
mulss xmm1,[rcx]
comiss xmm1,[rsp+30]
jae @f
movss [rsp+30],xmm1
//mov edx,(float)15
//movd xmm1,edx
//comiss xmm1,[rsp+30]
//jne @f
//mov rcx,dWalkSpeedMultiplier
//mulss xmm1,[rcx]
//movss [rsp+30],xmm1

originalcode17_walkkey:
readmem(cJmpIfNoHouseSpeedLimitedChkNeededAOB-11,14)
//mov rcx,[rsp+48]
//lea rdx,[rsp+40]
//movzx r9d,al

exit17:
jmp cJmpIfNoHouseSpeedLimitedChkNeededAOB-3 //"ACOdyssey.exe"+1E3DC05

///

cJmpIfNoHouseSpeedLimitedChkNeededAOB-11: //"ACOdyssey.exe"+1E3DBF7:
jmp newmem17

///********************************************************///
label(bEndThread_walkKey_keylistener_mem)
registersymbol(bEndThread_walkKey_keylistener_mem)

alloc(walkKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(walkKey_keylistener_mem)
createthread(walkKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

walkKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bWalkKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+4]
mov [rcx],eax
jmp keylistenerend

@@:
mov rcx,bJogKeyID
mov rcx,[rcx]
//mov rcx,06 //X2 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+8]
mov [rcx],eax
jmp keylistenerend



keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_walkKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_walkKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_walkKey_keylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_walkKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_walkKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_walkKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_walkKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
readmem(originalcode_walkkey,14)
//db 41 B8 2B 00 00 00 F3 0F 11 83 B0 02 00 00
//Alt: mov r8d,0000002B
//Alt: movss [rbx+000002B0],xmm0
unregistersymbol(originalcode_walkkey)

unregistersymbol(bWalkKeyID)
unregistersymbol(bJogKeyID)
unregistersymbol(bWalkKeyPressed)
unregistersymbol(dWalkSpeedMultiplier)

///********************************************************///
/*
dealloc(newmem2)
horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
readmem(originalcode2_walkkey,14)
//db 41 B8 E0 00 00 00 F3 0F 11 83 E0 02 00 00
//Alt: mov r8d,000000E0
//Alt: movss [rbx+000002E0],xmm0
unregistersymbol(originalcode2_walkkey)

///********************************************************///
dealloc(newmem6)
movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
readmem(originalcode6_walkkey,18)
//db C7 83 B0 02 00 00 00 00 80 3F 66 0F 7F 93 A0 02 00 00
//Alt: mov [rbx+000002B0],3F800000
//Alt: movdqa [rbx+000002A0],xmm2
unregistersymbol(originalcode6_walkkey)

///********************************************************///
/*
dealloc(newmem11)
horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
readmem(originalcode11_walkkey,18)
//db C7 83 E0 02 00 00 00 00 80 3F 66 0F 7F 93 D0 02 00 00
//Alt: mov [rbx+000002E0],3F800000
//Alt: movdqa [rbx+000002D0],xmm2
unregistersymbol(originalcode11_walkkey)

///********************************************************///
dealloc(newmem17)
cJmpIfNoHouseSpeedLimitedChkNeededAOB-11: //"ACOdyssey.exe"+1E3DBF7:
readmem(originalcode17_walkkey,14)
//db 48 8B 4C 24 48 48 8D 54 24 40 44 0F B6 C8
//Alt: mov rcx,[rsp+48]
//Alt: lea rdx,[rsp+40]
//Alt: movzx r9d,al
unregistersymbol(originalcode17_walkkey)

///********************************************************///
unregistersymbol(bEndThread_walkKey_keylistener_mem)

dealloc(walkKey_keylistener_mem)
unregistersymbol(walkKey_keylistener_mem)

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4475</ID>
                      <Description>"walk key"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>008000</Color>
                      <VariableType>Byte</VariableType>
                      <Address>bWalkKeyID</Address>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>4353</ID>
                          <Description>"speed"</Description>
                          <Color>008000</Color>
                          <VariableType>Float</VariableType>
                          <Address>dWalkSpeedMultiplier+4</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2102</ID>
                      <Description>"jogging key"</Description>
                      <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>008000</Color>
                      <VariableType>Byte</VariableType>
                      <Address>bJogKeyID</Address>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>4404</ID>
                          <Description>"speed"</Description>
                          <Color>008000</Color>
                          <VariableType>Float</VariableType>
                          <Address>dWalkSpeedMultiplier+8</Address>
                          <Hotkeys>
                            <Hotkey>
                              <Action>Set Value</Action>
                              <Keys>
                                <Key>6</Key>
                                <Key>82</Key>
                              </Keys>
                              <Value>0.68</Value>
                              <ID>0</ID>
                            </Hotkey>
                            <Hotkey>
                              <Action>Set Value</Action>
                              <Keys>
                                <Key>6</Key>
                                <Key>66</Key>
                              </Keys>
                              <Value>0.55</Value>
                              <ID>1</ID>
                            </Hotkey>
                          </Hotkeys>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>4908</ID>
                  <Description>"ignore horse speed limit .2"</Description>
                  <Color>FF0000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//aobscanmodule(cJmpIfNoHouseSpeedLimitedChkNeededAOB,ACOdyssey.exe,E8 ** ** ** ** 84 ** 74 ** F3 ** ** ** ** ** F3 ** ** ** ** ** 0F 2F ** 76 ** F3 ** ** ** ** ** 49)
//registersymbol(cJmpIfNoHouseSpeedLimitedChkNeededAOB)

cJmpIfNoHouseSpeedLimitedChkNeededAOB+7: //"ACOdyssey.exe"+1E3DC0F:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
cJmpIfNoHouseSpeedLimitedChkNeededAOB+7: //"ACOdyssey.exe"+1E3DC0F:
db 74
//Alt: je

/*
ACOdyssey.exe+1E3DB87 - 42 89 04 31           - mov [rcx+r14],eax
ACOdyssey.exe+1E3DB8B - B8 10000000           - mov eax,00000010 { 16 }
ACOdyssey.exe+1E3DB90 - 42 8B 0C 30           - mov ecx,[rax+r14]
ACOdyssey.exe+1E3DB94 - 39 4B 5C              - cmp [rbx+5C],ecx
ACOdyssey.exe+1E3DB97 - 75 37                 - jne ACOdyssey.exe+1E3DBD0
ACOdyssey.exe+1E3DB99 - F0 FF 43 58           - lock inc [rbx+58]
ACOdyssey.exe+1E3DB9D - 49 8B 87 A0010000     - mov rax,[r15+000001A0]
ACOdyssey.exe+1E3DBA4 - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+1E3DBA7 - 48 8B 4B 50           - mov rcx,[rbx+50]
ACOdyssey.exe+1E3DBAB - 48 8B 50 10           - mov rdx,[rax+10]
ACOdyssey.exe+1E3DBAF - E8 1CD2AFFE           - call ACOdyssey.exe+93ADD0
ACOdyssey.exe+1E3DBB4 - 48 85 C0              - test rax,rax
ACOdyssey.exe+1E3DBB7 - 0F95 C0               - setne al
ACOdyssey.exe+1E3DBBA - F0 FF 4B 58           - lock dec [rbx+58]
ACOdyssey.exe+1E3DBBE - 84 C0                 - test al,al
ACOdyssey.exe+1E3DBC0 - 74 33                 - je ACOdyssey.exe+1E3DBF5
ACOdyssey.exe+1E3DBC2 - B8 01000000           - mov eax,00000001 { 1 }
ACOdyssey.exe+1E3DBC7 - EB 2E                 - jmp ACOdyssey.exe+1E3DBF7
ACOdyssey.exe+1E3DBC9 - 0F1F 80 00000000      - nop [rax+00000000]
ACOdyssey.exe+1E3DBD0 - 8B 43 58              - mov eax,[rbx+58]
ACOdyssey.exe+1E3DBD3 - A9 0000F07F           - test eax,7FF00000 { 2146435072 }
ACOdyssey.exe+1E3DBD8 - 75 17                 - jne ACOdyssey.exe+1E3DBF1
ACOdyssey.exe+1E3DBDA - B8 01000000           - mov eax,00000001 { 1 }
ACOdyssey.exe+1E3DBDF - F0 0FC1 43 58         - lock xadd [rbx+58],eax
ACOdyssey.exe+1E3DBE4 - FF C0                 - inc eax
ACOdyssey.exe+1E3DBE6 - A9 0000F07F           - test eax,7FF00000 { 2146435072 }
ACOdyssey.exe+1E3DBEB - 74 B0                 - je ACOdyssey.exe+1E3DB9D
ACOdyssey.exe+1E3DBED - F0 FF 4B 58           - lock dec [rbx+58]
ACOdyssey.exe+1E3DBF1 - F3 90                 - repe nop
ACOdyssey.exe+1E3DBF3 - EB DB                 - jmp ACOdyssey.exe+1E3DBD0
ACOdyssey.exe+1E3DBF5 - 33 C0                 - xor eax,eax
ACOdyssey.exe+1E3DBF7 - 48 8B 4C 24 48        - mov rcx,[rsp+48]
ACOdyssey.exe+1E3DBFC - 48 8D 54 24 40        - lea rdx,[rsp+40]
ACOdyssey.exe+1E3DC01 - 44 0FB6 C8            - movzx r9d,al
ACOdyssey.exe+1E3DC05 - 4D 8B C7              - mov r8,r15
cJmpIfNotHouseSpeedLimitedAOB- E8 A36FFDFF           - call ACOdyssey.exe+1E14BB0
ACOdyssey.exe+1E3DC0D - 84 C0                 - test al,al
ACOdyssey.exe+1E3DC0F - 74 17                 - je ACOdyssey.exe+1E3DC28
ACOdyssey.exe+1E3DC11 - F3 0F10 4C 24 40      - movss xmm1,[rsp+40]
ACOdyssey.exe+1E3DC17 - F3 0F10 44 24 30      - movss xmm0,[rsp+30]
ACOdyssey.exe+1E3DC1D - 0F2F C1               - comiss xmm0,xmm1
ACOdyssey.exe+1E3DC20 - 76 06                 - jna ACOdyssey.exe+1E3DC28
ACOdyssey.exe+1E3DC22 - F3 0F11 4C 24 30      - movss [rsp+30],xmm1
ACOdyssey.exe+1E3DC28 - 49 8B CF              - mov rcx,r15
ACOdyssey.exe+1E3DC2B - E8 00127300           - call ACOdyssey.exe+256EE30
ACOdyssey.exe+1E3DC30 - 48 8B D8              - mov rbx,rax
ACOdyssey.exe+1E3DC33 - 48 85 C0              - test rax,rax
ACOdyssey.exe+1E3DC36 - 0F84 9B000000         - je ACOdyssey.exe+1E3DCD7
ACOdyssey.exe+1E3DC3C - 4D 85 FF              - test r15,r15
ACOdyssey.exe+1E3DC3F - 0F84 92000000         - je ACOdyssey.exe+1E3DCD7
ACOdyssey.exe+1E3DC45 - 65 48 8B 0C 25 58000000  - mov rcx,gs:[00000058] { 88 }
ACOdyssey.exe+1E3DC4E - B8 14000000           - mov eax,00000014 { 20 }
ACOdyssey.exe+1E3DC53 - 4E 8B 34 E9           - mov r14,[rcx+r13*8]
ACOdyssey.exe+1E3DC57 - 8B C8                 - mov ecx,eax
ACOdyssey.exe+1E3DC59 - 42 8B 04 30           - mov eax,[rax+r14]
ACOdyssey.exe+1E3DC5D - A8 01                 - test al,01 { 1 }
ACOdyssey.exe+1E3DC5F - 75 15                 - jne ACOdyssey.exe+1E3DC76
ACOdyssey.exe+1E3DC61 - 83 C8 01              - or eax,01 { 1 }
ACOdyssey.exe+1E3DC64 - 42 89 04 31           - mov [rcx+r14],eax
ACOdyssey.exe+1E3DC68 - E8 C38E96FE           - call ACOdyssey.exe+7A6B30
ACOdyssey.exe+1E3DC6D - B9 10000000           - mov ecx,00000010 { 16 }
ACOdyssey.exe+1E3DC72 - 42 89 04 31           - mov [rcx+r14],eax
ACOdyssey.exe+1E3DC76 - B8 10000000           - mov eax,00000010 { 16 }
ACOdyssey.exe+1E3DC7B - 42 8B 0C 30           - mov ecx,[rax+r14]
ACOdyssey.exe+1E3DC7F - 39 4B 5C              - cmp [rbx+5C],ecx
ACOdyssey.exe+1E3DC82 - 75 2E                 - jne ACOdyssey.exe+1E3DCB2
ACOdyssey.exe+1E3DC84 - F0 FF 43 58           - lock inc [rbx+58]
ACOdyssey.exe+1E3DC88 - 49 8B 87 A0010000     - mov rax,[r15+000001A0]
ACOdyssey.exe+1E3DC8F - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+1E3DC92 - 48 8B 4B 50           - mov rcx,[rbx+50]
ACOdyssey.exe+1E3DC96 - 48 8B 50 10           - mov rdx,[rax+10]
ACOdyssey.exe+1E3DC9A - E8 31D1AFFE           - call ACOdyssey.exe+93ADD0
ACOdyssey.exe+1E3DC9F - 48 85 C0              - test rax,rax
*/
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4376</ID>
          <Description>"[pointers]"</Description>
          <Options moHideChildren="1"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>4377</ID>
              <Description>"[player]"</Description>
              <Options moHideChildren="1"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>000080</Color>
              <VariableType>Array of byte</VariableType>
              <ByteLength>0</ByteLength>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>4378</ID>
                  <Description>"current health"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pPlayer</Address>
                  <Offsets>
                    <Offset>[playerFetchAOB+17]</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4379</ID>
                      <Description>"max health base"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+4</Address>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>4380</ID>
                          <Description>"multi 1 (armor)"</Description>
                          <Color>0000FF</Color>
                          <VariableType>Float</VariableType>
                          <Address>+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4381</ID>
                          <Description>"multi 2 (curse penalty)"</Description>
                          <Color>0000FF</Color>
                          <VariableType>Float</VariableType>
                          <Address>+c</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>4382</ID>
                          <Description>"multi 3 (?)"</Description>
                          <Color>0000FF</Color>
                          <VariableType>Float</VariableType>
                          <Address>+10</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24038</ID>
                  <Description>"adrenaline"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pPlayer+8</Address>
                  <Offsets>
                    <Offset>2a8</Offset>
                    <Offset>3b8</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24039</ID>
                      <Description>"max adrenaline"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24051</ID>
                  <Description>"exp"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pPlayerEXP</Address>
                  <Offsets>
                    <Offset>664</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24052</ID>
                      <Description>"activate "exp multiplier" first"</Description>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4384</ID>
              <Description>"[ship]"</Description>
              <Options moHideChildren="1"/>
              <Color>000080</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>4587</ID>
                  <Description>"player ship health"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pPlayerShipHealthBase</Address>
                  <Offsets>
                    <Offset>1b8</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>4588</ID>
                      <Description>"player ship max health"</Description>
                      <Color>0000FF</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>4685</ID>
                  <Description>"poseidon flag"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pPlayerShipHealthBase</Address>
                  <Offsets>
                    <Offset>1c0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>4515</ID>
                  <Description>"player ship stamina"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>pPlayerShipBase1</Address>
                  <Offsets>
                    <Offset>[shipStaminaOffsetSetAOB+3]+50</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>4487</ID>
                  <Description>""</Description>
                  <Options moHideChildren="1"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>FFFFFF</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pPlayer+18</Address>
                  <Offsets>
                    <Offset>a6</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4388</ID>
      <Description>""</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"aobt1"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//aobscanmodule(aobt1,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
//aobscanmodule(aobt1,ACOdyssey.exe,C6 ** ** ** 00 C7 ** ** ** ** ** 00 00 E8 ** ** ** ** 84 C0 74)
aobscanmodule(aobt1,ACOdyssey.exe,8B ** 2B ** 41 ** ** 85 C0 7F ** 48 ** ** ** ** 44)
registersymbol(aobt1)

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(aobt1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4395</ID>
          <Description>"aobt2"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
luaCall(lua_aobscan("aobt21","ACOdyssey.exe","** ** ** ** ** ** 20 ** ** ** ** ** 7F",13))
//luaCall(lua_aobscan("aobt21","ACOdyssey.exe","** ** ** 2B 44 24 20",4))
//luaCall(lua_aobscan("aobt21","ACOdyssey.exe","41 8B C7 2B ** ** ** 41 89 06 85 C0",1))
//luaCall(lua_aobscan("aobt22","ACOdyssey.exe","41 8B C7 2B ** ** ** 41 89 06 85 C0",2))
//luaCall(lua_aobscan("aobt23","ACOdyssey.exe","41 8B C7 2B ** ** ** 41 89 06 85 C0",3))
//luaCall(lua_aobscan("aobt24","ACOdyssey.exe","41 8B C7 2B ** ** ** 41 89 06 85 C0",4))

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(aobt21)
//unregistersymbol(aobt22)
//unregistersymbol(aobt23)
//unregistersymbol(aobt24)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4393</ID>
          <Description>"undead .1"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(minhealthpercent,(float)1)

aobscanmodule(healthWritesAOB,ACOdyssey.exe,0F 4E F9 ** ** 0F 4E F8 89 BB ** ** ** ** 48)
registersymbol(healthWritesAOB)

label(dMinHealthPercentage)
registersymbol(dMinHealthPercentage)

alloc(newmem,2048,healthWritesAOB) //"ACOdyssey.exe"+2189669)
label(originalcode_undead)
registersymbol(originalcode_undead)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(healthWritesAOB,8)

push rax
mov rax,pPlayer
cmp [rax],rbx
pop rax
jne end

@@:
//
sub rsp,10
movdqu dqword [rsp],xmm0
//sub rsp,10
//movdqu dqword [rsp],xmm1
push rax
//

movd xmm0,eax
cvtdq2ps xmm0,xmm0
mov rax,dMinHealthPercentage
mulss xmm0,[rax]
cvttss2si eax,xmm0

cmp edi,eax
jge @f
mov edi,eax

@@:
//
pop rax
//movdqu xmm1,dqword [rsp]
//add rsp,10
movdqu xmm0,dqword [rsp]
add rsp,10
//

end:
readmem(healthWritesAOB+8,6)
jmp exit

originalcode_undead:
readmem(healthWritesAOB,14)
//cmovle edi,ecx
//cmp eax,edi
//cmovle edi,eax
//mov [rbx+00000130],edi

exit:
jmp healthWritesAOB+e

///
dMinHealthPercentage:
dd minhealthpercent
///

healthWritesAOB: //"ACOdyssey.exe"+2189669:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthWritesAOB: //"ACOdyssey.exe"+2189669:
readmem(originalcode_undead,14)
//db 0F 4E F9 3B C7 0F 4E F8 89 BB 30 01 00 00
//Alt: cmovle edi,ecx
//Alt: cmp eax,edi
//Alt: cmovle edi,eax
//Alt: mov [rbx+00000130],edi

unregistersymbol(originalcode_undead)

unregistersymbol(dMinHealthPercentage)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4394</ID>
              <Description>"min health % (1 == 100%)"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>dMinHealthPercentage</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4389</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+221E200)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayer
cmp [rax],rcx
jne @f
mov [rsp+10],rbx

originalcode:
mov [rsp+10],rbx
push rsi
sub rsp,20
mov rax,[rcx]
xor r8d,r8d

exit:
jmp "ACOdyssey.exe"+221E210

///

"ACOdyssey.exe"+221E200:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+221E200:
db 48 89 5C 24 10 56 48 83 EC 20 48 8B 01 45 33 C0
//Alt: mov [rsp+10],rbx
//Alt: push rsi
//Alt: sub rsp,20
//Alt: mov rax,[rcx]
//Alt: xor r8d,r8d
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4390</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+212D5AC:
db 90 E9


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+212D5AC:
db 0F 8F
//Alt: jg ACOdyssey.exe+212D63D
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4392</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
registersymbol(healthCalOnHitAOB)

alloc(newmem,2048,healthCalOnHitAOB+5) //"ACOdyssey.exe"+212D598)
label(originalcode_undead)
registersymbol(originalcode_undead)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//mov rdi,[rsp+28]//
//mov rdi,[rdi]
//test rdi,rdi
//jz @f
//mov rdi,[rdi+10]
//mov rdi,[rdi+10]
//mov rdi,[rdi+108]
//test rdi,rdi
//jz @f
mov rdi,[rsp+28]
mov rdi,[rdi]
mov rcx,pPlayer
cmp [rcx+8],rdi
jne @f

mov eax,r13d
sub eax,[rsp+20]
//cmp eax,#1
//jge @f
//mov r13d,#1
//add r13d,[rsp+20]
test eax,eax
jg @f
mov r13d,[rsp+20]
inc r13d

@@:

originalcode_undead:
readmem(healthCalOnHitAOB+5,15)
//mov rdi,[rsp+00000098]
//mov eax,r13d
//sub eax,[rsp+20]

exit:
jmp healthCalOnHitAOB+14 //"ACOdyssey.exe"+212D5A7

///

healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
readmem(originalcode_undead,15)
//db 48 8B BC 24 98 00 00 00 41 8B C5 2B 44 24 20
//Alt: mov rdi,[rsp+00000098]
//Alt: mov eax,r13d
//Alt: sub eax,[rsp+20]
unregistersymbol(originalcode_undead)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4396</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(walkspeedmultiplier,(float)0.525)

alloc(newmem,2048,"ACOdyssey.exe"+3389857)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax

sub rsp,10
movdqu dqword [rsp],xmm1

//mov eax,(float)0.6
//movd xmm1,eax

//mov rax,dWalkSpeedMultiplier
//movss xmm1,[rax]
//mulss xmm0,xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov rax,dWalkSpeedMultiplier
movss xmm0,[rax]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end:
pop rax

originalcode:
mov r8d,000000E0
movss [rbx+000002E0],xmm0

exit:
jmp "ACOdyssey.exe"+3389865

///
dWalkSpeedMultiplier:
dd walkspeedmultiplier
///

"ACOdyssey.exe"+3389857:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+3389857:
db 41 B8 E0 00 00 00 F3 0F 11 83 E0 02 00 00
//Alt: mov r8d,000000E0
//Alt: movss [rbx+000002E0],xmm0

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4397</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>90530CB00</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4398</ID>
          <Description>"No description"</Description>
          <VariableType>Float</VariableType>
          <Address>90530CAD0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4399</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(walkspeedmultiplier,(float)0.35)

aobscanmodule(movementSpeedWritesAOB,ACOdyssey.exe,41 ** ** ** ** ** f3 0f 11 ** ** ** ** ** e8)
registersymbol(movementSpeedWritesAOB)

label(bWalkKeyPressed)
registersymbol(bWalkKeyPressed)
label(dWalkSpeedMultiplier)
registersymbol(dWalkSpeedMultiplier)

alloc(newmem,2048,movementSpeedWritesAOB) //"ACOdyssey.exe"+338979D)
label(originalcode_walkkey)
registersymbol(originalcode_walkkey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
mov rax,bWalkKeyPressed
cmp byte ptr [rax],1
jne end

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov rax,dWalkSpeedMultiplier
movss xmm0,[rax]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end:
pop rax

originalcode_walkkey:
readmem(movementSpeedWritesAOB,14)
//mov r8d,0000002B
//movss [rbx+000002B0],xmm0

exit:
jmp movementSpeedWritesAOB+e //"ACOdyssey.exe"+33897AB

///
bWalkKeyPressed:
dd 0
dWalkSpeedMultiplier:
dd walkspeedmultiplier
///

movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
jmp newmem

///********************************************************///
label(bEndThread_walkKey_keylistener_mem)
registersymbol(bEndThread_walkKey_keylistener_mem)

alloc(walkKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(walkKey_keylistener_mem)
createthread(walkKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

walkKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,14 //CAPS LOCK key
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax

keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_walkKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_walkKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_walkKey_keylistener_mem:
dd 0
///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_walkKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_walkKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_walkKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_walkKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
readmem(originalcode_walkkey,14)
//db 41 B8 2B 00 00 00 F3 0F 11 83 B0 02 00 00
//Alt: mov r8d,0000002B
//Alt: movss [rbx+000002B0],xmm0
unregistersymbol(originalcode_walkkey)

unregistersymbol(bWalkKeyPressed)
unregistersymbol(dWalkSpeedMultiplier)

///********************************************************///
unregistersymbol(bEndThread_walkKey_keylistener_mem)

dealloc(walkKey_keylistener_mem)
unregistersymbol(walkKey_keylistener_mem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4400</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>12C529990</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4401</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>99421C200</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4402</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9E9BFE6E4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4406</ID>
          <Description>"No description"</Description>
          <VariableType>2 Bytes</VariableType>
          <Address>9591B1D78</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4407</ID>
          <Description>"No description"</Description>
          <VariableType>2 Bytes</VariableType>
          <Address>968EC1020</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4408</ID>
          <Description>"No description"</Description>
          <VariableType>2 Bytes</VariableType>
          <Address>999B1B770</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4409</ID>
          <Description>"-1a"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(resourcesReadAOB,ACOdyssey.exe,74 04 8B ** EB 02 33 ** 40 ** ** 48 ** ** 48)
registersymbol(resourcesReadAOB)

alloc(newmem,2048,"ACOdyssey.exe"+2403306)
label(aha_resourcesread)
registersymbol(aha_resourcesread)
label(originalcode_resourcesread)
registersymbol(originalcode_resourcesread)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je ha1

mov rdi,10496FCCA0
cmp rax,rdi
jne aha_resourcesread

mov rdi,"ACOdyssey.exe"+2FDE7AC //general 1
cmp [rsp+d8],rdi
je @f
mov rdi,"ACOdyssey.exe"+2E163E3 //general 2
cmp [rsp+d8],rdi
je @f
mov rdi,"ACOdyssey.exe"+2FE54D8 //?
cmp [rsp+d8],rdi
je @f
mov rdi,"ACOdyssey.exe"+3006242 //currencyResourcesChkForEngraveOnMerchantAccessAOB
cmp [rsp+98],rdi
je @f
mov rdi,"ACOdyssey.exe"+300DFE5 //currencyResourcesChkForUpgradeOnMerchantAccessAOB
cmp [rsp+98],rdi
je @f
mov rdi,"ACOdyssey.exe"+300A934 //many check
cmp [rsp+98],rdi
je @f
mov rdi,"ACOdyssey.exe"+2E1613D //? cmp r14d
cmp [rsp+98],rdi
je @f

{mov rdi,"ACOdyssey.exe"+2CCC113 //general 1
cmp [rsp+d8],rdi
je @f
mov rdi,"ACOdyssey.exe"+2EB3C8F //req visual chk
cmp [rsp+98],rdi
je @f
mov rdi,"ACOdyssey.exe"+2CD26A0 //???
cmp [rsp+98],rdi
je @f}





readmem(resourcesReadAOB+2,2)
//mov edi,[rax]
//jmp ha2

aha_resourcesread:
readmem(resourcesReadAOB+2,2)
//mov edi,[rax]
jmp ha2

ha1:
readmem(resourcesReadAOB+6,2)
//xor edi,edi
ha2:
readmem(resourcesReadAOB+8,6)
//test sil,sil
//mov rcx,rbx
jmp exit

originalcode_resourcesread:
readmem(resourcesReadAOB,14)
//je ACOdyssey.exe+240330C
//mov edi,[rax]
//jmp ACOdyssey.exe+240330E
//xor edi,edi
//test sil,sil
//mov rcx,rbx

exit:
jmp resourcesReadAOB+e

///

resourcesReadAOB: //"ACOdyssey.exe"+2403306:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
resourcesReadAOB: //"ACOdyssey.exe"+2403306:
readmem(originalcode_resourcesread,14)
//db 74 04 8B 38 EB 02 33 FF 40 84 F6 48 8B CB
//Alt: je ACOdyssey.exe+240330C
//Alt: mov edi,[rax]
//Alt: jmp ACOdyssey.exe+240330E
//Alt: xor edi,edi
//Alt: test sil,sil
//Alt: mov rcx,rbx
unregistersymbol(originalcode_resourcesread)
unregistersymbol(aha_resourcesread)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4598</ID>
              <Description>"pPTT"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>pPTT</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4932</ID>
          <Description>"-1b"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(resourcesReadAOB,ACOdyssey.exe,74 04 8B ** EB 02 33 ** 40 ** ** 48 ** ** 48)
registersymbol(resourcesReadAOB)

alloc(newmem,2048,"ACOdyssey.exe"+2403306)
label(aha_resourcesread)
registersymbol(aha_resourcesread)
label(originalcode_resourcesread)
registersymbol(originalcode_resourcesread)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je ha1

mov rdi,10496FCCA0
cmp rax,rdi
jne aha_resourcesread


mov rdi,"ACOdyssey.exe"+2FE54D8 //?
cmp [rsp+d8],rdi
jne @f

readmem(resourcesReadAOB+2,2)
//mov edi,[rax]
//jmp ha2

aha_resourcesread:
readmem(resourcesReadAOB+2,2)
//mov edi,[rax]
jmp ha2

ha1:
readmem(resourcesReadAOB+6,2)
//xor edi,edi
ha2:
readmem(resourcesReadAOB+8,6)
//test sil,sil
//mov rcx,rbx
jmp exit

originalcode_resourcesread:
readmem(resourcesReadAOB,14)
//je ACOdyssey.exe+240330C
//mov edi,[rax]
//jmp ACOdyssey.exe+240330E
//xor edi,edi
//test sil,sil
//mov rcx,rbx

exit:
jmp resourcesReadAOB+e

///

resourcesReadAOB: //"ACOdyssey.exe"+2403306:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
resourcesReadAOB: //"ACOdyssey.exe"+2403306:
readmem(originalcode_resourcesread,14)
//db 74 04 8B 38 EB 02 33 FF 40 84 F6 48 8B CB
//Alt: je ACOdyssey.exe+240330C
//Alt: mov edi,[rax]
//Alt: jmp ACOdyssey.exe+240330E
//Alt: xor edi,edi
//Alt: test sil,sil
//Alt: mov rcx,rbx
unregistersymbol(originalcode_resourcesread)
unregistersymbol(aha_resourcesread)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4933</ID>
              <Description>"pPTT"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>pPTT</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4622</ID>
          <Description>"-2"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(pointertotrace,0)

aobscanmodule(resourcesReadAOB,ACOdyssey.exe,74 04 8B ** EB 02 33 ** 40 ** ** 48 ** ** 48)
registersymbol(resourcesReadAOB)

label(pPTT)
registersymbol(pPTT)

alloc(newmem,2048,resourcesReadAOB) //"ACOdyssey.exe"+2403306)
label(aha_resourcesread)
registersymbol(aha_resourcesread)
label(originalcode_resourcesread)
registersymbol(originalcode_resourcesread)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je ha1

mov rdi,pPTT
mov rdi,[rdi]
test rdi,rdi
jz @f
cmp rax,rdi
jne aha_resourcesread

@@:
mov rdi,"ACOdyssey.exe"+2CCC113 //$ general
cmp [rsp+d8],rdi
je @f
readmem(resourcesReadAOB+2,2)
mov rdi,"ACOdyssey.exe"+2CD26A0 //resources general
cmp [rsp+98],rdi
je @f
readmem(resourcesReadAOB+2,2)
mov rdi,"ACOdyssey.exe"+2EAEAE2 //req chk 1
cmp [rsp+98],rdi
je @f
readmem(resourcesReadAOB+2,2)
mov rdi,"ACOdyssey.exe"+2EB25A4 //req chk 2 (visual)
cmp [rsp+98],rdi
je @f
readmem(resourcesReadAOB+2,2)
//mov edi,[rax]
//jmp ha2

aha_resourcesread:
readmem(resourcesReadAOB+2,2)
//mov edi,[rax]
jmp ha2

ha1:
readmem(resourcesReadAOB+6,2)
//xor edi,edi
ha2:
readmem(resourcesReadAOB+8,6)
//test sil,sil
//mov rcx,rbx
jmp exit

originalcode_resourcesread:
readmem(resourcesReadAOB,14)
//je ACOdyssey.exe+240330C
//mov edi,[rax]
//jmp ACOdyssey.exe+240330E
//xor edi,edi
//test sil,sil
//mov rcx,rbx

exit:
jmp resourcesReadAOB+e

///
pPTT:
dq pointertotrace
///

resourcesReadAOB: //"ACOdyssey.exe"+2403306:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
resourcesReadAOB: //"ACOdyssey.exe"+2403306:
readmem(originalcode_resourcesread,14)
//db 74 04 8B 38 EB 02 33 FF 40 84 F6 48 8B CB
//Alt: je ACOdyssey.exe+240330C
//Alt: mov edi,[rax]
//Alt: jmp ACOdyssey.exe+240330E
//Alt: xor edi,edi
//Alt: test sil,sil
//Alt: mov rcx,rbx
unregistersymbol(originalcode_resourcesread)
unregistersymbol(aha_resourcesread)

unregistersymbol(pPTT)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4623</ID>
              <Description>"pPTT"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>pPTT</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4410</ID>
          <Description>"for englave"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(currencyResourcesChkForEnglaveOnMerchantAccessAOB,ACOdyssey.exe,E8 ** ** ** ** 3B ** 0F 82 ** ** ** ** 48 ** ** ** 48 ** ** 75 ** B1)
registersymbol(currencyResourcesChkForEnglaveOnMerchantAccessAOB)

currencyResourcesChkForEnglaveOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EAEAE2:
db 39 C0



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
currencyResourcesChkForEnglaveOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EAEAE2:
db 3B C7
//Alt: cmp eax,edi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4411</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>999B1B7D0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4412</ID>
          <Description>"?"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EB25A4:
db 90 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EB25A4:
db 41 3B 06
//Alt: cmp eax,[r14]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4413</ID>
          <Description>"?"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2CE4CD8:
db 90 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2CE4CD8:
db 44 3B 37
//Alt: cmp r14d,[rdi]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4414</ID>
          <Description>"for upgrade"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(currencyResourcesChkForUpgradeOnMerchantAccessAOB,ACOdyssey.exe,E8 ** ** ** ** 3B C3 0F 82 ** ** ** ** 48 ** ** ** 48 ** ** 75 ** B1)
registersymbol(currencyResourcesChkForUpgradeOnMerchantAccessAOB)

currencyResourcesChkForUpgradeOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EB50C5:
db 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
currencyResourcesChkForUpgradeOnMerchantAccessAOB+5: //"ACOdyssey.exe"+2EB50C5:
db 3B C3
//Alt: cmp eax,ebx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4423</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>956E5EF52</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4425</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>11DF02980+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4426</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>11DF02980+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4427</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(abilityPointsReadOnAbilitiesMenuAccessAOB,ACOdyssey.exe,8B 41 ** 8B 51 ** 3B C2 73 03 33 C0 C3 2B C2 C3)
registersymbol(abilityPointsReadOnAbilitiesMenuAccessAOB)

label(pAbilityPoints)
registersymbol(pAbilityPoints)

alloc(newmem,2048,abilityPointsReadOnAbilitiesMenuAccessAOB) //"ACOdyssey.exe"+22FB560)
label(originalcode_ignoreap)
registersymbol(originalcode_ignoreap)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB+1,2)
//lea rax,[rcx+10]
push rax
mov rax,pAbilityPoints
pop [rax]

mov rax,"ACOdyssey.exe"+2EAC19F
cmp [rsp],rax
je @f
mov rax,"ACOdyssey.exe"+2CE272C
cmp [rsp],rax
je @f
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB,3)
@@:

readmem(abilityPointsReadOnAbilitiesMenuAccessAOB,8)
jae @f
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB+a,3)
@@:
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB+d,2)
jmp exit

originalcode_ignoreap:
readmem(abilityPointsReadOnAbilitiesMenuAccessAOB,15)
//mov eax,[rcx+10]
//mov edx,[rcx+14]
//cmp eax,edx
//jae ACOdyssey.exe+22FB56D
//xor eax,eax
//ret
//sub eax,edx

exit:
jmp abilityPointsReadOnAbilitiesMenuAccessAOB+f

///
pAbilityPoints:
///

abilityPointsReadOnAbilitiesMenuAccessAOB: //"ACOdyssey.exe"+22FB560:
jmp newmem

///*****************************************///
aobscanmodule(setFlagIfEnoughAPToLearnOnAMAccessAOB,ACOdyssey.exe,45 ** ** 72 06 41 ** ** 41 ** ** 3B ** 0F 96 C0 48)
registersymbol(setFlagIfEnoughAPToLearnOnAMAccessAOB)

setFlagIfEnoughAPToLearnOnAMAccessAOB+d: //"ACOdyssey.exe"+2312EEE:
db 90 B0 01

///*****************************************///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
abilityPointsReadOnAbilitiesMenuAccessAOB: //"ACOdyssey.exe"+22FB560:
readmem(originalcode_ignoreap,15)
//db 8B 41 10 8B 51 14 3B C2 73 03 33 C0 C3 2B C2
//Alt: mov eax,[rcx+10]
//Alt: mov edx,[rcx+14]
//Alt: cmp eax,edx
//Alt: jae ACOdyssey.exe+22FB56D
//Alt: xor eax,eax
//Alt: ret
//Alt: sub eax,edx
unregistersymbol(originalcode_ignoreap)

unregistersymbol(pAbilityPoints)

///*****************************************///
setFlagIfEnoughAPToLearnOnAMAccessAOB+d: //"ACOdyssey.exe"+2312EEE:
db 0F 96 C0
//Alt: setbe al

///*****************************************///
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4428</ID>
              <Description>"obtained"</Description>
              <VariableType>Byte</VariableType>
              <Address>pAbilityPoints</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>4429</ID>
                  <Description>"spent"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4430</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2CE272C:
db 90 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2CE272C:
db 3B 43 30
//Alt: cmp eax,[rbx+30]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4431</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EAC1A5:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EAC1A5:
db 74 14
//Alt: je ACOdyssey.exe+2EAC1BB
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4435</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9E88FB4C0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4436</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>13ADA812C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4437</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9E88FB4B8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4442</ID>
          <Description>"`"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
luaCall(lua_aobscan("adrenalineWriteOnChangeAOB","ACOdyssey.exe","E8 ** ** ** ** 33 ** 89 BB ** ** ** ** 8B ** F7 ** ** ** ** ** 3B ** ** ** ** ** 75",1))

alloc(newmem,2048,adrenalineWriteOnChangeAOB+7) //"ACOdyssey.exe"+20FF065)
label(originalcode_infadrenaline)
registersymbol(originalcode_infadrenaline)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(adrenalineWriteOnChangeAOB+8,5)
//lea rdi,[rbx+278]
mov edi,[rdi+4]

originalcode_infadrenaline:
readmem(adrenalineWriteOnChangeAOB+7,14)
//mov [rbx+00000278],edi
//mov eax,edi
//div [rbx+000001AC]

exit:
jmp adrenalineWriteOnChangeAOB+15 //"ACOdyssey.exe"+20FF073

///

adrenalineWriteOnChangeAOB+7: //"ACOdyssey.exe"+20FF065:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
adrenalineWriteOnChangeAOB+7: //"ACOdyssey.exe"+20FF065:
readmem(originalcode_infadrenaline,14)
//db 89 BB 78 02 00 00 8B C7 F7 B3 AC 01 00 00
//Alt: mov [rbx+00000278],edi
//Alt: mov eax,edi
//Alt: div [rbx+000001AC]
unregistersymbol(originalcode_infadrenaline)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4438</ID>
          <Description>"`"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
luaCall(lua_aobscan("adrenalineWriteOnChangeAOB","ACOdyssey.exe","E8 ** ** ** ** 33 ** 89 BB ** ** ** ** 8B ** F7 ** ** ** ** ** 3B ** ** ** ** ** 75",2))

alloc(newmem,2048,adrenalineWriteOnChangeAOB+7) //"ACOdyssey.exe"+211B2B9)
label(originalcode_infadrenaline)
registersymbol(originalcode_infadrenaline)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
db 48 8D
readmem(adrenalineWriteOnChangeAOB+8,5)
//lea rdi,[rbx+278]
mov edi,[rdi+4]

originalcode_infadrenaline:
readmem(adrenalineWriteOnChangeAOB+7,14)
//mov [rbx+00000278],edi
//mov eax,edi
//div [rbx+000001AC]

exit:
jmp adrenalineWriteOnChangeAOB+15 //"ACOdyssey.exe"+211B2C7

///

adrenalineWriteOnChangeAOB+7: //"ACOdyssey.exe"+211B2B9:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
adrenalineWriteOnChangeAOB+7: //"ACOdyssey.exe"+211B2B9:
readmem(originalcode_infadrenaline,14)
//db 89 BB 78 02 00 00 8B C7 F7 B3 AC 01 00 00
//Alt: mov [rbx+00000278],edi
//Alt: mov eax,edi
//Alt: div [rbx+000001AC]
unregistersymbol(originalcode_infadrenaline)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4439</ID>
          <Description>"`"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
luaCall(lua_aobscan("adrenalineWriteOnUseAOB","ACOdyssey.exe","E8 ** ** ** ** 33 ** 89 BB ** ** ** ** 8B ** F7 ** ** ** ** ** 3B ** ** ** ** ** 75",3))

alloc(newmem2,2048,adrenalineWriteOnUseAOB+7) //"ACOdyssey.exe"+2189B65)
label(originalcode2_infadrenaline)
registersymbol(originalcode2_infadrenaline)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
lea rdi,[rbx+278]
mov edi,[rdi+4]

originalcode2_infadrenaline:
readmem(adrenalineWriteOnUseAOB+7,14)
//mov [rbx+00000278],edi
//mov eax,edi
//div [rbx+000001AC]

exit2:
jmp adrenalineWriteOnUseAOB+15 //"ACOdyssey.exe"+2189B73

///

adrenalineWriteOnUseAOB+7: //"ACOdyssey.exe"+2189B65:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
adrenalineWriteOnUseAOB+7: //"ACOdyssey.exe"+2189B65:
readmem(originalcode2_infadrenaline,14)
//db 89 BB 78 02 00 00 8B C7 F7 B3 AC 01 00 00
//Alt: mov [rbx+00000278],edi
//Alt: mov eax,edi
//Alt: div [rbx+000001AC]
unregistersymbol(originalcode2_infadrenaline)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4440</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048,"ACOdyssey.exe"+2189B30)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
lea rdx,[rcx+278]
mov edx,[rdx+4]

originalcode2:
push rbx
sub rsp,20
mov rbx,rcx
cmp [rcx+00000278],edx

exit2:
jmp "ACOdyssey.exe"+2189B3F

///

"ACOdyssey.exe"+2189B30:
jmp newmem2
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
"ACOdyssey.exe"+2189B30:
db 40 53 48 83 EC 20 48 8B D9 39 91 78 02 00 00
//Alt: push rbx
//Alt: sub rsp,20
//Alt: mov rbx,rcx
//Alt: cmp [rcx+00000278],edx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4443</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>902FB2F74</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4444</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>96859980C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4445</ID>
          <Description>"-"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9864C3184</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4446</ID>
          <Description>"-"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9864C3204</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4447</ID>
          <Description>"-"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>989E593EC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4448</ID>
          <Description>"-"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98E31ECCC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4449</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>991B7558C</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>4452</ID>
              <Description>"No description"</Description>
              <VariableType>Float</VariableType>
              <Address>991B75588</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4450</ID>
          <Description>"-"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9972C666C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4451</ID>
          <Description>"-"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>99BB6B56C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4453</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2B5BB26:
db 90 90 90 90 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2B5BB26:
db 0F 84 5F 01 00 00
//Alt: je ACOdyssey.exe+2B5BC8B
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4454</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2B5BB58:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2B5BB58:
db 74 11
//Alt: je ACOdyssey.exe+2B5BB6B
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4455</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2B5BC71:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2B5BC71:
db 76
//Alt: jna
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4456</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>09FA8084</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4457</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>09FA0074</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4458</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+1C17326)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
lea rdx,[rdi+34]
maxss xmm0,[rdx-4]

originalcode:
reassemble("ACOdyssey.exe"+1C17326)
//lea rdx,[ACOdyssey.exe+55CC2D8]
movss [rdi+34],xmm0
mov rcx,rdi

exit:
jmp "ACOdyssey.exe"+1C17335

///

"ACOdyssey.exe"+1C17326:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+1C17326:
db 48 8D 15 AB 4F 9B 03 F3 0F 11 47 34 48 8B CF
//Alt: lea rdx,[ACOdyssey.exe+55CC2D8]
//Alt: movss [rdi+34],xmm0
//Alt: mov rcx,rdi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4459</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(abilitiesCooldownCalAOB,ACOdyssey.exe,48 ** ** ** ** ** ** F3 ** ** ** ** 48 ** ** E8 ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5B C3)
registersymbol(abilitiesCooldownCalAOB)

alloc(newmem,2048,abilitiesCooldownCalAOB) //"ACOdyssey.exe"+1C17326)
label(originalcode_instantcooldown)
registersymbol(originalcode_instantcooldown)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
lea rdx,[rdi+34]
maxss xmm0,[rdx-4]

reassemble(abilitiesCooldownCalAOB)
readmem(abilitiesCooldownCalAOB+7,8)
jmp exit

originalcode_instantcooldown:
readmem(abilitiesCooldownCalAOB,15)
//lea rdx,[ACOdyssey.exe+55CC2D8]
//movss [rdi+34],xmm0
//mov rcx,rdi

exit:
jmp abilitiesCooldownCalAOB+f //"ACOdyssey.exe"+1C17335

///

abilitiesCooldownCalAOB: //"ACOdyssey.exe"+1C17326:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
abilitiesCooldownCalAOB: //"ACOdyssey.exe"+1C17326:
readmem(originalcode_instantcooldown,15)
//db 48 8D 15 AB 4F 9B 03 F3 0F 11 47 34 48 8B CF
//Alt: lea rdx,[ACOdyssey.exe+55CC2D8]
//Alt: movss [rdi+34],xmm0
//Alt: mov rcx,rdi
unregistersymbol(originalcode_instantcooldown)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4460</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(abilitiesCooldownCalAOB,ACOdyssey.exe,48 ** ** ** ** ** ** F3 ** ** ** ** 48 ** ** E8 ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5B C3)
registersymbol(abilitiesCooldownCalAOB)

alloc(newmem,2048,abilitiesCooldownCalAOB+7) //"ACOdyssey.exe"+1C1732D)
label(originalcode_instantcooldown)
registersymbol(originalcode_instantcooldown)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
lea rcx,[rdi+34]
maxss xmm0,[rcx-4]

readmem(abilitiesCooldownCalAOB+7,8)
reassemble(abilitiesCooldownCalAOB+f)
readmem(abilitiesCooldownCalAOB+14,5)
jmp exit

originalcode_instantcooldown:
readmem(abilitiesCooldownCalAOB+7,18)
//movss [rdi+34],xmm0
//mov rcx,rdi
//call ACOdyssey.exe+A013A0
//mov rdi,[rsp+30]

exit:
jmp abilitiesCooldownCalAOB+19

///

abilitiesCooldownCalAOB+7: //"ACOdyssey.exe"+1C1732D:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
abilitiesCooldownCalAOB+7: //"ACOdyssey.exe"+1C1732D:
readmem(originalcode_instantcooldown,18)
//db F3 0F 11 47 34 48 8B CF E8 66 A0 DE FE 48 8B 7C 24 30
//Alt: movss [rdi+34],xmm0
//Alt: mov rcx,rdi
//Alt: call ACOdyssey.exe+A013A0
//Alt: mov rdi,[rsp+30]
unregistersymbol(originalcode_instantcooldown)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4462</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9615648C0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4463</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+24033E8)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je haa
add rdx,28
mov rcx,r12
call ACOdyssey.exe+23B4A00
test al,al
je haa

mov rbx,"ACOdyssey.exe"+31548DC //on draw 1 &lt;&lt;
cmp [rsp+c8],rbx
je @f
mov rbx,"ACOdyssey.exe"+2C7763E //on draw 2
cmp [rsp+d8],rbx
je @f
mov rbx,"ACOdyssey.exe"+314E05A //on draw 3
cmp [rsp+c8],rbx
je @f
mov rbx,"ACOdyssey.exe"+3153FDB //on draw 4 &lt;&lt;
cmp [rsp+c8],rbx
je @f
mov rbx,"ACOdyssey.exe"+31623E3 //multi arrows drawn 1 &lt;&lt;
cmp [rsp+c8],rbx
je @f
mov rbx,"ACOdyssey.exe"+314A2D3 //multi arrows drawn 2 &lt;&lt;
cmp [rsp+c8],rbx
je @f
mov rbx,"ACOdyssey.exe"+31546AB //multi arrows aim 1 &lt;&lt;
cmp [rsp+c8],rbx
je @f
lea rdi,[rdi]
@@:

add ebp,[rdi]

haa:
add rdi,20
jmp exit

originalcode:
je ACOdyssey.exe+24033FC
add rdx,28
mov rcx,r12
call ACOdyssey.exe+23B4A00
test al,al
je ACOdyssey.exe+24033FC
add ebp,[rdi]
add rdi,20

exit:
jmp "ACOdyssey.exe"+2403400

///

"ACOdyssey.exe"+24033E8:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+24033E8:
db 74 12 48 83 C2 28 49 8B CC E8 0A 16 FB FF 84 C0 74 02 03 2F 48 83 C7 20
//Alt: je ACOdyssey.exe+24033FC
//Alt: add rdx,28
//Alt: mov rcx,r12
//Alt: call ACOdyssey.exe+23B4A00
//Alt: test al,al
//Alt: je ACOdyssey.exe+24033FC
//Alt: add ebp,[rdi]
//Alt: add rdi,20
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4464</ID>
          <Description>"a on draw 5 for m-a 1"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+31623E5:
db 90 B0 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+31623E5:
db 0F 93 C0
//Alt: setae al
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4465</ID>
          <Description>"a on draw 6 for m-a 2"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+314A2D3:
db 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+314A2D3:
db 3B C3
//Alt: cmp eax,ebx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4466</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9893CBAC0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4467</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+2403306)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je haa

mov rcx,"ACOdyssey.exe"+2CDFFA4
cmp [rsp+98],rcx
je @f
mov edi,[rax]
@@:

mov edi,[rax]


jmp hab
haa:
xor edi,edi
hab:
test sil,sil
mov rcx,rbx
jmp exit

originalcode:
je ACOdyssey.exe+240330C
mov edi,[rax]
jmp ACOdyssey.exe+240330E
xor edi,edi
test sil,sil
mov rcx,rbx

exit:
jmp "ACOdyssey.exe"+2403314

///

"ACOdyssey.exe"+2403306:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2403306:
db 74 04 8B 38 EB 02 33 FF 40 84 F6 48 8B CB
//Alt: je ACOdyssey.exe+240330C
//Alt: mov edi,[rax]
//Alt: jmp ACOdyssey.exe+240330E
//Alt: xor edi,edi
//Alt: test sil,sil
//Alt: mov rcx,rbx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4468</ID>
          <Description>"a on draw 1"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+31548F1:
db 90 8B C2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+31548F1:
db 0F 46 C2
//Alt: cmovbe eax,edx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4469</ID>
          <Description>"a on draw 4"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+3153FDB:
db 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+3153FDB:
db 3B C3
//Alt: cmp eax,ebx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4470</ID>
          <Description>"b on draw 1"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+1ED9CFC:
db 90 B0 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+1ED9CFC:
db 0F 93 C0
//Alt: setae al
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4471</ID>
          <Description>"No description"</Description>
          <VariableType>Byte</VariableType>
          <Address>980CAFA30</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4472</ID>
          <Description>"a on aim 1"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+31546AB:
db 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+31546AB:
db 3B C3
//Alt: cmp eax,ebx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4473</ID>
          <Description>"a on shoot 2a"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+314C61C:
db 8B C3


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+314C61C:
db 3B C3
//Alt: cmp eax,ebx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4474</ID>
          <Description>"a on shoot 2b"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+314C623:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+314C623:
db 73
//Alt: jae
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4476</ID>
          <Description>"No description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>Array of byte</VariableType>
          <ByteLength>9</ByteLength>
          <Address>ACOdyssey.exe+1B3D9E8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4477</ID>
          <Description>"No Description"</Description>
          <VariableType>Byte</VariableType>
          <Address>9849050C6</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4478</ID>
          <Description>"No Description"</Description>
          <VariableType>Byte</VariableType>
          <Address>7D069546</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4479</ID>
          <Description>"No description"</Description>
          <VariableType>8 Bytes</VariableType>
          <Address>0984905020</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4480</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98498E630</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4481</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98499CB00</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4483</ID>
          <Description>"enable .1"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
pPlayer:
///

playerFetchAOB:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)

unregistersymbol(originalcode_enable)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4482</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someFlagsFlipAOB,ACOdyssey.exe,0F ** ** 0F ** ** 88 ** 38 ** 48 ** ** ** ** 0F 95 D0)
registersymbol(someFlagsFlipAOB)

alloc(newmem,2048,someFlagsFlipAOB) //"ACOdyssey.exe"+9149D63)
label(originalcode_stealthmod)
registersymbol(originalcode_stealthmod)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp r8,660 //crouch offset
jne @f
lea rbx,[rbx]

originalcode_stealthmod:
readmem(someFlagsFlipAOB,15)
//movzx ecx,byte ptr [rbx]
//movzx eax,byte ptr [rdi]
//mov [rbx],al
//cmp [rdi],cl
//mov rbx,[rsp+38]

exit:
jmp someFlagsFlipAOB+f //"ACOdyssey.exe"+9149D72

///

someFlagsFlipAOB: //"ACOdyssey.exe"+9149D63:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someFlagsFlipAOB: //"ACOdyssey.exe"+9149D63:
readmem(originalcode_stealthmod,15)
//db 0F B6 0B 0F B6 07 88 03 38 0F 48 8B 5C 24 38
//Alt: movzx ecx,byte ptr [rbx]
//Alt: movzx eax,byte ptr [rdi]
//Alt: mov [rbx],al
//Alt: cmp [rdi],cl
//Alt: mov rbx,[rsp+38]
unregistersymbol(originalcode_stealthmod)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4484</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98499C4A0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4485</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>983EA9FD0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4488</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>92098DEA0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4489</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>92098DB1E</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4490</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+3A7E385)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,92098d840
cmp r10,rax
jne @f
lea r10,[r10]

originalcode:
mov rax,r11
mov r11,rdi
mov rdi,rcx
mov rcx,r8
mov r8,rsi

exit:
jmp "ACOdyssey.exe"+3A7E394

///

"ACOdyssey.exe"+3A7E385:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+3A7E385:
db 49 8B C3 4C 8B DF 48 8B F9 49 8B C8 4C 8B C6
//Alt: mov rax,r11
//Alt: mov r11,rdi
//Alt: mov rdi,rcx
//Alt: mov rcx,r8
//Alt: mov r8,rsi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4491</ID>
          <Description>"No description"</Description>
          <VariableType>Byte</VariableType>
          <Address>92098D964</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4492</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>92098D934</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4493</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>96BB4D958</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4494</ID>
          <Description>"crouch"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>Byte</VariableType>
          <Address>96BB4D958</Address>
          <Offsets>
            <Offset>660</Offset>
            <Offset>0</Offset>
            <Offset>60</Offset>
            <Offset>8</Offset>
            <Offset>d8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>4495</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someBase1Trace1AOB,ACOdyssey.exe,48 ** ** 48 8B ** ** ** ** ** 48 81 ** ** ** ** ** E8 ** ** ** ** 48 ** ** ** 45 ** ** 41 ** ** ** 48 ** ** ** ** ** ** ** ** BA)
registersymbol(someBase1Trace1AOB)

label(pSomeBase1Trace)
registersymbol(pSomeBase1Trace)
label(pCrouch)
registersymbol(pCrouch)

alloc(newmem,2048,someBase1Trace1AOB+3) //"ACOdyssey.exe"+30E1304)
label(originalcode_stealthmod)
registersymbol(originalcode_stealthmod)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(someBase1Trace1AOB+3,7)

push rax
push rdx

mov rdx,pSomeBase1Trace
mov [rdx],rcx

readmem(someBase1Trace1AOB+a,7)

mov rax,[rcx]
test rax,rax
jz @f
mov rax,[rax+8]
test rax,rax
jz @f
mov rax,[rax+60]
test rax,rax
jz @f
mov rax,[rax]
test rax,rax
jz @f
lea rax,[rax+660]
mov [rdx+8],rax

@@:
pop rdx
pop rax
jmp exit

originalcode_stealthmod:
readmem(someBase1Trace1AOB+3,14)
//mov rcx,[rcx+00000878]
//add rcx,000000D8

exit:
jmp someBase1Trace1AOB+11

///
pSomeBase1Trace:
dq 0
pCrouch:
dq 0
///

someBase1Trace1AOB+3: //"ACOdyssey.exe"+30E1304:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someBase1Trace1AOB+3: //"ACOdyssey.exe"+30E1304:
readmem(originalcode_stealthmod,14)
//db 48 8B 89 78 08 00 00 48 81 C1 D8 00 00 00
//Alt: mov rcx,[rcx+00000878]
//Alt: add rcx,000000D8
unregistersymbol(originalcode_stealthmod)

unregistersymbol(pSomeBase1Trace)
unregistersymbol(pCrouch)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4496</ID>
              <Description>"crouch flag"</Description>
              <VariableType>Byte</VariableType>
              <Address>pCrouch</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4497</ID>
          <Description>"crouchFlagWriteOnCrouchEnterAOB"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(crouchFlagWriteOnCrouchEnterAOB,ACOdyssey.exe,40 53 48 ** ** ** 48 ** ** ** 48 ** ** 45 ** ** 48 ** ** ** ** ** ** ** ** 41 ** 01 48 ** ** ** 48 ** ** ** ** ** ** BA ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** 48 ** ** ** 45 ** ** 41 ** 01 48 ** ** ** ** ** ** ** ** BA ** ** ** ** 48 ** ** ** 48 ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** 48 ** ** ** 41 ** 01)
registersymbol(crouchFlagWriteOnCrouchEnterAOB)

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(crouchFlagWriteOnCrouchEnterAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4486</ID>
          <Description>"stealth .1"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bStealthMod:
db 01
db 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bStealthMod:
db 00
db 01

//[pPlayer+18]+a6:
//db 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4505</ID>
          <Description>"No description"</Description>
          <VariableType>Float</VariableType>
          <Address>9683C2968</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4506</ID>
          <Description>"No description"</Description>
          <VariableType>Float</VariableType>
          <Address>96A421F08</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4507</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9683C01B0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4508</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>975307080</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4509</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,74 16 48 ** ** 8B ** FF ** ** ** ** ** 4C)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB+2) //"ACOdyssey.exe"+1F1E0FC)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipBase1
mov [rax],rcx

originalcode2_enable:
readmem(playerShipBase1ReadAOB+2,19)
//mov rax,[rcx]
//mov edx,[rsi]
//call qword ptr [rax+00000150]
//mov r8,[rsp+00000088]

exit2:
jmp playerShipBase1ReadAOB+15

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB+2: //"ACOdyssey.exe"+1F1E0FC:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
playerShipBase1ReadAOB+2: //"ACOdyssey.exe"+1F1E0FC:
readmem(originalcode2_enable,19)
//db 48 8B 01 8B 16 FF 90 50 01 00 00 4C 8B 84 24 88 00 00 00
//Alt: mov rax,[rcx]
//Alt: mov edx,[rsi]
//Alt: call qword ptr [rax+00000150]
//Alt: mov r8,[rsp+00000088]
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4511</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>97F47BB48</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4517</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97F479390</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4518</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9845F7480</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4519</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>95C138370</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4520</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4521</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>91C7AC7B4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4527</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EC4E99:
db EB



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EC4E99:
db 76
//Alt: jna
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4528</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2E78CC0:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2E78CC0:
db 76
//Alt: jna
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4529</ID>
          <Description>"No Description"</Description>
          <VariableType>Byte</VariableType>
          <Address>91C7AC7DD</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4578</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>985EA5870</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>4579</ID>
              <Description>"No Description"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+188</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4580</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>985EA59F8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4581</ID>
          <Description>"No Description"</Description>
          <VariableType>Array of byte</VariableType>
          <ByteLength>0</ByteLength>
          <Address>pPlayerShipHealthBase</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>4582</ID>
              <Description>"No Description"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+188</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4583</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp "ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4584</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>95BE027E4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4585</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+2D67D80)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,pPlayerShipHealthBase
mov r8,[r8]
cmp [rcx+158],r8
jne @f
mov ecx,eax
//mov ecx,1
jmp end

@@:
or ecx,-01

end:
cmp esi,ecx
cmp esi,ecx
cmovle esi,ecx
cmp eax,esi
cmovle esi,eax
xor r8d,r8d
jmp exit

originalcode:
or ecx,-01
cmp esi,ecx
cmp esi,ecx
cmovle esi,ecx
cmp eax,esi
cmovle esi,eax
xor r8d,r8d

exit:
jmp "ACOdyssey.exe"+2D67D90

///

"ACOdyssey.exe"+2D67D80:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2D67D80:
db 83 C9 FF 3B F1 3B F1 0F 4E F1 3B C6 0F 4E F0 45 33 C0
//Alt: or ecx,-01
//Alt: cmp esi,ecx
//Alt: cmp esi,ecx
//Alt: cmovle esi,ecx
//Alt: cmp eax,esi
//Alt: cmovle esi,eax
//Alt: xor r8d,r8d
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4589</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F6010</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4590</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F5E90</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4591</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F5F90</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4592</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F6030</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4593</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F5B90</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4594</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F5FB0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4595</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9628F5E10</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4596</ID>
          <Description>"a"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EB3D2D:
db 90 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2EB3D2D:
db 44 3B EE
//Alt: cmp r13d,esi
//Alt: mov rcx,rbx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4597</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9872B3520</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4599</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>96A370E50</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4600</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>96A370CD0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4601</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>96A370DD0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4602</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>96A370E70</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4603</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EB3C94:
db 44 8B EE


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EB3C94:
db 44 8B E8
//Alt: mov r13d,eax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4604</ID>
          <Description>"b"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+2EB3CA3)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r13d,[rdi]

originalcode:
mov esi,[rdi]
lea rcx,[rbx+00000A48]
call ACOdyssey.exe+2312E10

exit:
jmp "ACOdyssey.exe"+2EB3CB1

///

"ACOdyssey.exe"+2EB3CA3:
jmp newmem



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2EB3CA3:
db 8B 37 48 8D 8B 48 0A 00 00 E8 5F F1 45 FF
//Alt: mov esi,[rdi]
//Alt: lea rcx,[rbx+00000A48]
//Alt: call ACOdyssey.exe+2312E10
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4612</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+2EB3C8A)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
call ACOdyssey.exe+270DAB0
mov eax,#5000

lea rcx,[rsp+40]
mov r13d,eax
call ACOdyssey.exe+2390CC0
jmp exit

originalcode:
call ACOdyssey.exe+270DAB0
lea rcx,[rsp+40]
mov r13d,eax
call ACOdyssey.exe+2390CC0

exit:
jmp "ACOdyssey.exe"+2EB3C9C

///

"ACOdyssey.exe"+2EB3C8A:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2EB3C8A:
db E8 21 9E 85 FF 48 8D 4C 24 40 44 8B E8 E8 24 D0 4D FF
//Alt: call ACOdyssey.exe+270DAB0
//Alt: lea rcx,[rsp+40]
//Alt: mov r13d,eax
//Alt: call ACOdyssey.exe+2390CC0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4613</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>956F4D7A0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4614</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2CCC118:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2CCC118:
db 74 11
//Alt: je ACOdyssey.exe+2CCC12B
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4615</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2CB80</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4616</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2CA00</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4617</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2CB00</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4618</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2CBA0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4619</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2C700</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4620</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2CB20</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4621</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE2C980</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4624</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(resourcesChkOnShipMenuAccessAOB,ACOdyssey.exe,E8 ** ** ** ** 3B ** 0F 82 ** ** ** ** 48 ** ** ** 48 ** ** 75)
registersymbol(resourcesChkOnShipMenuAccessAOB)

alloc(originalcode4_ignoredr,8,resourcesChkOnShipMenuAccessAOB+5)
registersymbol(originalcode4_ignoredr)

originalcode4_ignoredr:
readmem(resourcesChkOnShipMenuAccessAOB+5,2)

///

resourcesChkOnShipMenuAccessAOB+5: //"ACOdyssey.exe"+2E54D80:
db 39 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
resourcesChkOnShipMenuAccessAOB+5: //"ACOdyssey.exe"+2E54D80:
readmem(originalcode4_ignoredr,2)
//db 3B F8
//Alt: cmp edi,eax
dealloc(originalcode4_ignoredr)
unregistersymbol(originalcode4_ignoredr)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4625</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>916751508</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4626</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>EA9525B8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4627</ID>
          <Description>"exp multiplier"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(expRead3AOB,ACOdyssey.exe,74 ** 48 ** ** 44 ** ** ** ** ** ** EB 03 44 ** ** 44 ** ** ** 41)
registersymbol(expRead3AOB)

label(pPlayerEXP)
registersymbol(pPlayerEXP)

alloc(newmem,2048,expRead3AOB) //"ACOdyssey.exe"+2710AC4)
label(originalcode_expmultiplier)
registersymbol(originalcode_expmultiplier)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
je ha1
mov r9,pPlayerEXP
mov [r9+8],rax
readmem(expRead3AOB+2,3)
mov [r9],rax
readmem(expRead3AOB+5,7)
jmp ha2
ha1:
readmem(expRead3AOB+e,3)
ha2:
readmem(expRead3AOB+11,4)
jmp exit

originalcode_expmultiplier:
readmem(expRead3AOB,21)
//je ACOdyssey.exe+2710AD2
//mov rax,[rax]
//mov r9d,[rax+00000648]
//jmp ACOdyssey.exe+2710AD5
//mov r9d,ecx
//mov r8d,[rdi+10]

exit:
jmp expRead3AOB+15

///
pPlayerEXP:
///

expRead3AOB: //"ACOdyssey.exe"+2710AC4:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
expRead3AOB: //"ACOdyssey.exe"+2710AC4:
readmem(originalcode_expmultiplier,21)
//db 74 0C 48 8B 00 44 8B 88 48 06 00 00 EB 03 44 8B C9 44 8B 47 10
//Alt: je ACOdyssey.exe+2710AD2
//Alt: mov rax,[rax]
//Alt: mov r9d,[rax+00000648]
//Alt: jmp ACOdyssey.exe+2710AD5
//Alt: mov r9d,ecx
//Alt: mov r8d,[rdi+10]
unregistersymbol(originalcode_expmultiplier)

unregistersymbol(pPlayerEXP)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4629</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(expmultiplierdefault,(float)2)

aobscanmodule(expGainedReadFromStackAPB,ACOdyssey.exe,8B ** ** 4C 8D ** ** ** ** ** 8B ** ** ** ** ** 48 ** ** ** ** ** ** 44 ** ** ** ** ** ** 48 ** ** ** ** ** **89)
registersymbol(expGainedReadFromStackAPB)

label(dEXPMultiplier)
registersymbol(dEXPMultiplier)

alloc(newmem2,2048,expGainedReadFromStackAPB) //"ACOdyssey.exe"+26E6B7E)
label(originalcode2_expmultiplier)
registersymbol(originalcode2_expmultiplier)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
reassemble(expGainedReadFromStackAPB+3)
mov rdx,dEXPMultiplier
fild dword ptr [r9+4]
fmul dword ptr [rdx]
fistp dword ptr [r9+4]

originalcode2_expmultiplier:
readmem(expGainedReadFromStackAPB,16)
//mov eax,[rbx+68]
//lea r9,[rdi+000000B0]
//mov edx,[rdi+000000B4]

exit2:
jmp expGainedReadFromStackAPB+10

///
dEXPMultiplier:
dd expmultiplierdefault
///

expGainedReadFromStackAPB: //"ACOdyssey.exe"+26E6B7E:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
expGainedReadFromStackAPB: //"ACOdyssey.exe"+26E6B7E:
readmem(originalcode2_expmultiplier,16)
//db 8B 43 68 4C 8D 8F B0 00 00 00 8B 97 B4 00 00 00
//Alt: mov eax,[rbx+68]
//Alt: lea r9,[rdi+000000B0]
//Alt: mov edx,[rdi+000000B4]
unregistersymbol(originalcode2_expmultiplier)

unregistersymbol(dEXPMultiplier)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4633</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>978883390</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4634</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>978883370</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4635</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>978883310</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4636</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9788833D0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4637</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>978882EB0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4638</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>978883270</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4639</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>978883130</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4640</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>95A3C4210</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4641</ID>
          <Description>"arrow craft"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(resourcesChkForCraftOnInventoryMenuAccessAOB,ACOdyssey.exe,48 ** ** E8 ** ** ** ** 3B C7 72)
registersymbol(resourcesChkForCraftOnInventoryMenuAccessAOB)

resourcesChkForCraftOnInventoryMenuAccessAOB+8: //"ACOdyssey.exe"+2E8949E:
db 39 C0



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
resourcesChkForCraftOnInventoryMenuAccessAOB+8: //"ACOdyssey.exe"+2E8949E:
db 3B C7
//Alt: cmp eax,edi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4642</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>95A3C4410</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4643</ID>
          <Description>"pay bounty"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(currencyChkForBountyPayOnMapMenuAccessAOB,ACOdyssey.exe,8B ** ** ** ** ** 85 FF 74 ** 3B F7 72)
registersymbol(currencyChkForBountyPayOnMapMenuAccessAOB)

currencyChkForBountyPayOnMapMenuAccessAOB+a: //"ACOdyssey.exe"+2CE359F:
db 39 F6



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
currencyChkForBountyPayOnMapMenuAccessAOB+a: //"ACOdyssey.exe"+2CE359F:
db 3B F7
//Alt: cmp esi,edi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4644</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9C5A6A000</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4645</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EAEB13:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EAEB13:
db 74
//Alt: je
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4646</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>1E3237AF0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4647</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EACD8B:
db 32 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EACD8B:
db B0 01
//Alt: mov al,01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4648</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>1E3237B50</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4649</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2EAF93E:
db B1 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2EAF93E:
db 32 C9
//Alt: xor cl,cl
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4650</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>99A71A9BC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4651</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>98780204C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4652</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>1E3172E7C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4653</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>1E3E179CC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4654</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2405F8B:
db 40 B7 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2405F8B:
db 40 32 FF
//Alt: xor dil,dil
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4655</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+23DBECE:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+23DBECE:
db 75
//Alt: jne
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4656</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>997BC3A3C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4657</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>9D69D88EC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4658</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>1DF88954C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4659</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>98F371A7C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4660</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>978BFC62C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4661</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>9926EB57C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4662</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9AF9E8D9C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4663</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>9C61C8FAC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4664</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>1FFFAA6FC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4665</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>98651479C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4666</ID>
          <Description>"No Description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>978BFC62C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4667</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+952B81D)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov al,1

originalcode:
mov [rsi],al
mov rdi,[rsp+38]
add rsp,40
pop r14
pop r13

exit:
jmp "ACOdyssey.exe"+952B82C

///

"ACOdyssey.exe"+952B81D:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+952B81D:
db 88 06 48 8B 7C 24 38 48 83 C4 40 41 5E 41 5D
//Alt: mov [rsi],al
//Alt: mov rdi,[rsp+38]
//Alt: add rsp,40
//Alt: pop r14
//Alt: pop r13
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4668</ID>
          <Description>"*"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//** ** ** ** ** ** ** ** ** ** ** ** 06 ** 01 3A ** 74

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4669</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>137CE8558</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4670</ID>
          <Description>"No description"</Description>
          <VariableType>Byte</VariableType>
          <Address>96BD3B460</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4671</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE3EE90</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4672</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE3EF30</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4673</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE3EE70</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4674</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE3EDB0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4675</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97CE3EDF0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4676</ID>
          <Description>"ship test"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(shipHealthMaxReadAOB,ACOdyssey.exe,0F 2F ** ** ** ** ** 48 ** ** ** ** 0F 92 C0 48 ** ** ** 41 5E C3)
registersymbol(shipHealthMaxReadAOB)

label(pPlayerShipHealthBaseTest)
registersymbol(pPlayerShipHealthBaseTest)

alloc(newmem6,2048,shipHealthMaxReadAOB) //"ACOdyssey.exe"+2DFB8E1)
label(originalcode6_test)
registersymbol(originalcode6_test)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx
//cmp word ptr [rsp+42],0000
//je end
lea rbx,[r14-188]
cmp dword ptr [rbx+44],0
jne end
push rax
push rcx
mov rax,pPlayerShipHealthBaseTest
mov rcx,[rax]
test rcx,rcx
jz @f
cmp rcx,rbx
je @f
lea rax,[rax+8]
@@:
mov [rax],rbx
pop rcx
pop rax

end:
pop rbx

originalcode6_test:
readmem(shipHealthMaxReadAOB,15)
//comiss xmm1,[rbx+00000370]
//mov rbx,[rsp+48]
//setb al

exit6:
jmp shipHealthMaxReadAOB+f// "ACOdyssey.exe"+2DFB8F0

///
pPlayerShipHealthBaseTest:
///

shipHealthMaxReadAOB: //"ACOdyssey.exe"+2DFB8E1:
jmp newmem6




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
shipHealthMaxReadAOB: //"ACOdyssey.exe"+2DFB8E1:
readmem(originalcode6_test,15)
//db 0F 2F 8B 70 03 00 00 48 8B 5C 24 48 0F 92 C0
//Alt: comiss xmm1,[rbx+00000370]
//Alt: mov rbx,[rsp+48]
//Alt: setb al
unregistersymbol(originalcode6_test)

unregistersymbol(pPlayerShipHealthBaseTest)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4677</ID>
              <Description>"player ship health"</Description>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerShipHealthBaseTest</Address>
              <Offsets>
                <Offset>188</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>4678</ID>
                  <Description>"player ship max health"</Description>
                  <Color>000000</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4679</ID>
              <Description>"what!?"</Description>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerShipHealthBaseTest+8</Address>
              <Offsets>
                <Offset>188</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>4680</ID>
                  <Description>""</Description>
                  <Color>000000</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4681</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98BCAB5D8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4682</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98BCAB5DC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4683</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98BCAB450</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4684</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2ReadAOB)

alloc(newmem11,2048,playerShipBase2ReadAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2ReadAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2ReadAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2ReadAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11
nop
returnhere11:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem11)
playerShipBase2ReadAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4686</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98B630DF0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4687</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4698</ID>
          <Description>"enable .3"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11
nop
returnhere11:

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4699</ID>
          <Description>"ignore ship health .1"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(shipHealthCalOnChangeAOB,ACOdyssey.exe,41 ** ** ** ** 00 00 8B ** ** 2B ** ** 45 ** ** ** ** ** ** 85 ** 7F)
registersymbol(shipHealthCalOnChangeAOB)

alloc(newmem2,2048,shipHealthCalOnChangeAOB+7) //"ACOdyssey.exe"+2DF6094)
label(originalcode2_shipundead)
registersymbol(originalcode2_shipundead)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(shipHealthCalOnChangeAOB+7,6)
//mov esi,[rbp+68]
//sub esi,[rbp+7C]

mov r12,pPlayerShipHealthBase
mov r12,[r12]

db 49 8D
readmem(shipHealthCalOnChangeAOB+2,5)
//lea rax,[r15+130]

cmp [rax+20],r12 //r15+150
jne @f

test esi,esi
jg @f
mov esi,1

@@:
readmem(shipHealthCalOnChangeAOB+d,9)
//mov r12d,[r14+00000090]
//test esi,esi
jmp exit2

originalcode2_shipundead:
readmem(shipHealthCalOnChangeAOB+7,15)
//mov esi,[rbp+68]
//sub esi,[rbp+7C]
//mov r12d,[r14+00000090]
//test esi,esi

exit2:
jmp shipHealthCalOnChangeAOB+16 //"ACOdyssey.exe"+2DF60A3

///

shipHealthCalOnChangeAOB+7: //"ACOdyssey.exe"+2DF6094:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
shipHealthCalOnChangeAOB+7: //"ACOdyssey.exe"+2DF6094:
readmem(originalcode2_shipundead,15)
//db 8B 75 68 2B 75 7C 45 8B A6 90 00 00 00 85 F6
//Alt: mov esi,[rbp+68]
//Alt: sub esi,[rbp+7C]
//Alt: mov r12d,[r14+00000090]
//Alt: test esi,esi
unregistersymbol(originalcode2_shipundead)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4701</ID>
          <Description>"No description"</Description>
          <VariableType>Float</VariableType>
          <Address>92BA265C0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4702</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+33FA27C)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
sub rsp,10
movdqu dqword [rsp],xmm0

movss xmm1,[rdi+2b0]

mov rcx,gjyyyEE
comiss xmm1,[rcx]
jbe @f
movss xmm1,[rdi+2b0]
movss xmm1,[rcx+4]
movss [rdi+2b0],xmm1

@@:
movdqu xmm0,dqword [rsp]
add rsp,10


originalcode:
movss xmm1,[rdi+000002B0]
mov rcx,r14
call ACOdyssey.exe+33AB4E0

exit:
jmp "ACOdyssey.exe"+33FA28C

///
gjyyyEE:
dd (float)1
dd (float)0.3
///

"ACOdyssey.exe"+33FA27C:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+33FA27C:
db F3 0F 10 8F B0 02 00 00 49 8B CE E8 54 12 FB FF
//Alt: movss xmm1,[rdi+000002B0]
//Alt: mov rcx,r14
//Alt: call ACOdyssey.exe+33AB4E0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4703</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>143D7E718</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4704</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+33F9546)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm7,[rdi+000002B0]
mov r8,gjyyyEE
comiss xmm7,[r8]
jbe @f
movss xmm7,[r8+4]
movss [rdi+2b0],xmm7
@@:

originalcode:
movss xmm7,[rdi+000002B0]
mov r8d,0000002C

exit:
jmp "ACOdyssey.exe"+33F9554

///
gjyyyEE:
dd (float)1
dd (float)0.3
///

"ACOdyssey.exe"+33F9546:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+33F9546:
db F3 0F 10 BF B0 02 00 00 41 B8 2C 00 00 00
//Alt: movss xmm7,[rdi+000002B0]
//Alt: mov r8d,0000002C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4705</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+33F9F1F)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm0,[rcx+2b0]
mov rdi,gjyyyEE
comiss xmm0,[rdi]
jbe @f
movss xmm0,[rdi+4]
movss [rcx+2b0],xmm0
@@:

originalcode:
mov [rsp+70],rax
movss xmm0,[rcx+000002B0]
mov rdi,rdx

exit:
jmp "ACOdyssey.exe"+33F9F2F

///
gjyyyEE:
dd (float)1
dd (float)0.3
///

"ACOdyssey.exe"+33F9F1F:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+33F9F1F:
db 48 89 44 24 70 F3 0F 10 81 B0 02 00 00 48 8B FA
//Alt: mov [rsp+70],rax
//Alt: movss xmm0,[rcx+000002B0]
//Alt: mov rdi,rdx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4706</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>143D7D024</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4708</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+340F8F9) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
call ACOdyssey.exe+340B3E0
movss xmm6,[rdi+2b0]
mov rax,gjyyyEE
comiss xmm6,[rax]
jbe @f
movss xmm6,[rdi+2b0]
//movss xmm6,[rax+4]
//movss [rdi+2b0]
@@:

originalcode:
//call ACOdyssey.exe+340B3E0
//movss xmm6,[rdi+000002B0]
xorps xmm8,xmm8

exit:
jmp returnhere

///
gjyyyEE:
dd (float)1
dd (float)0.3
///

"ACOdyssey.exe"+340F8F9:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+340F8F9:
db E8 E2 BA FF FF F3 0F 10 B7 B0 02 00 00 45 0F 57 C0
//Alt: call ACOdyssey.exe+340B3E0
//Alt: movss xmm6,[rdi+000002B0]
//Alt: xorps xmm8,xmm8
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4707</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+340F92A)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//minss xmm6,[ACOdyssey.exe+3D7D024]
movss [rbp-31],xmm6
test rcx,rcx

exit:
jmp "ACOdyssey.exe"+340F93A

///

"ACOdyssey.exe"+340F92A:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+340F92A:
db F3 0F 5D 35 F2 D6 96 00 F3 0F 11 75 CF 48 85 C9
//Alt: minss xmm6,[ACOdyssey.exe+3D7D024]
//Alt: movss [rbp-31],xmm6
//Alt: test rcx,rcx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4810</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>7E0AD540+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4811</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>7E0AD540+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4812</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD48-8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4827</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD48-4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4826</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD48+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4813</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD48+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4814</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD5C+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4815</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD5C+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4816</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE25F10+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4817</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE25F10+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4818</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE25F24+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4819</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE25F24+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4820</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE26018+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4821</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE26018+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4822</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE2602C+0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4823</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>98FE2602C+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4825</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(huntdamagemultiplierdefault,(float)10)

aobscanmodule(huntDamageReadAOB,ACOdyssey.exe,75 0C 8B 81 88 01 00 00 48 83 C4 20 5B C3)
registersymbol(huntDamageReadAOB)

label(dHuntDamageMultiplier)
registersymbol(dHuntDamageMultiplier)

alloc(newmem2,2048,huntDamageReadAOB) //"ACOdyssey.exe"+2773958)
label(originalcode2_huntdamagemultiplier)
registersymbol(originalcode2_huntdamagemultiplier)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
jne exit2
mov rax,pPlayer
cmp [rax+10],rsi
je @f
jmp end

@@:
readmem(huntDamageReadAOB+2,6)
//mov eax,[rcx+188]
push rax
mov rbx,dHuntDamageMultiplier
fild dword [rsp]
fmul dword ptr [rbx]
fistp dword ptr [rsp]
pop rax
readmem(huntDamageReadAOB+8,6)
//add rsp,20
//pop rbx
//ret

end:
readmem(huntDamageReadAOB+2,12)
//mov eax,[rcx+188]
//add rsp,20
//pop rbx
//ret

originalcode2_huntdamagemultiplier:
readmem(huntDamageReadAOB,14)
//jne ACOdyssey.exe+2773966
//mov eax,[rcx+00000188]
//add rsp,20
//pop rbx
//ret

exit2:
jmp huntDamageReadAOB+e //"ACOdyssey.exe"+2773966

///
dHuntDamageMultiplier:
dd huntdamagemultiplierdefault
///

huntDamageReadAOB: //"ACOdyssey.exe"+2773958:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
huntDamageReadAOB: //"ACOdyssey.exe"+2773958:
readmem(originalcode2_huntdamagemultiplier,14)
//db 75 0C 8B 81 88 01 00 00 48 83 C4 20 5B C3
//Alt: jne ACOdyssey.exe+2773966
//Alt: mov eax,[rcx+00000188]
//Alt: add rsp,20
//Alt: pop rbx
//Alt: ret
unregistersymbol(originalcode2_huntdamagemultiplier)

unregistersymbol(dHuntDamageMultiplier)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4828</ID>
          <Description>"damage multiplier"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(assassindamagemultiplierdefault,(float)100)
define(huntdamagemultiplierdefault,(float)10)

aobscanmodule(assassinDamageReadAOB,ACOdyssey.exe,8B 81 8C 01 00 00 C3 CC CC CC CC CC CC CC)
registersymbol(assassinDamageReadAOB)

label(dAssassinDamageMultiplier)
registersymbol(dAssassinDamageMultiplier)

alloc(newmem,2048,assassinDamageReadAOB) //"ACOdyssey.exe"+27738E0)
label(originalcode_assassinsdamgemultiplier)
registersymbol(originalcode_assassinsdamgemultiplier)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayer
cmp [rax+10],r12
je @f
cmp [rax+10],r15
je @f
jmp end

@@:
readmem(assassinDamageReadAOB,6)
//mov eax,[rcx+18c]
push rax
push rbx
mov rbx,dAssassinDamageMultiplier
fild dword [rsp]
fmul dword ptr [rbx]
fistp dword ptr [rsp]
pop rbx
pop rax
readmem(assassinDamageReadAOB+6,1)
//ret

end:

originalcode_assassinsdamgemultiplier:
readmem(assassinDamageReadAOB,14)
//mov eax,[rcx+0000018C]
//ret
//int 3
//int 3
//int 3
//int 3
//int 3
//int 3
//int 3

///
dAssassinDamageMultiplier:
dd assassindamagemultiplierdefault
///

assassinDamageReadAOB: //"ACOdyssey.exe"+27738E0:
jmp newmem

///********************************************///
aobscanmodule(huntDamageReadCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 8B ** ** 4C ** ** ** 48 ** ** ** 0F 57)
registersymbol(huntDamageReadCallerAOB)

label(dHuntDamageMultiplier)
registersymbol(dHuntDamageMultiplier)

alloc(newmem2,2048,huntDamageReadCallerAOB+5) //"ACOdyssey.exe"+217EBDA)
label(originalcode2_huntdamagemultiplier)
registersymbol(originalcode2_huntdamagemultiplier)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayer
cmp [rcx+10],rsi
je @f
jmp end2

@@:
push rax
mov r8,dHuntDamageMultiplier
fild dword [rsp]
fmul dword ptr [r8]
fistp dword ptr [rsp]
pop rax

end2:

originalcode2_huntdamagemultiplier:
readmem(huntDamageReadCallerAOB+5,14)
//mov edx,[rbx+10]
//lea r8,[rbx+24]
//mov rcx,[rbx+08]
//xorps xmm6,xmm6

exit2:
jmp huntDamageReadCallerAOB+13 //"ACOdyssey.exe"+217EBE8

///
dHuntDamageMultiplier:
dd huntdamagemultiplierdefault
///

huntDamageReadCallerAOB+5: //"ACOdyssey.exe"+217EBDA:
jmp newmem2

///********************************************///


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
assassinDamageReadAOB: //"ACOdyssey.exe"+27738E0:
readmem(originalcode_assassinsdamgemultiplier,15)
//db 8B 81 8C 01 00 00 C3 CC CC CC CC CC CC CC
//Alt: mov eax,[rcx+0000018C]
//Alt: ret
//Alt: int 3
//Alt: int 3
//Alt: int 3
//Alt: int 3
//Alt: int 3
//Alt: int 3
//Alt: int 3
unregistersymbol(originalcode_assassinsdamgemultiplier)

unregistersymbol(dAssassinDamageMultiplier)

///********************************************///
dealloc(newmem2)
huntDamageReadCallerAOB+5: //"ACOdyssey.exe"+217EBDA:
readmem(originalcode2_huntdamagemultiplier,14)
//db 8B 53 10 4C 8D 43 24 48 8B 4B 08 0F 57 F6
//Alt: mov edx,[rbx+10]
//Alt: lea r8,[rbx+24]
//Alt: mov rcx,[rbx+08]
//Alt: xorps xmm6,xmm6
unregistersymbol(originalcode2_huntdamagemultiplier)

unregistersymbol(dHuntDamageMultiplier)

///********************************************///
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4829</ID>
              <Description>"hunter x?"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>dHuntDamageMultiplier</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>4830</ID>
              <Description>"assassin x?"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>dAssassinDamageMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4831</ID>
          <Description>"bow damage multiplier"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(huntdamagemultiplierdefault,(float)10000)

aobscanmodule(huntDamageReadCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 8B ** ** 4C ** ** ** 48 ** ** ** 0F 57)
registersymbol(huntDamageReadCallerAOB)

label(dHuntDamageMultiplier)
registersymbol(dHuntDamageMultiplier)

alloc(newmem2,2048,huntDamageReadCallerAOB+5) //"ACOdyssey.exe"+217EBDA)
label(originalcode2_huntdamagemultiplier)
registersymbol(originalcode2_huntdamagemultiplier)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayer
cmp [rcx+10],rsi
je @f
jmp end2

@@:
push rax
mov r8,dHuntDamageMultiplier
fild dword [rsp]
fmul dword ptr [r8]
fistp dword ptr [rsp]
pop rax

end2:

originalcode2_huntdamagemultiplier:
readmem(huntDamageReadCallerAOB+5,14)
//mov edx,[rbx+10]
//lea r8,[rbx+24]
//mov rcx,[rbx+08]
//xorps xmm6,xmm6

exit2:
jmp huntDamageReadCallerAOB+13 //"ACOdyssey.exe"+217EBE8

///
dHuntDamageMultiplier:
dd huntdamagemultiplierdefault
///

huntDamageReadCallerAOB+5: //"ACOdyssey.exe"+217EBDA:
jmp newmem2

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
huntDamageReadCallerAOB+5: //"ACOdyssey.exe"+217EBDA:
readmem(originalcode2_huntdamagemultiplier,14)
//db 8B 53 10 4C 8D 43 24 48 8B 4B 08 0F 57 F6
//Alt: mov edx,[rbx+10]
//Alt: lea r8,[rbx+24]
//Alt: mov rcx,[rbx+08]
//Alt: xorps xmm6,xmm6
unregistersymbol(originalcode2_huntdamagemultiplier)

unregistersymbol(dHuntDamageMultiplier)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4832</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>143D7D024</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4833</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10C6BAD60</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4834</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+33CEBFF)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r14,pPlayer
mov r14,[r14+10]
cmp [rsp+120],r14
jne @f
lea r14,[rcx+00000108]

originalcode:
lea r14,[rcx+00000108]
movaps [rsp+20],xmm6
mov rax,[r14]

exit:
jmp "ACOdyssey.exe"+33CEC0E

///

"ACOdyssey.exe"+33CEBFF:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+33CEBFF:
db 4C 8D B1 08 01 00 00 0F 29 74 24 20 49 8B 06
//Alt: lea r14,[rcx+00000108]
//Alt: movaps [rsp+20],xmm6
//Alt: mov rax,[r14]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4836</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>A0F299B80</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4839</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9673F78B0</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>4840</ID>
              <Description>"max health base"</Description>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>+4</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4841</ID>
                  <Description>"multi 1 (armor)"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4842</ID>
                  <Description>"multi 2 (curse penalty)"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>+c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4843</ID>
                  <Description>"multi 3 (?)"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4844</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9673F7780</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>4845</ID>
              <Description>""</Description>
              <Color>0000FF</Color>
              <VariableType>Byte</VariableType>
              <Address>+1D0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>4849</ID>
              <Description>""</Description>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>+180</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4846</ID>
          <Description>"pet full health"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(minhealthpercent,(float)1)

aobscanmodule(healthWritesAOB,ACOdyssey.exe,0F 4E F9 ** ** 0F 4E F8 89 BB ** ** ** ** 48)
registersymbol(healthWritesAOB)

label(dMinHealthPercentage)
registersymbol(dMinHealthPercentage)

alloc(newmem2,2048,healthWritesAOB) //"ACOdyssey.exe"+2189669)
label(originalcode2_petfullhealth)
registersymbol(originalcode2_petfullhealth)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(healthWritesAOB,8)

push rax
mov rax,pPlayer
cmp [rax],rbx
pop rax
jne end2

@@:
//
sub rsp,10
movdqu dqword [rsp],xmm0
//sub rsp,10
//movdqu dqword [rsp],xmm1
push rax
//

movd xmm0,eax
cvtdq2ps xmm0,xmm0
mov rax,dMinHealthPercentage
mulss xmm0,[rax]
cvttss2si eax,xmm0

cmp edi,eax
jge @f
mov edi,eax

@@:
//
pop rax
//movdqu xmm1,dqword [rsp]
//add rsp,10
movdqu xmm0,dqword [rsp]
add rsp,10
//

end2:
readmem(healthWritesAOB+8,6)
jmp exit2

originalcode2_petfullhealth:
readmem(healthWritesAOB,14)
//cmovle edi,ecx
//cmp eax,edi
//cmovle edi,eax
//mov [rbx+00000130],edi

exit2:
jmp healthWritesAOB+e

///
dMinHealthPercentage:
dd minhealthpercent
///

healthWritesAOB: //"ACOdyssey.exe"+2189669:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
healthWritesAOB: //"ACOdyssey.exe"+2189669:
readmem(originalcode2_petfullhealth,14)
//db 0F 4E F9 3B C7 0F 4E F8 89 BB 30 01 00 00
//Alt: cmovle edi,ecx
//Alt: cmp eax,edi
//Alt: cmovle edi,eax
//Alt: mov [rbx+00000130],edi

unregistersymbol(originalcode2_petfullhealth)

unregistersymbol(dMinHealthPercentage)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4847</ID>
              <Description>"min health % (1 == 100%)"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>dMinHealthPercentage</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4848</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthRead2AOB,ACOdyssey.exe,7E ** 0F 29 ** ** ** 48 ** ** 66)
registersymbol(healthRead2AOB)

label(pPet)
registersymbol(pPet)

alloc(newmem12,2048,healthRead2AOB+2) //"ACOdyssey.exe"+218FB52)
label(originalcode12_petfullhealth)
registersymbol(originalcode12_petfullhealth)
label(exit12)

newmem12: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [rbx+184],ffffffff
jne @f
mov ecx,[rbx+130]
mov rcx,pPet
mov [rcx],rbx

@@:

originalcode12_petfullhealth:
readmem(healthRead2AOB+2,16)
//movaps [rsp+20],xmm6
//mov rcx,rbx
//movd xmm6,[rbx+00000130]

exit12:
jmp healthRead2AOB+12 //"ACOdyssey.exe"+218FB62

///
pPet:
///

healthRead2AOB+2: //"ACOdyssey.exe"+218FB52:
jmp newmem12


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem12)
healthRead2AOB+2: //"ACOdyssey.exe"+218FB52:
readmem(originalcode12_petfullhealth,16)
//db 0F 29 74 24 20 48 8B CB 66 0F 6E B3 30 01 00 00
//Alt: movaps [rsp+20],xmm6
//Alt: mov rcx,rbx
//Alt: movd xmm6,[rbx+00000130]
unregistersymbol(originalcode12_petfullhealth)

unregistersymbol(pPet)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4850</ID>
          <Description>"enable .4"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11

///***********************************************///
aobscanmodule(healthRead2AOB,ACOdyssey.exe,7E ** 0F 29 ** ** ** 48 ** ** 66)
registersymbol(healthRead2AOB)

label(pPet)
registersymbol(pPet)

alloc(newmem12,2048,healthRead2AOB+2) //"ACOdyssey.exe"+218FB52)
label(originalcode12_petfullhealth)
registersymbol(originalcode12_petfullhealth)
label(exit12)

newmem12: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [rbx+184],ffffffff
jne @f
mov ecx,[rbx+130]
mov rcx,pPet
mov [rcx],rbx

@@:

originalcode12_petfullhealth:
readmem(healthRead2AOB+2,16)
//movaps [rsp+20],xmm6
//mov rcx,rbx
//movd xmm6,[rbx+00000130]

exit12:
jmp healthRead2AOB+12 //"ACOdyssey.exe"+218FB62

///
pPet:
///

healthRead2AOB+2: //"ACOdyssey.exe"+218FB52:
jmp newmem12

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
dealloc(newmem12)
healthRead2AOB+2: //"ACOdyssey.exe"+218FB52:
readmem(originalcode12_petfullhealth,16)
//db 0F 29 74 24 20 48 8B CB 66 0F 6E B3 30 01 00 00
//Alt: movaps [rsp+20],xmm6
//Alt: mov rcx,rbx
//Alt: movd xmm6,[rbx+00000130]
unregistersymbol(originalcode12_petfullhealth)

unregistersymbol(pPet)

///***********************************************///
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4851</ID>
          <Description>"undead .3"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
registersymbol(healthCalOnHitAOB)

alloc(newmem,2048,healthCalOnHitAOB+5) //"ACOdyssey.exe"+212D598)
label(originalcode_undead)
registersymbol(originalcode_undead)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//test
//mov rdi,[rsp+28]//
//mov rdi,[rdi]
//test rdi,rdi
//jz @f
//mov rdi,[rdi+10]
//mov rdi,[rdi+10]
//mov rdi,[rdi+108]
//test rdi,rdi
//jz @f
//

//.2
//mov rdi,[rsp+28]
//mov rdi,[rdi]

//.3
mov rdi,[rsp+70]
//

mov rcx,pPlayer
cmp [rcx+8],rdi
jne @f

readmem(healthCalOnHitAOB+d,7)
//mov eax,r15d
//sub eax,[rsp+20]

//cmp eax,#1
//jge @f
//mov r15d,#1
//add r15d,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d

@@:

originalcode_undead:
readmem(healthCalOnHitAOB+5,15)
//mov rdi,[rsp+00000098]
//mov eax,r15d
//sub eax,[rsp+20]

exit:
jmp healthCalOnHitAOB+14 //"ACOdyssey.exe"+212D5A7

///

healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
readmem(originalcode_undead,15)
//db 48 8B BC 24 98 00 00 00 41 8B C7 2B 44 24 20
//Alt: mov rdi,[rsp+00000098]
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
unregistersymbol(originalcode_undead)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4852</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97D03B980</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4853</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>97D03B980</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4854</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(petHealthRegenCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 0F ** ** ** ** 0F ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(petHealthRegenCallerAOB)

label(pPet)
registersymbol(pPet)

alloc(newmem17,2048,petHealthRegenCallerAOB+5) //"ACOdyssey.exe"+239845B)
label(originalcode17_enable)
registersymbol(originalcode17_enable)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
lea rcx,[rcx]
mov rsi,pPet
mov [rsi],rcx

originalcode17_enable:
readmem(petHealthRegenCallerAOB+5,15)
//movaps xmm6,[rsp+30]
//movaps xmm7,[rsp+20]
//mov rsi,[rsp+58]

exit17:
jmp petHealthRegenCallerAOB+14 //"ACOdyssey.exe"+239846A

///
pPet:
///

petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
jmp newmem17


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem17)
petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
readmem(originalcode17_enable,15)
//db 0F 28 74 24 30 0F 28 7C 24 20 48 8B 74 24 58
//Alt: movaps xmm6,[rsp+30]
//Alt: movaps xmm7,[rsp+20]
//Alt: mov rsi,[rsp+58]
unregistersymbol(originalcode17_enable)

unregistersymbol(pPet)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4855</ID>
          <Description>"undead .4"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
registersymbol(healthCalOnHitAOB)

alloc(newmem13,2048,healthCalOnHitAOB+5) //"ACOdyssey.exe"+212D598)
label(originalcode13_undead)
registersymbol(originalcode13_undead)
label(exit13)

newmem13: //this is allocated memory, you have read,write,execute access
//place your code here
//test
//mov rdi,[rsp+28]//
//mov rdi,[rdi]
//test rdi,rdi
//jz @f
//mov rdi,[rdi+10]
//mov rdi,[rdi+10]
//mov rdi,[rdi+108]
//test rdi,rdi
//jz @f
//

//.2
//mov rdi,[rsp+28]
//mov rdi,[rdi]

//.3 .4
mov rdi,[rsp+70]
//

mov rcx,pPlayer
cmp [rcx+8],rdi
je isplayer13
mov rcx,pPet
mov rcx,[rcx]
test rcx,rcx
jz @f
cmp [rcx+10],rdi
je ispet13

@@:
jmp notplayerpet13

isplayer13:
jmp dominhealth13

ispet13:
mov rcx,bHavePet
cmp byte ptr [rcx],1
je @f
jmp notplayerpet13
@@:
mov byte ptr [rcx],0
jmp dominhealth13

notplayerpet13:
jmp end13

dominhealth13:
readmem(healthCalOnHitAOB+d,7)
//mov eax,r15d
//sub eax,[rsp+20]

//cmp eax,#1
//jge @f
//mov r15d,#1
//add r15d,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d
@@:
jmp end13


end13:

originalcode13_undead:
readmem(healthCalOnHitAOB+5,15)
//mov rdi,[rsp+00000098]
//mov eax,r15d
//sub eax,[rsp+20]

exit13:
jmp healthCalOnHitAOB+14 //"ACOdyssey.exe"+212D5A7

///

healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
jmp newmem13




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem13)
healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
readmem(originalcode13_undead,15)
//db 48 8B BC 24 98 00 00 00 41 8B C7 2B 44 24 20
//Alt: mov rdi,[rsp+00000098]
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
unregistersymbol(originalcode13_undead)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4856</ID>
          <Description>"undead .5"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
registersymbol(healthCalOnHitAOB)

alloc(newmem13,2048,healthCalOnHitAOB+5) //"ACOdyssey.exe"+212D598)
label(originalcode13_undead)
registersymbol(originalcode13_undead)
label(exit13)

newmem13: //this is allocated memory, you have read,write,execute access
//place your code here
//test
//mov rdi,[rsp+28]//
//mov rdi,[rdi]
//test rdi,rdi
//jz @f
//mov rdi,[rdi+10]
//mov rdi,[rdi+10]
//mov rdi,[rdi+108]
//test rdi,rdi
//jz @f
//

//.2
//mov rdi,[rsp+28]
//mov rdi,[rdi]

//.3 .4
mov rdi,[rsp+70]
//

mov rcx,pPlayer
cmp [rcx+8],rdi
je isplayer13
mov rcx,pPet
mov rcx,[rcx]
test rcx,rcx
jz @f
cmp [rcx+10],rdi
je ispet13

@@:
jmp notplayerpet13

isplayer13:
//
jmp dominhealth13

ispet13:
mov rcx,bHavePet
cmp byte ptr [rcx],1
je @f
jmp notplayerpet13
@@:
mov byte ptr [rcx],0
//
jmp dominhealth13

notplayerpet13:

mov rcx,pPlayer
mov rcx,[rcx+10]
cmp [rsp+40],rcx
je dozerohealth
cmp [rsp+50],rcx
je dozerohealth

jmp end13

dominhealth13:
readmem(healthCalOnHitAOB+d,7)
//mov eax,r15d
//sub eax,[rsp+20]

//cmp eax,#1
//jge @f
//mov r15d,#1
//add r15d,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d
@@:
jmp end13

dozerohealth:
cmp [rsp+20],r15d
jge @f
mov [rsp+20],r15d
mov [rbx+84],r15d
@@:
jmp end13

end13:

originalcode13_undead:
readmem(healthCalOnHitAOB+5,15)
//mov rdi,[rsp+00000098]
//mov eax,r15d
//sub eax,[rsp+20]

exit13:
jmp healthCalOnHitAOB+14 //"ACOdyssey.exe"+212D5A7

///

healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
jmp newmem13




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem13)
healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
readmem(originalcode13_undead,15)
//db 48 8B BC 24 98 00 00 00 41 8B C7 2B 44 24 20
//Alt: mov rdi,[rsp+00000098]
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
unregistersymbol(originalcode13_undead)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4861</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>9613009F0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4862</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>961300A20</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4863</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(horseMovementSpeedWritesAOB,ACOdyssey.exe,41 ** E0 ** ** ** F3 0F 11 ** ** ** ** ** E8)
registersymbol(horseMovementSpeedWritesAOB)

alloc(newmem2,2048,horseMovementSpeedWritesAOB) //"ACOdyssey.exe"+33FAE07)
label(originalcode2_walkkey)
registersymbol(originalcode2_walkkey)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end2

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end2:

originalcode2_walkkey:
readmem(horseMovementSpeedWritesAOB,14)
//mov r8d,000000E0
//movss [rbx+000002E0],xmm0

exit2:
jmp horseMovementSpeedWritesAOB+e //"ACOdyssey.exe"+33FAE15

///

horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
readmem(originalcode2_walkkey,14)
//db 41 B8 E0 00 00 00 F3 0F 11 83 E0 02 00 00
//Alt: mov r8d,000000E0
//Alt: movss [rbx+000002E0],xmm0
unregistersymbol(originalcode2_walkkey)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4864</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(movementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 48)
registersymbol(movementSpeedWritesInAutoMoveAOB)

alloc(newmem6,2048,movementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB0FC)
label(originalcode6_walkkey)
registersymbol(originalcode6_walkkey)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2b0],3F800000
//movdqa [rbx+2a0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end6
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(movementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2b0],ecx

end6:
jmp exit6

originalcode6_walkkey:
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002B0],3F800000
//movdqa [rbx+000002A0],xmm2

exit6:
jmp movementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB10E

///

movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
jmp newmem6


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
readmem(originalcode6_walkkey,18)
//db C7 83 B0 02 00 00 00 00 80 3F 66 0F 7F 93 A0 02 00 00
//Alt: mov [rbx+000002B0],3F800000
//Alt: movdqa [rbx+000002A0],xmm2
unregistersymbol(originalcode6_walkkey)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4865</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(horseMovementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 41)
registersymbol(horseMovementSpeedWritesInAutoMoveAOB)

alloc(newmem11,2048,horseMovementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB18E)
label(originalcode11_walkkey)
registersymbol(originalcode11_walkkey)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2e0],3F800000
//movdqa [rbx+2d0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end11
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(horseMovementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2e0],ecx

end11:
jmp exit11


originalcode11_walkkey:
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002E0],3F800000
//movdqa [rbx+000002D0],xmm2

exit11:
jmp horseMovementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB1A0

///

horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
jmp newmem11



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem11)
horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
readmem(originalcode11_walkkey,18)
//db C7 83 E0 02 00 00 00 00 80 3F 66 0F 7F 93 D0 02 00 00
//Alt: mov [rbx+000002E0],3F800000
//Alt: movdqa [rbx+000002D0],xmm2
unregistersymbol(originalcode11_walkkey)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4866</ID>
          <Description>"movement mod key"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(walkkeyiddefault,05)
define(jogkeyiddefault,06)
define(walkspeedmultiplier,(float)0.3)
define(jogspeedmultiplier,(float)0.68)

aobscanmodule(movementSpeedWritesAOB,ACOdyssey.exe,41 ** ** ** ** ** f3 0f 11 ** ** ** ** ** e8)
registersymbol(movementSpeedWritesAOB)

label(bWalkKeyID)
registersymbol(bWalkKeyID)
label(bJogKeyID)
registersymbol(bJogKeyID)
label(bWalkKeyPressed)
registersymbol(bWalkKeyPressed)
label(dWalkSpeedMultiplier)
registersymbol(dWalkSpeedMultiplier)

alloc(newmem,2048,movementSpeedWritesAOB) //"ACOdyssey.exe"+338979D)
label(originalcode_walkkey)
registersymbol(originalcode_walkkey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end:

originalcode_walkkey:
readmem(movementSpeedWritesAOB,14)
//mov r8d,0000002B
//movss [rbx+000002B0],xmm0

exit:
jmp movementSpeedWritesAOB+e //"ACOdyssey.exe"+33897AB

///
bWalkKeyID:
dd walkkeyiddefault
bJogKeyID:
dd jogkeyiddefault
bWalkKeyPressed:
dd 0
dWalkSpeedMultiplier:
dd walkspeedmultiplier
dd walkspeedmultiplier
dd jogspeedmultiplier
///

movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
jmp newmem

///********************************************************///
label(bEndThread_walkKey_keylistener_mem)
registersymbol(bEndThread_walkKey_keylistener_mem)

alloc(walkKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(walkKey_keylistener_mem)
createthread(walkKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

walkKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bWalkKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+4]
mov [rcx],eax
jmp keylistenerend

@@:
mov rcx,bJogKeyID
mov rcx,[rcx]
//mov rcx,06 //X2 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+8]
mov [rcx],eax
jmp keylistenerend



keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_walkKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_walkKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_walkKey_keylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_walkKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_walkKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_walkKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_walkKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
readmem(originalcode_walkkey,14)
//db 41 B8 2B 00 00 00 F3 0F 11 83 B0 02 00 00
//Alt: mov r8d,0000002B
//Alt: movss [rbx+000002B0],xmm0
unregistersymbol(originalcode_walkkey)

unregistersymbol(bWalkKeyID)
unregistersymbol(bJogKeyID)
unregistersymbol(bWalkKeyPressed)
unregistersymbol(dWalkSpeedMultiplier)

///********************************************************///
unregistersymbol(bEndThread_walkKey_keylistener_mem)

dealloc(walkKey_keylistener_mem)
unregistersymbol(walkKey_keylistener_mem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4867</ID>
              <Description>"walk key"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bWalkKeyID</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4868</ID>
                  <Description>"speed"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dWalkSpeedMultiplier+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4869</ID>
              <Description>"jogging key"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bJogKeyID</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4870</ID>
                  <Description>"speed"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dWalkSpeedMultiplier+8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4872</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>90405F6E0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4873</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>9E52CBF60</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4874</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(bEagleTeleportKey)
registersymbol(bEagleTeleportKey)

alloc(newmem,2048,"ACOdyssey.exe"+2CF18FF)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayer
mov rcx,[rcx+10]
cmp [rsp+1a8],rcx
jne @f
mov rcx,bEagleTeleportKey
cmp byte ptr [rcx],1
jne @f
sub rsp,28
push rax
push rcx
call GetWorld
mov rcx,[rax+90]
movups xmm0,[rdi+60]
movups [rcx+50],xmm0
pop rcx
pop rax
add rsp,28

end:

originalcode:
movaps [rdi+60],xmm0
mov qword ptr [rdi+70],00000000
mov [rdi+78],00000100

exit:
jmp "ACOdyssey.exe"+2CF1912

///
bEagleTeleportKey:
dd 1
///

"ACOdyssey.exe"+2CF18FF:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2CF18FF:
db 0F 29 47 60 48 C7 47 70 00 00 00 00 C7 47 78 00 01 00 00
//Alt: movaps [rdi+60],xmm0
//Alt: mov qword ptr [rdi+70],00000000
//Alt: mov [rdi+78],00000100

unregistersymbol(bEagleTeleportKey)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4875</ID>
          <Description>"coord write on waypoint set"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(ettimer,#1000)

aobscanmodule(waypointSetAOB,ACOdyssey.exe,74 ** 48 ** ** ** 0F 29 ** ** 48 ** ** ** 48)
registersymbol(waypointSetAOB)
aobscanmodule(coordsWriteAOB,ACOdyssey.exe,02 ** 28 ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** 0F ** ** ** C3)
registersymbol(coordsWriteAOB)

label(bEagleTeleport)
registersymbol(bEagleTeleport)
label(vEagleWaypoint)
registersymbol(vEagleWaypoint)

alloc(newmem,2048,waypointSetAOB+2) //"ACOdyssey.exe"+2D669AD)
label(originalcode_eagleteleport)
registersymbol(originalcode_eagleteleport)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayer
mov rax,[rax+10]
cmp [rsp+1f8],rax
jne @f

mov rcx,bEagleTeleport
cmp byte ptr [rcx],1
jne @f

mov rcx,vEagleWaypoint
{movaps [rbx+60],xmm3 //t}
//db 0F 11 59 30
db 0F 11 59
readmem(coordsWriteAOB+1b,1)
//movups [rcx+30],xmm3
//db 0F 11 58 50
db 0F 11 58
readmem(coordsWriteAOB+1f,1)
//movups [rax+50],xmm3
mov byte ptr [rcx+4],ettimer
jmp end

@@:
mov rax,vEagleWaypoint
xor rcx,rcx
mov [rax],rcx
mov [rax+30],rcx
mov [rax+38],rcx

end:

originalcode_eagleteleport:
readmem(waypointSetAOB+2,16)
//mov rax,[rbx+20]
//movaps [rbx+60],xmm3
//mov rcx,[rax+08]
//shl rcx,20

exit:
jmp waypointSetAOB+12 //"ACOdyssey.exe"+2D669BD

///
bEagleTeleport:
dd 0
vEagleWaypoint:
///

waypointSetAOB+2: //"ACOdyssey.exe"+2D669AD:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
waypointSetAOB+2: //"ACOdyssey.exe"+2D669AD:
readmem(originalcode_eagleteleport,16)
//db 48 8B 43 20 0F 29 5B 60 48 8B 48 08 48 C1 E1 20
//Alt: mov rax,[rbx+20]
//Alt: movaps [rbx+60],xmm3
//Alt: mov rcx,[rax+08]
//Alt: shl rcx,20
unregistersymbol(originalcode_eagleteleport)

unregistersymbol(bEagleTeleport)
unregistersymbol(vEagleWaypoint)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4876</ID>
          <Description>"coords"</Description>
          <VariableType>Float</VariableType>
          <Address>ACOdyssey.exe+5662CF8</Address>
          <Offsets>
            <Offset>50</Offset>
            <Offset>90</Offset>
            <Offset>d0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>4877</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048,"ACOdyssey.exe"+ABFA882)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here

movaps xmm0,[rax+20]
movaps [rcx+40],xmm0

push rcx
push rax
mov rax,pPlayer
cmp [rax+10],rcx
jne end2


mov rcx,vEagleWaypoint
xorps xmm1,xmm1
comiss xmm1,[rcx]
je @f
movups xmm1,[rcx]
mov rax,[rsp]
movaps [rax+30],xmm1
xorps xmm1,xmm1
movaps [rcx],xmm1

//movaps xmm1,[rax+30]//
//movaps [rcx+50],xmm1//

@@:


end2:
pop rax
pop rcx
movaps xmm1,[rax+30]
movaps [rcx+50],xmm1
jmp exit2

originalcode2:
movaps xmm0,[rax+20]
movaps [rcx+40],xmm0
movaps xmm1,[rax+30]
movaps [rcx+50],xmm1

exit2:
jmp "ACOdyssey.exe"+ABFA892

///

"ACOdyssey.exe"+ABFA882:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
"ACOdyssey.exe"+ABFA882:
db 0F 28 40 20 0F 29 41 40 0F 28 48 30 0F 29 49 50
//Alt: movaps xmm0,[rax+20]
//Alt: movaps [rcx+40],xmm0
//Alt: movaps xmm1,[rax+30]
//Alt: movaps [rcx+50],xmm1
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4878</ID>
          <Description>"player coord writes"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048,coordsWriteAOB+10) //"ACOdyssey.exe"+ABFA882)
label(originalcode2_egaleteleport)
registersymbol(originalcode2_egaleteleport)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here

readmem(coordsWriteAOB+10,8)
//movaps xmm0,[rax+20]
//movaps [rcx+40],xmm0

push rax
mov rax,pPlayer
cmp [rax+10],rcx
mov rax,[rsp]
jne end2

mov rax,vEagleWaypoint
cmp byte ptr [rax],0
mov rax,[rsp]
jle @f
mov rax,vEagleWaypoint
dec byte ptr [rax]
//movaps xmm1,[rax+30]//
//movaps [rcx+50],xmm1//

@@:

end2:
readmem(coordsWriteAOB+18,8)
//movaps xmm1,[rax+30]
//movaps [rcx+50],xmm1
pop rax
jmp exit2

originalcode2_egaleteleport:
readmem(coordsWriteAOB+10,16)
//movaps xmm0,[rax+20]
//movaps [rcx+40],xmm0
//movaps xmm1,[rax+30]
//movaps [rcx+50],xmm1

exit2:
jmp coordsWriteAOB+20 //"ACOdyssey.exe"+ABFA892

///

coordsWriteAOB+10: //"ACOdyssey.exe"+ABFA882:
jmp newmem2




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
coordsWriteAOB+10: //"ACOdyssey.exe"+ABFA882:
readmem(originalcode2_egaleteleport,16)
//db 0F 28 40 20 0F 29 41 40 0F 28 48 30 0F 29 49 50
//Alt: movaps xmm0,[rax+20]
//Alt: movaps [rcx+40],xmm0
//Alt: movaps xmm1,[rax+30]
//Alt: movaps [rcx+50],xmm1
unregistersymbol(originalcode2_egaleteleport)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4879</ID>
          <Description>"et key listener"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(eagleteleportkeydefault,14)

label(bEndThread_eagleTeleportKey_keylistener_mem)
registersymbol(bEndThread_eagleTeleportKey_keylistener_mem)

label(bEagleTeleportKeyID)
registersymbol(bEagleTeleportKeyID)

alloc(eagleTeleportKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(eagleTeleportKey_keylistener_mem)
createthread(eagleTeleportKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

eagleTeleportKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bEagleTeleportKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bEagleTeleport
mov [rcx],ax
jmp keylistenerend

keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_eagleTeleportKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_eagleTeleportKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_eagleTeleportKey_keylistener_mem:
dd 0
bEagleTeleportKeyID:
dd eagleteleportkeydefault
///



[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_eagleTeleportKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_eagleTeleportKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_eagleTeleportKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_eagleTeleportKey_keylistener_mem:
//dd 1

///********************************************************///
unregistersymbol(bEndThread_eagleTeleportKey_keylistener_mem)

dealloc(eagleTeleportKey_keylistener_mem)
unregistersymbol(eagleTeleportKey_keylistener_mem)

unregistersymbol(bEagleTeleportKeyID)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4889</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(bowDamageBarVisualCalAOB,ACOdyssey.exe,E8 ** ** ** ** 0F 28 ** 48 ** ** ** ** 48 ** ** 74)
registersymbol(bowDamageBarVisualCalAOB)

alloc(newmem2,2048,bowDamageBarVisualCalAOB) //"ACOdyssey.exe"+3361073)
label(originalcode2_onehitkillkey)
registersymbol(originalcode2_onehitkillkey)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
reassemble(bowDamageBarVisualCalAOB)
mov rdx,pPlayer
mov rdx,[rdx+10]
cmp [rsp+b0],rdx
jne @f
mov rdx,bOneHitKill
cmp byte ptr [rdx],1
jne @f
mov edx,3F800000
movd xmm0,edx

@@:
readmem(bowDamageBarVisualCalAOB+5,11)
jmp exit2

originalcode2_onehitkillkey:
readmem(bowDamageBarVisualCalAOB,16)
//call ACOdyssey.exe+33600F0
//movaps xmm6,xmm0
//mov rdx,[rsp+50]
//test rdx,rdx

exit2:
jmp bowDamageBarVisualCalAOB+10 //returnhere2

///

bowDamageBarVisualCalAOB: //"ACOdyssey.exe"+3361073:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
bowDamageBarVisualCalAOB: //"ACOdyssey.exe"+3361073:
readmem(originalcode2_onehitkillkey,16)
//db E8 78 F0 FF FF 0F 28 F0 48 8B 54 24 50 48 85 D2
//Alt: call ACOdyssey.exe+33600F0
//Alt: movaps xmm6,xmm0
//Alt: mov rdx,[rsp+50]
//Alt: test rdx,rdx
unregistersymbol(originalcode2_onehitkillkey)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4890</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(havePetFlagChkForPetHealthRegenAOB,ACOdyssey.exe,40 55 48 ** ** ** 83 ** ** 00 48 ** ** 0F 84)
registersymbol(havePetFlagChkForPetHealthRegenAOB)

alloc(newmem17b,2048,havePetFlagChkForPetHealthRegenAOB) //"ACOdyssey.exe"+2394D50)
label(originalcode17b_enable)
registersymbol(originalcode17b_enable)
label(exit17b)

newmem17b: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(havePetFlagChkForPetHealthRegenAOB,6)

push rax

mov eax,[rcx+38]
test eax,eax
jnz @f
mov rbp,bHavePet
mov [rbp],eax
xor rax,rax
mov rbp,pPet
mov [rbp],rax
mov [rbp+8],rax

@@:
pop rax

readmem(havePetFlagChkForPetHealthRegenAOB+6,4)
readmem(havePetFlagChkForPetHealthRegenAOB+a,3)

reassemble(havePetFlagChkForPetHealthRegenAOB+d)
jmp exit17b

originalcode17b_enable:
readmem(havePetFlagChkForPetHealthRegenAOB,19)
//push rbp
//sub rsp,40
//cmp dword ptr [rcx+38],00
//mov rbp,rcx
//je ACOdyssey.exe+2394EBC

exit17b:
jmp havePetFlagChkForPetHealthRegenAOB+13 //"ACOdyssey.exe"+2394D63

///

havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+2394D50:
jmp newmem17b


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem17b)
havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+2394D50:
readmem(originalcode17b_enable,19)
//db 40 55 48 83 EC 40 83 79 38 00 48 8B E9 0F 84 59 01 00 00
//Alt: push rbp
//Alt: sub rsp,40
//Alt: cmp dword ptr [rcx+38],00
//Alt: mov rbp,rcx
//Alt: je ACOdyssey.exe+2394EBC
unregistersymbol(originalcode17b_enable)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4894</ID>
          <Description>"enable .7"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11

///***********************************************///
aobscanmodule(petHealthRegenCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 0F ** ** ** ** 0F ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(petHealthRegenCallerAOB)

label(bHavePet)
registersymbol(bHavePet)
label(pPet)
registersymbol(pPet)

alloc(newmem17,2048,petHealthRegenCallerAOB+5) //"ACOdyssey.exe"+239845B)
label(originalcode17_enable)
registersymbol(originalcode17_enable)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
mov rsi,bHavePet
mov esi,[rsi]
test esi,esi
jz @f
mov rsi,pPet
mov [rsi],rcx
test rcx,rcx
jz @f
cmp rcx,1
je @f
//mov rdi,[rcx+10]
mov rdi,[rsp+8]
mov [rsi+8],rdi
end17:

originalcode17_enable:
readmem(petHealthRegenCallerAOB+5,15)
//movaps xmm6,[rsp+30]
//movaps xmm7,[rsp+20]
//mov rsi,[rsp+58]

exit17:
jmp petHealthRegenCallerAOB+14 //"ACOdyssey.exe"+239846A

///
bHavePet:
dd 0
pPet:
///

petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
jmp newmem17

///***********************************************///
aobscanmodule(havePetFlagChkForPetHealthRegenAOB,ACOdyssey.exe,40 55 48 ** ** ** 83 ** ** 00 48 ** ** 0F 84)
registersymbol(havePetFlagChkForPetHealthRegenAOB)

alloc(newmem17b,2048,havePetFlagChkForPetHealthRegenAOB) //"ACOdyssey.exe"+2394D50)
label(originalcode17b_enable)
registersymbol(originalcode17b_enable)
label(exit17b)

newmem17b: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(havePetFlagChkForPetHealthRegenAOB,6)

push rax

mov rbp,bHavePet
mov eax,[rcx+38]
mov [rbp],eax
test eax,eax
jnz @f

xor rax,rax
mov rbp,pPet
mov [rbp],rax
mov [rbp+8],rax

@@:
pop rax

readmem(havePetFlagChkForPetHealthRegenAOB+6,4)
readmem(havePetFlagChkForPetHealthRegenAOB+a,3)

//reassemble(havePetFlagChkForPetHealthRegenAOB+d)

jnz @f

push rax
mov rax,havePetFlagChkForPetHealthRegenAOB
xor rbp,rbp
mov ebp,[rax+f]
lea rbp,[rax+rbp+13]
pop rax
jmp rbp

@@:
jmp exit17b

originalcode17b_enable:
readmem(havePetFlagChkForPetHealthRegenAOB,19)
//push rbp
//sub rsp,40
//cmp dword ptr [rcx+38],00
//mov rbp,rcx
//je ACOdyssey.exe+2394EBC

exit17b:
jmp havePetFlagChkForPetHealthRegenAOB+13 //"ACOdyssey.exe"+2394D63

///

havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+2394D50:
jmp newmem17b

///***********************************************///
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB+5) //"ACOdyssey.exe"+212D598)
label(originalcode18_enable)
registersymbol(originalcode18_enable)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
//test
//mov rdi,[rsp+28]//
//mov rdi,[rdi]
//test rdi,rdi
//jz @f
//mov rdi,[rdi+10]
//mov rdi,[rdi+10]
//mov rdi,[rdi+108]
//test rdi,rdi
//jz @f
//

//.2
//mov rdi,[rsp+28]
//mov rdi,[rdi]

//.3 .4 .5 .6 | v1.03
mov rdi,[rsp+70]
//

mov rcx,pPlayer
test rcx,rcx
jz @f
cmp [rcx+8],rdi
je isplayer18
mov rcx,pPet
//mov rcx,[rcx]
//test rcx,rcx
//jz @f
//cmp [rcx+10],rdi
cmp [rcx+8],rdi
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
//cmp byte ptr [rcx],1
//jne notplayerpet18
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18
//cmp ecx,1
//je @f
//cmp ecx,2
//je @f
//jmp notplayerpet18
//je @f
//jmp notplayerpet18
//@@:
//mov byte ptr [rcx],0

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+40],rcx
je @f
cmp [rsp+50],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
readmem(healthCalOnHitAOB+d,7)
//mov eax,r15d
//sub eax,[rsp+20]

//cmp eax,#1
//jge @f
//mov r15d,#1
//add r15d,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d
@@:
jmp end18

//
domaxdamage18:
cmp [rsp+20],r15d
jge @f
mov [rsp+20],r15d
mov [rbx+84],r15d
@@:
jmp end18

//
end18:

originalcode18_enable:
readmem(healthCalOnHitAOB+5,15)
//mov rdi,[rsp+00000098]
//mov eax,r15d
//sub eax,[rsp+20]

exit18:
jmp healthCalOnHitAOB+14 //"ACOdyssey.exe"+212D5A7

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
jmp newmem18

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
dealloc(newmem17)
petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
readmem(originalcode17_enable,15)
//db 0F 28 74 24 30 0F 28 7C 24 20 48 8B 74 24 58
//Alt: movaps xmm6,[rsp+30]
//Alt: movaps xmm7,[rsp+20]
//Alt: mov rsi,[rsp+58]
unregistersymbol(originalcode17_enable)

unregistersymbol(bHavePet)
unregistersymbol(pPet)

///***********************************************///
dealloc(newmem17b)
havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+2394D50:
readmem(originalcode17b_enable,19)
//db 40 55 48 83 EC 40 83 79 38 00 48 8B E9 0F 84 59 01 00 00
//Alt: push rbp
//Alt: sub rsp,40
//Alt: cmp dword ptr [rcx+38],00
//Alt: mov rbp,rcx
//Alt: je ACOdyssey.exe+2394EBC
unregistersymbol(originalcode17b_enable)

///***********************************************///
dealloc(newmem18)
healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
readmem(originalcode18_enable,15)
//db 48 8B BC 24 98 00 00 00 41 8B C7 2B 44 24 20
//Alt: mov rdi,[rsp+00000098]
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
unregistersymbol(originalcode18_enable)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)

///***********************************************///
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4895</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+2180AAC)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayer
cmp [rcx],rdi
jne @f
mov ecx,[rdi+130]
add ecx,esi
test ecx,ecx
jg @f
mov ecx,1
sub ecx,esi
mov [rdi+130],ecx

@@:

originalcode:
mov ecx,[rdi+00000130]
mov ebx,eax
sub ebx,ecx
cmp ebx,esi
cmovle esi,ebx

exit:
jmp "ACOdyssey.exe"+2180ABB

///

"ACOdyssey.exe"+2180AAC:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2180AAC:
db 8B 8F 30 01 00 00 8B D8 2B D9 3B DE 0F 4E F3
//Alt: mov ecx,[rdi+00000130]
//Alt: mov ebx,eax
//Alt: sub ebx,ecx
//Alt: cmp ebx,esi
//Alt: cmovle esi,ebx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4896</ID>
          <Description>"rsi==pPlayer+8"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+22F03AE:
db 90 31 D2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+22F03AE:
db 0F 4E D1
//Alt: cmovle edx,ecx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4899</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>1EB315740</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4900</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>97C7E4FB8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4901</ID>
          <Description>"No description"</Description>
          <VariableType>Float</VariableType>
          <Address>97C7E4FBC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4902</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+1E3E610)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [rsp+30],0
je @f
mov dword ptr [rsp+30],(float)15

originalcode:
mulss xmm0,[rsp+30]
addss xmm1,xmm0
divss xmm1,xmm9

exit:
jmp "ACOdyssey.exe"+1E3E61F

///

"ACOdyssey.exe"+1E3E610:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+1E3E610:
db F3 0F 59 44 24 30 F3 0F 58 C8 F3 41 0F 5E C9
//Alt: mulss xmm0,[rsp+30]
//Alt: addss xmm1,xmm0
//Alt: divss xmm1,xmm9
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4903</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(dCustomHorseMaxSpeed)
registersymbol(dCustomHorseMaxSpeed)

alloc(newmem,2048,"ACOdyssey.exe"+1E3E55E)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [rsp+30],0
je @f
mov rcx,dCustomHorseMaxSpeed
movss xmm2,[rcx]
movss [rsp+30],xmm2

originalcode:
movss xmm2,[rsp+30]
movss [rdi+000003C0],xmm2

exit:
jmp "ACOdyssey.exe"+1E3E56C

///
dCustomHorseMaxSpeed:
dd (float)100
///

"ACOdyssey.exe"+1E3E55E:
jmp newmem




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+1E3E55E:
db F3 0F 10 54 24 30 F3 0F 11 97 C0 03 00 00
//Alt: movss xmm2,[rsp+30]
//Alt: movss [rdi+000003C0],xmm2

unregistersymbol(dCustomHorseMaxSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4904</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>97E783BA8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4905</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>07D9F8F0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4906</ID>
          <Description>"ignore horse speed limit .1"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(cJmpIfNotHouseSpeedLimitedAOB,ACOdyssey.exe,E8 ** ** ** ** 84 ** 74 ** F3 ** ** ** ** ** F3 ** ** ** ** ** 0F 2F ** 76 ** F3 ** ** ** ** ** 49)
registersymbol(cJmpIfNotHouseSpeedLimitedAOB)

cJmpIfNotHouseSpeedLimitedAOB+18: //"ACOdyssey.exe"+1E3DC20:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
cJmpIfNotHouseSpeedLimitedAOB+18: //"ACOdyssey.exe"+1E3DC20:
db 76
//Alt: jna
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4907</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>976E723C0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4910</ID>
          <Description>"movement mod key .2"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(walkkeyiddefault,05)
define(jogkeyiddefault,06)
define(walkspeedmultiplier,(float)0.3)
define(jogspeedmultiplier,(float)0.68)

aobscanmodule(movementSpeedWritesAOB,ACOdyssey.exe,41 ** ** ** ** ** f3 0f 11 ** ** ** ** ** e8)
registersymbol(movementSpeedWritesAOB)

label(bWalkKeyID)
registersymbol(bWalkKeyID)
label(bJogKeyID)
registersymbol(bJogKeyID)
label(bWalkKeyPressed)
registersymbol(bWalkKeyPressed)
label(dWalkSpeedMultiplier)
registersymbol(dWalkSpeedMultiplier)

alloc(newmem,2048,movementSpeedWritesAOB) //"ACOdyssey.exe"+338979D)
label(originalcode_walkkey)
registersymbol(originalcode_walkkey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end:

originalcode_walkkey:
readmem(movementSpeedWritesAOB,14)
//mov r8d,0000002B
//movss [rbx+000002B0],xmm0

exit:
jmp movementSpeedWritesAOB+e //"ACOdyssey.exe"+33897AB

///
bWalkKeyID:
dd walkkeyiddefault
bJogKeyID:
dd jogkeyiddefault
bWalkKeyPressed:
dd 0
dWalkSpeedMultiplier:
dd walkspeedmultiplier
dd walkspeedmultiplier
dd jogspeedmultiplier
///

movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
jmp newmem

///********************************************************///
aobscanmodule(horseMovementSpeedWritesAOB,ACOdyssey.exe,41 ** E0 ** ** ** F3 0F 11 ** ** ** ** ** E8)
registersymbol(horseMovementSpeedWritesAOB)

alloc(newmem2,2048,horseMovementSpeedWritesAOB) //"ACOdyssey.exe"+33FAE07)
label(originalcode2_walkkey)
registersymbol(originalcode2_walkkey)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end2

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end2:

originalcode2_walkkey:
readmem(horseMovementSpeedWritesAOB,14)
//mov r8d,000000E0
//movss [rbx+000002E0],xmm0

exit2:
jmp horseMovementSpeedWritesAOB+e //"ACOdyssey.exe"+33FAE15

///

horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
jmp newmem2

///********************************************************///
aobscanmodule(movementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 48)
registersymbol(movementSpeedWritesInAutoMoveAOB)

alloc(newmem6,2048,movementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB0FC)
label(originalcode6_walkkey)
registersymbol(originalcode6_walkkey)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2b0],3F800000
//movdqa [rbx+2a0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end6
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(movementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2b0],ecx

end6:
jmp exit6

originalcode6_walkkey:
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002B0],3F800000
//movdqa [rbx+000002A0],xmm2

exit6:
jmp movementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB10E

///

movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
jmp newmem6

///********************************************************///
aobscanmodule(horseMovementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 41)
registersymbol(horseMovementSpeedWritesInAutoMoveAOB)

alloc(newmem11,2048,horseMovementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB18E)
label(originalcode11_walkkey)
registersymbol(originalcode11_walkkey)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2e0],3F800000
//movdqa [rbx+2d0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end11
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(horseMovementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2e0],ecx

end11:
jmp exit11


originalcode11_walkkey:
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002E0],3F800000
//movdqa [rbx+000002D0],xmm2

exit11:
jmp horseMovementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB1A0

///

horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
jmp newmem11

///********************************************************///
label(bEndThread_walkKey_keylistener_mem)
registersymbol(bEndThread_walkKey_keylistener_mem)

alloc(walkKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(walkKey_keylistener_mem)
createthread(walkKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

walkKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bWalkKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+4]
mov [rcx],eax
jmp keylistenerend

@@:
mov rcx,bJogKeyID
mov rcx,[rcx]
//mov rcx,06 //X2 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+8]
mov [rcx],eax
jmp keylistenerend



keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_walkKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_walkKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_walkKey_keylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_walkKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_walkKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_walkKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_walkKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
readmem(originalcode_walkkey,14)
//db 41 B8 2B 00 00 00 F3 0F 11 83 B0 02 00 00
//Alt: mov r8d,0000002B
//Alt: movss [rbx+000002B0],xmm0
unregistersymbol(originalcode_walkkey)

unregistersymbol(bWalkKeyID)
unregistersymbol(bJogKeyID)
unregistersymbol(bWalkKeyPressed)
unregistersymbol(dWalkSpeedMultiplier)

///********************************************************///
dealloc(newmem2)
horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
readmem(originalcode2_walkkey,14)
//db 41 B8 E0 00 00 00 F3 0F 11 83 E0 02 00 00
//Alt: mov r8d,000000E0
//Alt: movss [rbx+000002E0],xmm0
unregistersymbol(originalcode2_walkkey)

///********************************************************///
dealloc(newmem6)
movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
readmem(originalcode6_walkkey,18)
//db C7 83 B0 02 00 00 00 00 80 3F 66 0F 7F 93 A0 02 00 00
//Alt: mov [rbx+000002B0],3F800000
//Alt: movdqa [rbx+000002A0],xmm2
unregistersymbol(originalcode6_walkkey)

///********************************************************///
dealloc(newmem11)
horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
readmem(originalcode11_walkkey,18)
//db C7 83 E0 02 00 00 00 00 80 3F 66 0F 7F 93 D0 02 00 00
//Alt: mov [rbx+000002E0],3F800000
//Alt: movdqa [rbx+000002D0],xmm2
unregistersymbol(originalcode11_walkkey)

///********************************************************///
unregistersymbol(bEndThread_walkKey_keylistener_mem)

dealloc(walkKey_keylistener_mem)
unregistersymbol(walkKey_keylistener_mem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4911</ID>
              <Description>"walk key"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bWalkKeyID</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4912</ID>
                  <Description>"speed"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dWalkSpeedMultiplier+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4913</ID>
              <Description>"jogging key"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bJogKeyID</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4914</ID>
                  <Description>"speed"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dWalkSpeedMultiplier+8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4915</ID>
          <Description>"ignore horse speed limit .2"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(cJmpIfNoHouseSpeedLimitedChkNeededAOB,ACOdyssey.exe,E8 ** ** ** ** 84 ** 74 ** F3 ** ** ** ** ** F3 ** ** ** ** ** 0F 2F ** 76 ** F3 ** ** ** ** ** 49)
registersymbol(cJmpIfNoHouseSpeedLimitedChkNeededAOB)

cJmpIfNoHouseSpeedLimitedChkNeededAOB+7: //"ACOdyssey.exe"+1E3DC0F:
db EB


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
cJmpIfNoHouseSpeedLimitedChkNeededAOB+7: //"ACOdyssey.exe"+1E3DC0F:
db 74
//Alt: je

/*
ACOdyssey.exe+1E3DB87 - 42 89 04 31           - mov [rcx+r14],eax
ACOdyssey.exe+1E3DB8B - B8 10000000           - mov eax,00000010 { 16 }
ACOdyssey.exe+1E3DB90 - 42 8B 0C 30           - mov ecx,[rax+r14]
ACOdyssey.exe+1E3DB94 - 39 4B 5C              - cmp [rbx+5C],ecx
ACOdyssey.exe+1E3DB97 - 75 37                 - jne ACOdyssey.exe+1E3DBD0
ACOdyssey.exe+1E3DB99 - F0 FF 43 58           - lock inc [rbx+58]
ACOdyssey.exe+1E3DB9D - 49 8B 87 A0010000     - mov rax,[r15+000001A0]
ACOdyssey.exe+1E3DBA4 - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+1E3DBA7 - 48 8B 4B 50           - mov rcx,[rbx+50]
ACOdyssey.exe+1E3DBAB - 48 8B 50 10           - mov rdx,[rax+10]
ACOdyssey.exe+1E3DBAF - E8 1CD2AFFE           - call ACOdyssey.exe+93ADD0
ACOdyssey.exe+1E3DBB4 - 48 85 C0              - test rax,rax
ACOdyssey.exe+1E3DBB7 - 0F95 C0               - setne al
ACOdyssey.exe+1E3DBBA - F0 FF 4B 58           - lock dec [rbx+58]
ACOdyssey.exe+1E3DBBE - 84 C0                 - test al,al
ACOdyssey.exe+1E3DBC0 - 74 33                 - je ACOdyssey.exe+1E3DBF5
ACOdyssey.exe+1E3DBC2 - B8 01000000           - mov eax,00000001 { 1 }
ACOdyssey.exe+1E3DBC7 - EB 2E                 - jmp ACOdyssey.exe+1E3DBF7
ACOdyssey.exe+1E3DBC9 - 0F1F 80 00000000      - nop [rax+00000000]
ACOdyssey.exe+1E3DBD0 - 8B 43 58              - mov eax,[rbx+58]
ACOdyssey.exe+1E3DBD3 - A9 0000F07F           - test eax,7FF00000 { 2146435072 }
ACOdyssey.exe+1E3DBD8 - 75 17                 - jne ACOdyssey.exe+1E3DBF1
ACOdyssey.exe+1E3DBDA - B8 01000000           - mov eax,00000001 { 1 }
ACOdyssey.exe+1E3DBDF - F0 0FC1 43 58         - lock xadd [rbx+58],eax
ACOdyssey.exe+1E3DBE4 - FF C0                 - inc eax
ACOdyssey.exe+1E3DBE6 - A9 0000F07F           - test eax,7FF00000 { 2146435072 }
ACOdyssey.exe+1E3DBEB - 74 B0                 - je ACOdyssey.exe+1E3DB9D
ACOdyssey.exe+1E3DBED - F0 FF 4B 58           - lock dec [rbx+58]
ACOdyssey.exe+1E3DBF1 - F3 90                 - repe nop
ACOdyssey.exe+1E3DBF3 - EB DB                 - jmp ACOdyssey.exe+1E3DBD0
ACOdyssey.exe+1E3DBF5 - 33 C0                 - xor eax,eax
ACOdyssey.exe+1E3DBF7 - 48 8B 4C 24 48        - mov rcx,[rsp+48]
ACOdyssey.exe+1E3DBFC - 48 8D 54 24 40        - lea rdx,[rsp+40]
ACOdyssey.exe+1E3DC01 - 44 0FB6 C8            - movzx r9d,al
ACOdyssey.exe+1E3DC05 - 4D 8B C7              - mov r8,r15
cJmpIfNotHouseSpeedLimitedAOB- E8 A36FFDFF           - call ACOdyssey.exe+1E14BB0
ACOdyssey.exe+1E3DC0D - 84 C0                 - test al,al
ACOdyssey.exe+1E3DC0F - 74 17                 - je ACOdyssey.exe+1E3DC28
ACOdyssey.exe+1E3DC11 - F3 0F10 4C 24 40      - movss xmm1,[rsp+40]
ACOdyssey.exe+1E3DC17 - F3 0F10 44 24 30      - movss xmm0,[rsp+30]
ACOdyssey.exe+1E3DC1D - 0F2F C1               - comiss xmm0,xmm1
ACOdyssey.exe+1E3DC20 - 76 06                 - jna ACOdyssey.exe+1E3DC28
ACOdyssey.exe+1E3DC22 - F3 0F11 4C 24 30      - movss [rsp+30],xmm1
ACOdyssey.exe+1E3DC28 - 49 8B CF              - mov rcx,r15
ACOdyssey.exe+1E3DC2B - E8 00127300           - call ACOdyssey.exe+256EE30
ACOdyssey.exe+1E3DC30 - 48 8B D8              - mov rbx,rax
ACOdyssey.exe+1E3DC33 - 48 85 C0              - test rax,rax
ACOdyssey.exe+1E3DC36 - 0F84 9B000000         - je ACOdyssey.exe+1E3DCD7
ACOdyssey.exe+1E3DC3C - 4D 85 FF              - test r15,r15
ACOdyssey.exe+1E3DC3F - 0F84 92000000         - je ACOdyssey.exe+1E3DCD7
ACOdyssey.exe+1E3DC45 - 65 48 8B 0C 25 58000000  - mov rcx,gs:[00000058] { 88 }
ACOdyssey.exe+1E3DC4E - B8 14000000           - mov eax,00000014 { 20 }
ACOdyssey.exe+1E3DC53 - 4E 8B 34 E9           - mov r14,[rcx+r13*8]
ACOdyssey.exe+1E3DC57 - 8B C8                 - mov ecx,eax
ACOdyssey.exe+1E3DC59 - 42 8B 04 30           - mov eax,[rax+r14]
ACOdyssey.exe+1E3DC5D - A8 01                 - test al,01 { 1 }
ACOdyssey.exe+1E3DC5F - 75 15                 - jne ACOdyssey.exe+1E3DC76
ACOdyssey.exe+1E3DC61 - 83 C8 01              - or eax,01 { 1 }
ACOdyssey.exe+1E3DC64 - 42 89 04 31           - mov [rcx+r14],eax
ACOdyssey.exe+1E3DC68 - E8 C38E96FE           - call ACOdyssey.exe+7A6B30
ACOdyssey.exe+1E3DC6D - B9 10000000           - mov ecx,00000010 { 16 }
ACOdyssey.exe+1E3DC72 - 42 89 04 31           - mov [rcx+r14],eax
ACOdyssey.exe+1E3DC76 - B8 10000000           - mov eax,00000010 { 16 }
ACOdyssey.exe+1E3DC7B - 42 8B 0C 30           - mov ecx,[rax+r14]
ACOdyssey.exe+1E3DC7F - 39 4B 5C              - cmp [rbx+5C],ecx
ACOdyssey.exe+1E3DC82 - 75 2E                 - jne ACOdyssey.exe+1E3DCB2
ACOdyssey.exe+1E3DC84 - F0 FF 43 58           - lock inc [rbx+58]
ACOdyssey.exe+1E3DC88 - 49 8B 87 A0010000     - mov rax,[r15+000001A0]
ACOdyssey.exe+1E3DC8F - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+1E3DC92 - 48 8B 4B 50           - mov rcx,[rbx+50]
ACOdyssey.exe+1E3DC96 - 48 8B 50 10           - mov rdx,[rax+10]
ACOdyssey.exe+1E3DC9A - E8 31D1AFFE           - call ACOdyssey.exe+93ADD0
ACOdyssey.exe+1E3DC9F - 48 85 C0              - test rax,rax
*/
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4916</ID>
          <Description>"movement mod key .3"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(walkkeyiddefault,05)
define(jogkeyiddefault,06)
define(walkspeedmultiplier,(float)0.3)
define(jogspeedmultiplier,(float)0.68)

aobscanmodule(movementSpeedWritesAOB,ACOdyssey.exe,41 ** ** ** ** ** f3 0f 11 ** ** ** ** ** e8)
registersymbol(movementSpeedWritesAOB)

label(bWalkKeyID)
registersymbol(bWalkKeyID)
label(bJogKeyID)
registersymbol(bJogKeyID)
label(bWalkKeyPressed)
registersymbol(bWalkKeyPressed)
label(dWalkSpeedMultiplier)
registersymbol(dWalkSpeedMultiplier)

alloc(newmem,2048,movementSpeedWritesAOB) //"ACOdyssey.exe"+338979D)
label(originalcode_walkkey)
registersymbol(originalcode_walkkey)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end:

originalcode_walkkey:
readmem(movementSpeedWritesAOB,14)
//mov r8d,0000002B
//movss [rbx+000002B0],xmm0

exit:
jmp movementSpeedWritesAOB+e //"ACOdyssey.exe"+33897AB

///
bWalkKeyID:
dd walkkeyiddefault
bJogKeyID:
dd jogkeyiddefault
bWalkKeyPressed:
dd 0
dWalkSpeedMultiplier:
dd walkspeedmultiplier
dd walkspeedmultiplier
dd jogspeedmultiplier
///

movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
jmp newmem

///********************************************************///
/*
aobscanmodule(horseMovementSpeedWritesAOB,ACOdyssey.exe,41 ** E0 ** ** ** F3 0F 11 ** ** ** ** ** E8)
registersymbol(horseMovementSpeedWritesAOB)

alloc(newmem2,2048,horseMovementSpeedWritesAOB) //"ACOdyssey.exe"+33FAE07)
label(originalcode2_walkkey)
registersymbol(originalcode2_walkkey)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov r8,bWalkKeyPressed
cmp byte ptr [r8],1
jne end2

sub rsp,10
movdqu dqword [rsp],xmm1

xorps xmm1,xmm1
comiss xmm0,xmm1
je @f

mov r8,dWalkSpeedMultiplier
movss xmm0,[r8]

@@:
movdqu xmm1,dqword [rsp]
add rsp,10

end2:

originalcode2_walkkey:
readmem(horseMovementSpeedWritesAOB,14)
//mov r8d,000000E0
//movss [rbx+000002E0],xmm0

exit2:
jmp horseMovementSpeedWritesAOB+e //"ACOdyssey.exe"+33FAE15

///

horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
jmp newmem2

///********************************************************///
aobscanmodule(movementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 48)
registersymbol(movementSpeedWritesInAutoMoveAOB)

alloc(newmem6,2048,movementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB0FC)
label(originalcode6_walkkey)
registersymbol(originalcode6_walkkey)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2b0],3F800000
//movdqa [rbx+2a0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end6
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(movementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2b0],ecx

end6:
jmp exit6

originalcode6_walkkey:
readmem(movementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002B0],3F800000
//movdqa [rbx+000002A0],xmm2

exit6:
jmp movementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB10E

///

movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
jmp newmem6

///********************************************************///
/*
aobscanmodule(horseMovementSpeedWritesInAutoMoveAOB,ACOdyssey.exe,C7 ** ** ** ** ** 00 00 80 3F 66 ** ** ** ** ** ** ** 48 ** ** ** ** ** ** E8 ** ** ** ** C7 ** ** ** ** ** ** ** ** ** 41)
registersymbol(horseMovementSpeedWritesInAutoMoveAOB)

alloc(newmem11,2048,horseMovementSpeedWritesInAutoMoveAOB) //"ACOdyssey.exe"+33FB18E)
label(originalcode11_walkkey)
registersymbol(originalcode11_walkkey)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+2e0],3F800000
//movdqa [rbx+2d0],xmm2

mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne end11
mov rcx,dWalkSpeedMultiplier
mov ecx,[rcx]
db 89 8B
readmem(horseMovementSpeedWritesInAutoMoveAOB+2,4)
//mov [rbx+2e0],ecx

end11:
jmp exit11


originalcode11_walkkey:
readmem(horseMovementSpeedWritesInAutoMoveAOB,18)
//mov [rbx+000002E0],3F800000
//movdqa [rbx+000002D0],xmm2

exit11:
jmp horseMovementSpeedWritesInAutoMoveAOB+12 //"ACOdyssey.exe"+33FB1A0

///

horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
jmp newmem11

///********************************************************///
alloc(newmem17,2048,cJmpIfNoHouseSpeedLimitedChkNeededAOB-13) //"ACOdyssey.exe"+1E3DBF5)
label(originalcode17_walkkey)
registersymbol(originalcode17_walkkey)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,bWalkKeyPressed
cmp byte ptr [rcx],1
jne @f
mov eax,(float)12
movd xmm1,eax
comiss xmm1,[rsp+30]
jbe @f
mov eax,(float)15
mov rcx,dWalkSpeedMultiplier
movd xmm1,eax
mulss xmm1,[rcx]
comiss xmm1,[rsp+30]
jae @f
movss [rsp+30],xmm1
//mov eax,(float)15
//movd xmm1,eax
//comiss xmm1,[rsp+30]
//jne @f
//mov rcx,dWalkSpeedMultiplier
//mulss xmm1,[rcx]
//movss [rsp+30],xmm1

originalcode17_walkkey:
readmem(cJmpIfNoHouseSpeedLimitedChkNeededAOB-13,16)
//xor eax,eax
//mov rcx,[rsp+48]
//lea rdx,[rsp+40]
//movzx r9d,al

exit17:
jmp cJmpIfNoHouseSpeedLimitedChkNeededAOB-3 //"ACOdyssey.exe"+1E3DC05

///

cJmpIfNoHouseSpeedLimitedChkNeededAOB-13: //"ACOdyssey.exe"+1E3DBF5:
jmp newmem17

///********************************************************///
label(bEndThread_walkKey_keylistener_mem)
registersymbol(bEndThread_walkKey_keylistener_mem)

alloc(walkKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(walkKey_keylistener_mem)
createthread(walkKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

walkKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bWalkKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+4]
mov [rcx],eax
jmp keylistenerend

@@:
mov rcx,bJogKeyID
mov rcx,[rcx]
//mov rcx,06 //X2 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bWalkKeyPressed
mov [rcx],ax
test ax,ax
jz @f
mov rcx,dWalkSpeedMultiplier
mov eax,[rcx+8]
mov [rcx],eax
jmp keylistenerend



keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_walkKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_walkKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_walkKey_keylistener_mem:
dd 0
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_walkKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_walkKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_walkKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_walkKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
movementSpeedWritesAOB: //"ACOdyssey.exe"+338979D:
readmem(originalcode_walkkey,14)
//db 41 B8 2B 00 00 00 F3 0F 11 83 B0 02 00 00
//Alt: mov r8d,0000002B
//Alt: movss [rbx+000002B0],xmm0
unregistersymbol(originalcode_walkkey)

unregistersymbol(bWalkKeyID)
unregistersymbol(bJogKeyID)
unregistersymbol(bWalkKeyPressed)
unregistersymbol(dWalkSpeedMultiplier)

///********************************************************///
/*
dealloc(newmem2)
horseMovementSpeedWritesAOB: //"ACOdyssey.exe"+33FAE07:
readmem(originalcode2_walkkey,14)
//db 41 B8 E0 00 00 00 F3 0F 11 83 E0 02 00 00
//Alt: mov r8d,000000E0
//Alt: movss [rbx+000002E0],xmm0
unregistersymbol(originalcode2_walkkey)

///********************************************************///
dealloc(newmem6)
movementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB0FC:
readmem(originalcode6_walkkey,18)
//db C7 83 B0 02 00 00 00 00 80 3F 66 0F 7F 93 A0 02 00 00
//Alt: mov [rbx+000002B0],3F800000
//Alt: movdqa [rbx+000002A0],xmm2
unregistersymbol(originalcode6_walkkey)

///********************************************************///
/*
dealloc(newmem11)
horseMovementSpeedWritesInAutoMoveAOB: //"ACOdyssey.exe"+33FB18E:
readmem(originalcode11_walkkey,18)
//db C7 83 E0 02 00 00 00 00 80 3F 66 0F 7F 93 D0 02 00 00
//Alt: mov [rbx+000002E0],3F800000
//Alt: movdqa [rbx+000002D0],xmm2
unregistersymbol(originalcode11_walkkey)

///********************************************************///
dealloc(newmem17)
cJmpIfNoHouseSpeedLimitedChkNeededAOB-13: //"ACOdyssey.exe"+1E3DBF5:
readmem(originalcode17_walkkey,16)
//db 33 C0 48 8B 4C 24 48 48 8D 54 24 40 44 0F B6 C8
//Alt: xor eax,eax
//Alt: mov rcx,[rsp+48]
//Alt: lea rdx,[rsp+40]
//Alt: movzx r9d,al
unregistersymbol(originalcode17_walkkey)

///********************************************************///
unregistersymbol(bEndThread_walkKey_keylistener_mem)

dealloc(walkKey_keylistener_mem)
unregistersymbol(walkKey_keylistener_mem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4917</ID>
              <Description>"walk key"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bWalkKeyID</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4918</ID>
                  <Description>"speed"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dWalkSpeedMultiplier+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4919</ID>
              <Description>"jogging key"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">10:SHIFT key
11:CTRL key
12:ALT key
14:CAPS LOCK key
04:Middle Mouse Button
05:X1 Mouse Button
06:X2 Moust Button
</DropDownList>
              <ShowAsHex>1</ShowAsHex>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bJogKeyID</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>4920</ID>
                  <Description>"speed"</Description>
                  <Color>008000</Color>
                  <VariableType>Float</VariableType>
                  <Address>dWalkSpeedMultiplier+8</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>96</Key>
                        <Key>105</Key>
                      </Keys>
                      <Value>0.68</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>96</Key>
                        <Key>104</Key>
                      </Keys>
                      <Value>0.55</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4921</ID>
          <Description>"ignore ship health .2"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(shipHealthCalOnChangeAOB,ACOdyssey.exe,41 ** ** ** ** ** ** 44 ** ** 68 44 ** ** 7C 41)
registersymbol(shipHealthCalOnChangeAOB)

alloc(newmem2,2048,shipHealthCalOnChangeAOB+7) //"ACOdyssey.exe"+2E5F822)
label(originalcode2_shipundead)
registersymbol(originalcode2_shipundead)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(shipHealthCalOnChangeAOB+7,8)
//mov r12d,[rbp+68]
//sub r12d,[rbp+7C]

mov rcx,pPlayerShipHealthBase
mov rcx,[rcx]

db 49 8D
readmem(shipHealthCalOnChangeAOB+2,5)
//lea rax,[r15+130]

cmp [rax+20],rcx
jne @f

test r12d,r12d
jg @f
mov r12d,1

@@:
readmem(shipHealthCalOnChangeAOB+f,7)
//mov eax,[r14+00000090]
jmp exit2

originalcode2_shipundead:
readmem(shipHealthCalOnChangeAOB+7,15)
//mov r12d,[rbp+68]
//sub r12d,[rbp+7C]
//mov eax,[r14+00000090]

exit2:
jmp shipHealthCalOnChangeAOB+16 //"ACOdyssey.exe"+2E5F831

///

shipHealthCalOnChangeAOB+7: //"ACOdyssey.exe"+2E5F822:
jmp newmem2




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
shipHealthCalOnChangeAOB+7: //"ACOdyssey.exe"+2E5F822:
readmem(originalcode2_shipundead,15)
//db 44 8B 65 68 44 2B 65 7C 41 8B 86 90 00 00 00
//Alt: mov r12d,[rbp+68]
//Alt: sub r12d,[rbp+7C]
//Alt: mov eax,[r14+00000090]
unregistersymbol(originalcode2_shipundead)

/*
ACOdyssey.exe+2E5F789 - 8B 54 24 30           - mov edx,[rsp+30]
ACOdyssey.exe+2E5F78D - E8 EE390000           - call ACOdyssey.exe+2E63180
ACOdyssey.exe+2E5F792 - F3 0F11 45 64         - movss [rbp+64],xmm0
ACOdyssey.exe+2E5F797 - 49 8D 8F 40010000     - lea rcx,[r15+00000140]
ACOdyssey.exe+2E5F79E - 41 83 CC FF           - or r12d,-01 { 255 }
ACOdyssey.exe+2E5F7A2 - E8 792AFAFF           - call ACOdyssey.exe+2E02220
ACOdyssey.exe+2E5F7A7 - 49 8D 4E 50           - lea rcx,[r14+50]
ACOdyssey.exe+2E5F7AB - 48 89 44 24 28        - mov [rsp+28],rax
ACOdyssey.exe+2E5F7B0 - E8 6B2AFAFF           - call ACOdyssey.exe+2E02220
ACOdyssey.exe+2E5F7B5 - 4C 8B E8              - mov r13,rax
ACOdyssey.exe+2E5F7B8 - 48 8B 44 24 28        - mov rax,[rsp+28]
ACOdyssey.exe+2E5F7BD - 48 85 C0              - test rax,rax
ACOdyssey.exe+2E5F7C0 - 74 45                 - je ACOdyssey.exe+2E5F807
ACOdyssey.exe+2E5F7C2 - 4D 85 ED              - test r13,r13
ACOdyssey.exe+2E5F7C5 - 74 40                 - je ACOdyssey.exe+2E5F807
ACOdyssey.exe+2E5F7C7 - 41 8B 8E 90000000     - mov ecx,[r14+00000090]
ACOdyssey.exe+2E5F7CE - 83 F9 04              - cmp ecx,04 { 4 }
ACOdyssey.exe+2E5F7D1 - 74 21                 - je ACOdyssey.exe+2E5F7F4
ACOdyssey.exe+2E5F7D3 - 83 F9 0D              - cmp ecx,0D { 13 }
ACOdyssey.exe+2E5F7D6 - 74 13                 - je ACOdyssey.exe+2E5F7EB
ACOdyssey.exe+2E5F7D8 - 83 F9 1A              - cmp ecx,1A { 26 }
ACOdyssey.exe+2E5F7DB - 74 05                 - je ACOdyssey.exe+2E5F7E2
ACOdyssey.exe+2E5F7DD - 83 F9 21              - cmp ecx,21 { 33 }
ACOdyssey.exe+2E5F7E0 - 75 25                 - jne ACOdyssey.exe+2E5F807
ACOdyssey.exe+2E5F7E2 - 45 8B A5 1C020000     - mov r12d,[r13+0000021C]
ACOdyssey.exe+2E5F7E9 - EB 1C                 - jmp ACOdyssey.exe+2E5F807
ACOdyssey.exe+2E5F7EB - 44 8B A0 10010000     - mov r12d,[rax+00000110]
ACOdyssey.exe+2E5F7F2 - EB 13                 - jmp ACOdyssey.exe+2E5F807
ACOdyssey.exe+2E5F7F4 - 41 8B 96 94000000     - mov edx,[r14+00000094]
ACOdyssey.exe+2E5F7FB - 49 8B CD              - mov rcx,r13
ACOdyssey.exe+2E5F7FE - E8 0D850000           - call ACOdyssey.exe+2E67D10
ACOdyssey.exe+2E5F803 - 44 8B 60 14           - mov r12d,[rax+14]
ACOdyssey.exe+2E5F807 - 44 89 A5 80000000     - mov [rbp+00000080],r12d
ACOdyssey.exe+2E5F80E - 40 38 B4 24 C0000000  - cmp [rsp+000000C0],sil
ACOdyssey.exe+2E5F816 - 74 0A                 - je ACOdyssey.exe+2E5F822
ACOdyssey.exe+2E5F818 - 8B 45 7C              - mov eax,[rbp+7C]
aob&gt; ACOdyssey.exe+2E5F81B - 41 01 87 30010000     - add [r15+00000130],eax
inj&gt; ACOdyssey.exe+2E5F822 - 44 8B 65 68           - mov r12d,[rbp+68]
ACOdyssey.exe+2E5F826 - 44 2B 65 7C           - sub r12d,[rbp+7C]
ACOdyssey.exe+2E5F82A - 41 8B 86 90000000     - mov eax,[r14+00000090]
ACOdyssey.exe+2E5F831 - 89 84 24 D0000000     - mov [rsp+000000D0],eax
ACOdyssey.exe+2E5F838 - 45 85 E4              - test r12d,r12d
ACOdyssey.exe+2E5F83B - 7F 40                 - jg ACOdyssey.exe+2E5F87D
ACOdyssey.exe+2E5F83D - 49 8B 87 40010000     - mov rax,[r15+00000140]
ACOdyssey.exe+2E5F844 - 48 8B 48 08           - mov rcx,[rax+08]
ACOdyssey.exe+2E5F848 - 48 C1 E1 20           - shl rcx,20 { 32 }
ACOdyssey.exe+2E5F84C - 48 C1 F9 3F           - sar rcx,3F { 63 }
ACOdyssey.exe+2E5F850 - 48 23 08              - and rcx,[rax]
ACOdyssey.exe+2E5F853 - 74 09                 - je ACOdyssey.exe+2E5F85E
ACOdyssey.exe+2E5F855 - 48 39 71 18           - cmp [rcx+18],rsi
ACOdyssey.exe+2E5F859 - 75 03                 - jne ACOdyssey.exe+2E5F85E
ACOdyssey.exe+2E5F85B - 48 8B CE              - mov rcx,rsi
ACOdyssey.exe+2E5F85E - E8 AD139EFF           - call ACOdyssey.exe+2840C10
ACOdyssey.exe+2E5F863 - 84 C0                 - test al,al
ACOdyssey.exe+2E5F865 - 75 12                 - jne ACOdyssey.exe+2E5F879
ACOdyssey.exe+2E5F867 - 83 BC 24 D0000000 1A  - cmp dword ptr [rsp+000000D0],1A { 26 }
ACOdyssey.exe+2E5F86F - 74 08                 - je ACOdyssey.exe+2E5F879
ACOdyssey.exe+2E5F871 - 41 BC 01000000        - mov r12d,00000001 { 1 }
ACOdyssey.exe+2E5F877 - EB 04                 - jmp ACOdyssey.exe+2E5F87D
ACOdyssey.exe+2E5F879 - 41 83 CC FF           - or r12d,-01 { 255 }
ACOdyssey.exe+2E5F87D - 0FB7 85 9C000000      - movzx eax,word ptr [rbp+0000009C]
ACOdyssey.exe+2E5F884 - 8B CE                 - mov ecx,esi
&gt;&gt;&gt;&gt; ACOdyssey.exe+2E5F886 - BA FEFF0000           - mov edx,0000FFFE { 65534 }
ACOdyssey.exe+2E5F88B - 44 89 65 6C           - mov [rbp+6C],r12d
ACOdyssey.exe+2E5F88F - 45 85 E4              - test r12d,r12d
ACOdyssey.exe+2E5F892 - 0F9F C1               - setg cl
ACOdyssey.exe+2E5F895 - 66 23 C2              - and ax,dx
ACOdyssey.exe+2E5F898 - 66 0B C8              - or cx,ax
&gt;&gt;&gt;&gt; ACOdyssey.exe+2E5F89B - BA FDFF0000           - mov edx,0000FFFD { 65533 }
ACOdyssey.exe+2E5F8A0 - 66 23 CA              - and cx,dx
ACOdyssey.exe+2E5F8A3 - 41 8B C4              - mov eax,r12d
ACOdyssey.exe+2E5F8A6 - C1 E8 1F              - shr eax,1F { 31 }
ACOdyssey.exe+2E5F8A9 - 66 03 C0              - add ax,ax
ACOdyssey.exe+2E5F8AC - 66 0B C1              - or ax,cx
ACOdyssey.exe+2E5F8AF - 66 89 85 9C000000     - mov [rbp+0000009C],ax
ACOdyssey.exe+2E5F8B6 - 49 8B 8F 50010000     - mov rcx,[r15+00000150]
ACOdyssey.exe+2E5F8BD - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+2E5F8C0 - FF 50 20              - call qword ptr [rax+20]
ACOdyssey.exe+2E5F8C3 - 85 C0                 - test eax,eax
ACOdyssey.exe+2E5F8C5 - 7E 22                 - jle ACOdyssey.exe+2E5F8E9
ACOdyssey.exe+2E5F8C7 - 49 8B 8F 50010000     - mov rcx,[r15+00000150]
ACOdyssey.exe+2E5F8CE - 66 41 0F6E F4         - movd xmm6,r12d
ACOdyssey.exe+2E5F8D3 - 0F5B F6               - cvtdq2ps xmm6,xmm6
ACOdyssey.exe+2E5F8D6 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+2E5F8D9 - FF 50 20              - call qword ptr [rax+20]
ACOdyssey.exe+2E5F8DC - 66 0F6E C0            - movd xmm0,eax
ACOdyssey.exe+2E5F8E0 - 0F5B C0               - cvtdq2ps xmm0,xmm0
ACOdyssey.exe+2E5F8E3 - F3 0F5E F0            - divss xmm6,xmm0
*/
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4586</ID>
          <Description>"ignore ship health .3"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(shipHealthCalOnChangeAOB,ACOdyssey.exe,41 ** ** ** ** 00 00 8B ** ** 2B ** ** 41)
registersymbol(shipHealthCalOnChangeAOB)

alloc(newmem2,2048,"ACOdyssey.exe"+2EE9F44)
label(originalcode2_shipundead)
registersymbol(originalcode2_shipundead)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(shipHealthCalOnChangeAOB+7,6)
//mov esi,[rbp+68]
//sub esi,[rbp+7C]

mov ecx,be545
cmp [rbp+68],ecx
jne @f

mov rcx,pPlayerShipHealthBase
mov rcx,[rcx]

lea rax,[r15+140]

cmp [rax+20],rcx
jne @f

test esi,esi
jg @f
mov esi,1

@@:
readmem(shipHealthCalOnChangeAOB+d,14)
jmp exit2

originalcode2_shipundead:
readmem(shipHealthCalOnChangeAOB+7,20)
//mov esi,[rbp+68]
//sub esi,[rbp+7C]
//mov eax,[r15+00000090]
//mov [rsp+000000E0],eax

exit2:
jmp shipHealthCalOnChangeAOB+1b //"ACOdyssey.exe"+2EE9F58

///

shipHealthCalOnChangeAOB+7: //"ACOdyssey.exe"+2EE9F44:
jmp newmem2




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
shipHealthCalOnChangeAOB+7: //"ACOdyssey.exe"+2EE9F44:
readmem(originalcode2_shipundead,20)
//db 8B 75 68 2B 75 7C 41 8B 87 90 00 00 00 89 84 24 E0 00 00 00
//Alt: mov esi,[rbp+68]
//Alt: sub esi,[rbp+7C]
//Alt: mov eax,[r15+00000090]
//Alt: mov [rsp+000000E0],eax

/*
ACOdyssey.exe+2EE9EB3 - F3 0F11 45 64         - movss [rbp+64],xmm0
ACOdyssey.exe+2EE9EB8 - 49 8D 8E 50010000     - lea rcx,[r14+00000150]
ACOdyssey.exe+2EE9EBF - 83 CE FF              - or esi,-01 { 255 }
ACOdyssey.exe+2EE9EC2 - E8 E9CCF9FF           - call ACOdyssey.exe+2E86BB0
ACOdyssey.exe+2EE9EC7 - 49 8D 4F 50           - lea rcx,[r15+50]
ACOdyssey.exe+2EE9ECB - 48 89 44 24 28        - mov [rsp+28],rax
ACOdyssey.exe+2EE9ED0 - E8 DBCCF9FF           - call ACOdyssey.exe+2E86BB0
ACOdyssey.exe+2EE9ED5 - 4C 8B E8              - mov r13,rax
ACOdyssey.exe+2EE9ED8 - 48 89 44 24 20        - mov [rsp+20],rax
ACOdyssey.exe+2EE9EDD - 48 8B 44 24 28        - mov rax,[rsp+28]
ACOdyssey.exe+2EE9EE2 - 48 85 C0              - test rax,rax
ACOdyssey.exe+2EE9EE5 - 74 43                 - je ACOdyssey.exe+2EE9F2A
ACOdyssey.exe+2EE9EE7 - 4D 85 ED              - test r13,r13
ACOdyssey.exe+2EE9EEA - 74 3E                 - je ACOdyssey.exe+2EE9F2A
ACOdyssey.exe+2EE9EEC - 41 8B 8F 90000000     - mov ecx,[r15+00000090]
ACOdyssey.exe+2EE9EF3 - 83 F9 04              - cmp ecx,04 { 4 }
ACOdyssey.exe+2EE9EF6 - 74 20                 - je ACOdyssey.exe+2EE9F18
ACOdyssey.exe+2EE9EF8 - 83 F9 0D              - cmp ecx,0D { 13 }
ACOdyssey.exe+2EE9EFB - 74 13                 - je ACOdyssey.exe+2EE9F10
ACOdyssey.exe+2EE9EFD - 83 F9 1A              - cmp ecx,1A { 26 }
ACOdyssey.exe+2EE9F00 - 74 05                 - je ACOdyssey.exe+2EE9F07
ACOdyssey.exe+2EE9F02 - 83 F9 21              - cmp ecx,21 { 33 }
ACOdyssey.exe+2EE9F05 - 75 23                 - jne ACOdyssey.exe+2EE9F2A
ACOdyssey.exe+2EE9F07 - 41 8B B5 3C020000     - mov esi,[r13+0000023C]
ACOdyssey.exe+2EE9F0E - EB 1A                 - jmp ACOdyssey.exe+2EE9F2A
ACOdyssey.exe+2EE9F10 - 8B B0 2C010000        - mov esi,[rax+0000012C]
ACOdyssey.exe+2EE9F16 - EB 12                 - jmp ACOdyssey.exe+2EE9F2A
ACOdyssey.exe+2EE9F18 - 41 8B 97 94000000     - mov edx,[r15+00000094]
ACOdyssey.exe+2EE9F1F - 49 8B CD              - mov rcx,r13
ACOdyssey.exe+2EE9F22 - E8 39860000           - call ACOdyssey.exe+2EF2560
ACOdyssey.exe+2EE9F27 - 8B 70 14              - mov esi,[rax+14]
ACOdyssey.exe+2EE9F2A - 89 B5 80000000        - mov [rbp+00000080],esi
ACOdyssey.exe+2EE9F30 - 44 38 A4 24 D0000000  - cmp [rsp+000000D0],r12l
ACOdyssey.exe+2EE9F38 - 74 0A                 - je ACOdyssey.exe+2EE9F44
ACOdyssey.exe+2EE9F3A - 8B 45 7C              - mov eax,[rbp+7C]
aob&gt; ACOdyssey.exe+2EE9F3D - 41 01 86 40010000     - add [r14+00000140],eax
inj&gt; ACOdyssey.exe+2EE9F44 - 8B 75 68              - mov esi,[rbp+68]
ACOdyssey.exe+2EE9F47 - 2B 75 7C              - sub esi,[rbp+7C]
ACOdyssey.exe+2EE9F4A - 41 8B 87 90000000     - mov eax,[r15+00000090]
ACOdyssey.exe+2EE9F51 - 89 84 24 E0000000     - mov [rsp+000000E0],eax
ACOdyssey.exe+2EE9F58 - 85 F6                 - test esi,esi
ACOdyssey.exe+2EE9F5A - 7F 3E                 - jg ACOdyssey.exe+2EE9F9A
ACOdyssey.exe+2EE9F5C - 49 8B 86 50010000     - mov rax,[r14+00000150]
ACOdyssey.exe+2EE9F63 - 48 8B 48 08           - mov rcx,[rax+08]
ACOdyssey.exe+2EE9F67 - 48 C1 E1 20           - shl rcx,20 { 32 }
ACOdyssey.exe+2EE9F6B - 48 C1 F9 3F           - sar rcx,3F { 63 }
ACOdyssey.exe+2EE9F6F - 48 23 08              - and rcx,[rax]
ACOdyssey.exe+2EE9F72 - 74 09                 - je ACOdyssey.exe+2EE9F7D
ACOdyssey.exe+2EE9F74 - 4C 39 61 18           - cmp [rcx+18],r12
ACOdyssey.exe+2EE9F78 - 75 03                 - jne ACOdyssey.exe+2EE9F7D
ACOdyssey.exe+2EE9F7A - 49 8B CC              - mov rcx,r12
ACOdyssey.exe+2EE9F7D - E8 4E159CFF           - call ACOdyssey.exe+28AB4D0
ACOdyssey.exe+2EE9F82 - 84 C0                 - test al,al
ACOdyssey.exe+2EE9F84 - 75 11                 - jne ACOdyssey.exe+2EE9F97
ACOdyssey.exe+2EE9F86 - 83 BC 24 E0000000 1A  - cmp dword ptr [rsp+000000E0],1A { 26 }
ACOdyssey.exe+2EE9F8E - 74 07                 - je ACOdyssey.exe+2EE9F97
ACOdyssey.exe+2EE9F90 - BE 01000000           - mov esi,00000001 { 1 }
ACOdyssey.exe+2EE9F95 - EB 03                 - jmp ACOdyssey.exe+2EE9F9A
ACOdyssey.exe+2EE9F97 - 83 CE FF              - or esi,-01 { 255 }
ACOdyssey.exe+2EE9F9A - 0FB7 85 9C000000      - movzx eax,word ptr [rbp+0000009C]
ACOdyssey.exe+2EE9FA1 - 41 8B CC              - mov ecx,r12d
&gt;&gt;&gt;&gt; ACOdyssey.exe+2EE9FA4 - BA FEFF0000           - mov edx,0000FFFE { 65534 }
ACOdyssey.exe+2EE9FA9 - 89 75 6C              - mov [rbp+6C],esi
ACOdyssey.exe+2EE9FAC - 85 F6                 - test esi,esi
ACOdyssey.exe+2EE9FAE - 0F9F C1               - setg cl
ACOdyssey.exe+2EE9FB1 - 66 23 C2              - and ax,dx
ACOdyssey.exe+2EE9FB4 - 66 0B C8              - or cx,ax
&gt;&gt;&gt;&gt; ACOdyssey.exe+2EE9FB7 - BA FDFF0000           - mov edx,0000FFFD { 65533 }
ACOdyssey.exe+2EE9FBC - 66 23 CA              - and cx,dx
ACOdyssey.exe+2EE9FBF - 8B C6                 - mov eax,esi
ACOdyssey.exe+2EE9FC1 - C1 E8 1F              - shr eax,1F { 31 }
ACOdyssey.exe+2EE9FC4 - 66 03 C0              - add ax,ax
ACOdyssey.exe+2EE9FC7 - 66 0B C1              - or ax,cx
ACOdyssey.exe+2EE9FCA - 66 89 85 9C000000     - mov [rbp+0000009C],ax
ACOdyssey.exe+2EE9FD1 - 49 8B 8E 60010000     - mov rcx,[r14+00000160]
ACOdyssey.exe+2EE9FD8 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+2EE9FDB - FF 50 20              - call qword ptr [rax+20]
ACOdyssey.exe+2EE9FDE - 85 C0                 - test eax,eax
ACOdyssey.exe+2EE9FE0 - 7E 21                 - jle ACOdyssey.exe+2EEA003
ACOdyssey.exe+2EE9FE2 - 49 8B 8E 60010000     - mov rcx,[r14+00000160]
ACOdyssey.exe+2EE9FE9 - 66 0F6E F6            - movd xmm6,esi
ACOdyssey.exe+2EE9FED - 0F5B F6               - cvtdq2ps xmm6,xmm6
ACOdyssey.exe+2EE9FF0 - 48 8B 01              - mov rax,[rcx]
ACOdyssey.exe+2EE9FF3 - FF 50 20              - call qword ptr [rax+20]
ACOdyssey.exe+2EE9FF6 - 66 0F6E C0            - movd xmm0,eax
ACOdyssey.exe+2EE9FFA - 0F5B C0               - cvtdq2ps xmm0,xmm0
ACOdyssey.exe+2EE9FFD - F3 0F5E F0            - divss xmm6,xmm0
*/
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4922</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someFlagRead382AOB,ACOdyssey.exe,48 ** ** ** 48 ** ** 48 ** ** FF ** ** ** 00 00 0F B6 48 08 33 C0 88 0B 48 83 C4 20 5B C3)
registersymbol(someFlagRead382AOB)

alloc(newmem,2048,someFlagRead382AOB+10) //"ACOdyssey.exe"+2E9BC26)
label(originalcode_someFlagRead382AOB)
registersymbol(originalcode_someFlagRead382AOB)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayerShipHealthBase
mov rcx,[rcx]
lea rcx,[rcx+1b8]
cmp rcx,rax
jne @f
mov ecx,1
readmem(someFlagRead382AOB+14,10)
//xor eax,eax
//mov [rbx],cl
//add rsp,20
//pop rbx
//ret

originalcode_someFlagRead382AOB:
readmem(someFlagRead382AOB+10,14)
//movzx ecx,byte ptr [rax+08]
//xor eax,eax
//mov [rbx],cl
//add rsp,20
//pop rbx
//ret

///

someFlagRead382AOB+10: //"ACOdyssey.exe"+2E9BC26:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someFlagRead382AOB+10: //"ACOdyssey.exe"+2E9BC26:
readmem(originalcode_someFlagRead382AOB,14)
//db 0F B6 48 08 33 C0 88 0B 48 83 C4 20 5B C3
//Alt: movzx ecx,byte ptr [rax+08]
//Alt: xor eax,eax
//Alt: mov [rbx],cl
//Alt: add rsp,20
//Alt: pop rbx
//Alt: ret
unregistersymbol(originalcode_someFlagRead382AOB)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4923</ID>
              <Description>"Auto Assemble script"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(shipGodFlagChkAOB,ACOdyssey.exe,80 ** ** ** 00 00 00 75 ** 48 ** ** FF ** ** ** 00 00 84 C0 74 ** 48 ** ** 48)
registersymbol(shipGodFlagChkAOB)

alloc(newmem2,2048,shipGodFlagChkAOB) //"ACOdyssey.exe"+2E87198)
label(originalcode2_shipGodFlagChkAOB)
registersymbol(originalcode2_shipGodFlagChkAOB)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
cmp [rax],rcx
je @f

readmem(shipGodFlagChkAOB,7)
je end2

@@:
mov rax,shipGodFlagChkAOB
lea rax,[rax+9]
push rbx
xor rbx,rbx
not rbx
mov bl,[rax-1]
lea rax,[rax+rbx]
pop rbx
jmp rax

end2:
readmem(shipGodFlagChkAOB+9,9)
jmp exit2

originalcode2_shipGodFlagChkAOB:
readmem(shipGodFlagChkAOB,18)
//cmp byte ptr [rcx+000001C0],00
//jne ACOdyssey.exe+2E87190
//mov rax,[rcx]
//call qword ptr [rax+00000100]

exit2:
jmp shipGodFlagChkAOB+12 //"ACOdyssey.exe"+2E871AA

///

shipGodFlagChkAOB: //"ACOdyssey.exe"+2E87198:
jmp newmem2


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
shipGodFlagChkAOB: //"ACOdyssey.exe"+2E87198:
readmem(originalcode2_shipGodFlagChkAOB,18)
//db 80 B9 C0 01 00 00 00 75 EF 48 8B 01 FF 90 00 01 00 00
//Alt: cmp byte ptr [rcx+000001C0],00
//Alt: jne ACOdyssey.exe+2E87190
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+00000100]
unregistersymbol(originalcode2_shipGodFlagChkAOB)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4925</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>1068015D70</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4926</ID>
          <Description>"healing snake .1"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(proportionalDamageCalAOB,ACOdyssey.exe,F3 ** ** ** ** F3 ** ** ** 3B D1 0F 4E D1 EB)
registersymbol(proportionalDamageCalAOB)

alloc(newmem,2048,proportionalDamageCalAOB) //"ACOdyssey.exe"+22F03A3)
label(originalcode_healingsnake)
registersymbol(originalcode_healingsnake)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayer
cmp [rdx+8],rsi
jne @f
xor edx,edx
jmp exit

originalcode_healingsnake:
readmem(proportionalDamageCalAOB,14)
//mulss xmm0,[rax+2C]
//cvttss2si edx,xmm0
//cmp edx,ecx
//cmovle edx,ecx

exit:
jmp proportionalDamageCalAOB+e //"ACOdyssey.exe"+22F03B1

///

proportionalDamageCalAOB: //"ACOdyssey.exe"+22F03A3:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
proportionalDamageCalAOB: //"ACOdyssey.exe"+22F03A3:
readmem(originalcode_healingsnake,14)
//db F3 0F 59 40 2C F3 0F 2C D0 3B D1 0F 4E D1
//Alt: mulss xmm0,[rax+2C]
//Alt: cvttss2si edx,xmm0
//Alt: cmp edx,ecx
//Alt: cmovle edx,ecx
unregistersymbol(originalcode_healingsnake)

/*
ACOdyssey.exe+22F0312 - E9 2C010000           - jmp ACOdyssey.exe+22F0443
ACOdyssey.exe+22F0317 - 8B 45 38              - mov eax,[rbp+38]
ACOdyssey.exe+22F031A - 39 45 40              - cmp [rbp+40],eax
ACOdyssey.exe+22F031D - 0F8D 20010000         - jnl ACOdyssey.exe+22F0443
ACOdyssey.exe+22F0323 - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+22F0326 - E8 C5E3B500           - call ACOdyssey.exe+2E4E6F0
ACOdyssey.exe+22F032B - 66 0F6E 45 40         - movd xmm0,[rbp+40]
ACOdyssey.exe+22F0330 - B9 01000000           - mov ecx,00000001 { 1 }
ACOdyssey.exe+22F0335 - 0F5B C0               - cvtdq2ps xmm0,xmm0
ACOdyssey.exe+22F0338 - F3 0F59 40 30         - mulss xmm0,[rax+30]
ACOdyssey.exe+22F033D - F3 0F58 05 5702AE01   - addss xmm0,dword ptr [ACOdyssey.exe+3DD059C] { [0.50] }
ACOdyssey.exe+22F0345 - F3 0F2C D8            - cvttss2si ebx,xmm0
ACOdyssey.exe+22F0349 - 3B D9                 - cmp ebx,ecx
ACOdyssey.exe+22F034B - 0F4C D9               - cmovl ebx,ecx
ACOdyssey.exe+22F034E - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+22F0351 - E8 9AE3B500           - call ACOdyssey.exe+2E4E6F0
ACOdyssey.exe+22F0356 - 66 0F6E 45 38         - movd xmm0,[rbp+38]
ACOdyssey.exe+22F035B - 48 8D 4D F0           - lea rcx,[rbp-10]
ACOdyssey.exe+22F035F - 0F5B C0               - cvtdq2ps xmm0,xmm0
ACOdyssey.exe+22F0362 - F3 0F59 40 2C         - mulss xmm0,[rax+2C]
ACOdyssey.exe+22F0367 - F3 0F2C D0            - cvttss2si edx,xmm0
ACOdyssey.exe+22F036B - 3B DA                 - cmp ebx,edx
ACOdyssey.exe+22F036D - 0F4E D3               - cmovle edx,ebx
ACOdyssey.exe+22F0370 - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+22F0373 - E8 5868F8FF           - call ACOdyssey.exe+2276BD0
ACOdyssey.exe+22F0378 - E9 C6000000           - jmp ACOdyssey.exe+22F0443
ACOdyssey.exe+22F037D - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+22F0380 - E8 6BE3B500           - call ACOdyssey.exe+2E4E6F0
ACOdyssey.exe+22F0385 - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+22F0388 - 44 38 B8 99000000     - cmp [rax+00000099],r15l
ACOdyssey.exe+22F038F - 74 22                 - je ACOdyssey.exe+22F03B3
ACOdyssey.exe+22F0391 - E8 5AE3B500           - call ACOdyssey.exe+2E4E6F0
ACOdyssey.exe+22F0396 - 66 0F6E 45 38         - movd xmm0,[rbp+38]
ACOdyssey.exe+22F039B - B9 01000000           - mov ecx,00000001 { 1 }
ACOdyssey.exe+22F03A0 - 0F5B C0               - cvtdq2ps xmm0,xmm0
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+22F03A3 - F3 0F59 40 2C         - mulss xmm0,[rax+2C]
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+22F03A8 - F3 0F2C D0            - cvttss2si edx,xmm0
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+22F03AC - 3B D1                 - cmp edx,ecx
&gt;&gt;&gt;&gt;&gt;ACOdyssey.exe+22F03AE - 0F4E D1               - cmovle edx,ecx
ACOdyssey.exe+22F03B1 - EB 0F                 - jmp ACOdyssey.exe+22F03C2
ACOdyssey.exe+22F03B3 - E8 38E3B500           - call ACOdyssey.exe+2E4E6F0
ACOdyssey.exe+22F03B8 - 8B 50 24              - mov edx,[rax+24]
ACOdyssey.exe+22F03BB - 3B 55 38              - cmp edx,[rbp+38]
ACOdyssey.exe+22F03BE - 0F4F 55 38            - cmovg edx,[rbp+38]
ACOdyssey.exe+22F03C2 - 39 55 40              - cmp [rbp+40],edx
ACOdyssey.exe+22F03C5 - 78 2E                 - js ACOdyssey.exe+22F03F5
ACOdyssey.exe+22F03C7 - F7 DA                 - neg edx
ACOdyssey.exe+22F03C9 - 48 8D 4D F0           - lea rcx,[rbp-10]
ACOdyssey.exe+22F03CD - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+22F03D0 - E8 FB67F8FF           - call ACOdyssey.exe+2276BD0
ACOdyssey.exe+22F03D5 - 48 8D 55 40           - lea rdx,[rbp+40]
ACOdyssey.exe+22F03D9 - 48 8D 4D F0           - lea rcx,[rbp-10]
ACOdyssey.exe+22F03DD - E8 FE40F8FF           - call ACOdyssey.exe+22744E0
ACOdyssey.exe+22F03E2 - EB 5F                 - jmp ACOdyssey.exe+22F0443
ACOdyssey.exe+22F03E4 - 8B 55 38              - mov edx,[rbp+38]
ACOdyssey.exe+22F03E7 - 48 8D 4D F0           - lea rcx,[rbp-10]
ACOdyssey.exe+22F03EB - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+22F03EE - E8 DD67F8FF           - call ACOdyssey.exe+2276BD0
ACOdyssey.exe+22F03F3 - EB 4E                 - jmp ACOdyssey.exe+22F0443
ACOdyssey.exe+22F03F5 - 45 33 C9              - xor r9d,r9d
ACOdyssey.exe+22F03F8 - 44 88 7C 24 20        - mov [rsp+20],r15l
ACOdyssey.exe+22F03FD - 45 33 C0              - xor r8d,r8d
ACOdyssey.exe+22F0400 - 48 8B D3              - mov rdx,rbx
ACOdyssey.exe+22F0403 - 33 C9                 - xor ecx,ecx
ACOdyssey.exe+22F0405 - E8 467F5B00           - call ACOdyssey.exe+28A8350
ACOdyssey.exe+22F040A - 48 89 75 38           - mov [rbp+38],rsi
ACOdyssey.exe+22F040E - 4C 39 7F 10           - cmp [rdi+10],r15
ACOdyssey.exe+22F0412 - 75 10                 - jne ACOdyssey.exe+22F0424
ACOdyssey.exe+22F0414 - 48 8B 07              - mov rax,[rdi]
ACOdyssey.exe+22F0417 - 48 8B CF              - mov rcx,rdi
ACOdyssey.exe+22F041A - FF 90 10010000        - call qword ptr [rax+00000110]
*/
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4927</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10496FCCA0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4928</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>107B0C1710</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4929</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+300A93A:
db 90 B2 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+300A93A:
db 0F 93 C2
//Alt: setae dl
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4930</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+2E161EB:
db 90 B0 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+2E161EB:
db 0F 93 C0
//Alt: setae al
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4931</ID>
          <Description>"*"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"ACOdyssey.exe"+2FE54D8)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,115675

originalcode:
mov rdi,[rsp+20]
mov r14d,eax
mov edx,[rsp+28]
shr edx,11

exit:
jmp "ACOdyssey.exe"+2FE54E7

///

"ACOdyssey.exe"+2FE54D8:
jmp newmem


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACOdyssey.exe"+2FE54D8:
db 48 8B 7C 24 20 44 8B F0 8B 54 24 28 C1 EA 11
//Alt: mov rdi,[rsp+20]
//Alt: mov r14d,eax
//Alt: mov edx,[rsp+28]
//Alt: shr edx,11

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4934</ID>
          <Description>"**"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"ACOdyssey.exe"+300381F:
db 90 B0 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"ACOdyssey.exe"+300381F:
db 0F 93 C0
//Alt: setae al
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24035</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(invCapacityChkMax1AOB,ACOdyssey.exe,8B ** ** ** 00 00 39 ** ** 0F 97 C0 84 C0 0F 84)
registersymbol(invCapacityChkMax1AOB)

invCapacityChkMax1AOB+9: //"ACOdyssey.exe"+27D9844:
db 90 30 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
invCapacityChkMax1AOB+9: //"ACOdyssey.exe"+27D9844:
db 0F 97 C0
//Alt: seta al
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>24034</ID>
              <Description>"Auto Assemble script"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(invCapacityChkMax2AOB,ACOdyssey.exe,8B ** ** ** 00 00 39 ** ** 0F 97 C0 48 ** ** ** C3)
registersymbol(invCapacityChkMax2AOB)

invCapacityChkMax2AOB+9: //"ACOdyssey.exe"+27D342C:
db 90 30 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
invCapacityChkMax2AOB+9: //"ACOdyssey.exe"+27D342C:
db 0F 97 C0
//Alt: seta al
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>24037</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10721ECA28</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24040</ID>
          <Description>"enable .8"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11

///***********************************************///
aobscanmodule(petHealthRegenCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 0F ** ** ** ** 0F ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(petHealthRegenCallerAOB)

label(bHavePet)
registersymbol(bHavePet)
label(pPet)
registersymbol(pPet)

alloc(newmem17,2048,petHealthRegenCallerAOB+5) //"ACOdyssey.exe"+239845B)
label(originalcode17_enable)
registersymbol(originalcode17_enable)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
mov rsi,bHavePet
mov sil,[rsi]
test sil,sil
jz @f
mov rsi,pPet
mov [rsi],rcx
test rcx,rcx
jz @f
cmp rcx,1
je @f
//mov rdi,[rcx+10]
mov rdi,[rsp+8]
mov [rsi+8],rdi
end17:

originalcode17_enable:
readmem(petHealthRegenCallerAOB+5,15)
//movaps xmm6,[rsp+30]
//movaps xmm7,[rsp+20]
//mov rsi,[rsp+58]

exit17:
jmp petHealthRegenCallerAOB+14 //"ACOdyssey.exe"+239846A

///
bHavePet:
dd 0
pPet:
///

petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
jmp newmem17

///***********************************************///
aobscanmodule(havePetFlagChkForPetHealthRegenAOB,ACOdyssey.exe,40 ** 48 ** ** ** 80 ** 38 00 48 ** ** 74 ** 48 ** ** ** ** E8 ** ** ** ** 48 ** ** E8)
registersymbol(havePetFlagChkForPetHealthRegenAOB)

alloc(newmem17b,2048,havePetFlagChkForPetHealthRegenAOB) //"ACOdyssey.exe"+23CE6F0)
label(originalcode17b_enable)
registersymbol(originalcode17b_enable)
label(exit17b)

newmem17b: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(havePetFlagChkForPetHealthRegenAOB,6)
push rax
mov rdi,bHavePet
mov al,[rcx+38]
mov [rdi],al
test al,al
jnz @f

xor rax,rax
mov rdi,pPet
mov [rdi],rax
mov [rdi+8],rax

@@:
pop rax
readmem(havePetFlagChkForPetHealthRegenAOB+6,7)
jnz @f

push rax
mov rax,havePetFlagChkForPetHealthRegenAOB
xor rdi,rdi
mov dil,[rax+e]
lea rdi,[rax+rdi+f]
pop rax
jmp rdi

@@:
jmp exit17b

originalcode17b_enable:
readmem(havePetFlagChkForPetHealthRegenAOB,15)
//push rdi
//sub rsp,20
//cmp byte ptr [rcx+38],00
//mov rdi,rcx
//je ACOdyssey.exe+23CE74F

exit17b:
jmp havePetFlagChkForPetHealthRegenAOB+f //"ACOdyssey.exe"+23CE6FF

///

havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
jmp newmem17b

///***********************************************///
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,E8 ** ** ** ** 48 ** ** ** ** ** ** ** 41 ** ** 2B ** ** ** 41 ** ** 85 C0 0F 8F)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB+5) //"ACOdyssey.exe"+212D598)
label(originalcode18_enable)
registersymbol(originalcode18_enable)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
//test
//mov rdi,[rsp+28]//
//mov rdi,[rdi]
//test rdi,rdi
//jz @f
//mov rdi,[rdi+10]
//mov rdi,[rdi+10]
//mov rdi,[rdi+108]
//test rdi,rdi
//jz @f
//

//.2
//mov rdi,[rsp+28]
//mov rdi,[rdi]

//.3 .4 .5 .6 | v1.03
mov rdi,[rsp+70]
//

mov rcx,pPlayer
test rcx,rcx
jz @f
cmp [rcx+8],rdi
je isplayer18
mov rcx,pPet
//mov rcx,[rcx]
//test rcx,rcx
//jz @f
//cmp [rcx+10],rdi
cmp [rcx+8],rdi
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
//cmp byte ptr [rcx],1
//jne notplayerpet18
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18
//cmp ecx,1
//je @f
//cmp ecx,2
//je @f
//jmp notplayerpet18
//je @f
//jmp notplayerpet18
//@@:
//mov byte ptr [rcx],0

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+40],rcx
je @f
cmp [rsp+50],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
readmem(healthCalOnHitAOB+d,7)
//mov eax,r15d
//sub eax,[rsp+20]

//cmp eax,#1
//jge @f
//mov r15d,#1
//add r15d,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d
@@:
jmp end18

//
domaxdamage18:
cmp [rsp+20],r15d
jge @f
mov [rsp+20],r15d
mov [rbx+84],r15d
@@:
jmp end18

//
end18:

originalcode18_enable:
readmem(healthCalOnHitAOB+5,15)
//mov rdi,[rsp+00000098]
//mov eax,r15d
//sub eax,[rsp+20]

exit18:
jmp healthCalOnHitAOB+14 //"ACOdyssey.exe"+212D5A7

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
jmp newmem18

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
dealloc(newmem17)
petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
readmem(originalcode17_enable,15)
//db 0F 28 74 24 30 0F 28 7C 24 20 48 8B 74 24 58
//Alt: movaps xmm6,[rsp+30]
//Alt: movaps xmm7,[rsp+20]
//Alt: mov rsi,[rsp+58]
unregistersymbol(originalcode17_enable)

unregistersymbol(bHavePet)
unregistersymbol(pPet)

///***********************************************///
dealloc(newmem17b)
havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
readmem(originalcode17b_enable,15)
//db 40 57 48 83 EC 20 80 79 38 00 48 8B F9 74 50
//Alt: push rdi
//Alt: sub rsp,20
//Alt: cmp byte ptr [rcx+38],00
//Alt: mov rdi,rcx
//Alt: je ACOdyssey.exe+23CE74F
unregistersymbol(originalcode17b_enable)

///***********************************************///
dealloc(newmem18)
healthCalOnHitAOB+5: //"ACOdyssey.exe"+212D598:
readmem(originalcode18_enable,15)
//db 48 8B BC 24 98 00 00 00 41 8B C7 2B 44 24 20
//Alt: mov rdi,[rsp+00000098]
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
unregistersymbol(originalcode18_enable)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)

///***********************************************///
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24041</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,41 8B C7 2B ** ** ** 41 89 06 85 C0)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB) //"ACOdyssey.exe"+22CD77D)
label(originalcode18_healthCalOnHitAOB)
registersymbol(originalcode18_healthCalOnHitAOB)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,[rsp+78]

mov rcx,pPlayer
test rcx,rcx
jz @f
cmp [rcx+8],rax
je isplayer18
mov rcx,pPet
cmp [rcx+8],rax
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+40],rcx
je @f
cmp [rsp+50],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
readmem(healthCalOnHitAOB,7)
//mov eax,r15d
//sub eax,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d
@@:
jmp end18

//
domaxdamage18:
cmp [rsp+20],r15d
jge @f
mov [rsp+20],r15d
//mov [rbx+84],r15d
@@:
jmp end18

//
end18:
mov rcx,healthCalOnHitAOB
lea rcx,[rcx+e]
push rbx
xor rbx,rbx
mov bl,[rcx-1]
lea rcx,[rcx+rbx]
pop rbx
readmem(healthCalOnHitAOB,12)
jle exit18
jmp rcx

originalcode18_healthCalOnHitAOB:
readmem(healthCalOnHitAOB,14)
//mov eax,r15d
//sub eax,[rsp+20]
//mov [r14],eax
//test eax,eax
//jg ACOdyssey.exe+22CD7F8

exit18:
jmp healthCalOnHitAOB+e

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB: //"ACOdyssey.exe"+22CD77D:
jmp newmem18


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem18)
healthCalOnHitAOB: //"ACOdyssey.exe"+22CD77D:
readmem(originalcode18_healthCalOnHitAOB,14)
//db 41 8B C7 2B 44 24 20 41 89 06 85 C0 7F 6D
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
//Alt: mov [r14],eax
//Alt: test eax,eax
//Alt: jg ACOdyssey.exe+22CD7F8
unregistersymbol(originalcode18_healthCalOnHitAOB)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24042</ID>
          <Description>"poseidon .1"</Description>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(someFlagRead382AOB,ACOdyssey.exe,48 ** ** ** 48 ** ** 48 ** ** FF ** ** ** 00 00 0F B6 48 08 33 C0 88 0B 48 83 C4 20 5B C3)
registersymbol(someFlagRead382AOB)

alloc(newmem,2048,someFlagRead382AOB+10) //"ACOdyssey.exe"+2E9BC26)
label(originalcode_someFlagRead382AOB)
registersymbol(originalcode_someFlagRead382AOB)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,pPlayerShipHealthBase
mov rcx,[rcx]
lea rcx,[rcx+1b8]
cmp rcx,rax
jne @f
mov ecx,1
readmem(someFlagRead382AOB+14,10)
//xor eax,eax
//mov [rbx],cl
//add rsp,20
//pop rbx
//ret

originalcode_someFlagRead382AOB:
readmem(someFlagRead382AOB+10,14)
//movzx ecx,byte ptr [rax+08]
//xor eax,eax
//mov [rbx],cl
//add rsp,20
//pop rbx
//ret

///

someFlagRead382AOB+10: //"ACOdyssey.exe"+2E9BC26:
jmp newmem

///*****************************************///
aobscanmodule(shipGodFlagChkAOB,ACOdyssey.exe,80 ** ** ** 00 00 00 75 ** 48 ** ** FF ** ** ** 00 00 84 C0 74 ** 48 ** ** 48)
registersymbol(shipGodFlagChkAOB)

alloc(newmem2,2048,shipGodFlagChkAOB) //"ACOdyssey.exe"+2E87198)
label(originalcode2_shipGodFlagChkAOB)
registersymbol(originalcode2_shipGodFlagChkAOB)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
cmp [rax],rcx
je @f

readmem(shipGodFlagChkAOB,7)
je end2

@@:
mov rax,shipGodFlagChkAOB
lea rax,[rax+9]
push rbx
xor rbx,rbx
not rbx
mov bl,[rax-1]
lea rax,[rax+rbx]
pop rbx
jmp rax

end2:
readmem(shipGodFlagChkAOB+9,9)
jmp exit2

originalcode2_shipGodFlagChkAOB:
readmem(shipGodFlagChkAOB,18)
//cmp byte ptr [rcx+000001C0],00
//jne ACOdyssey.exe+2E87190
//mov rax,[rcx]
//call qword ptr [rax+00000100]

exit2:
jmp shipGodFlagChkAOB+12 //"ACOdyssey.exe"+2E871AA

///

shipGodFlagChkAOB: //"ACOdyssey.exe"+2E87198:
jmp newmem2

///*****************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
someFlagRead382AOB+10: //"ACOdyssey.exe"+2E9BC26:
readmem(originalcode_someFlagRead382AOB,14)
//db 0F B6 48 08 33 C0 88 0B 48 83 C4 20 5B C3
//Alt: movzx ecx,byte ptr [rax+08]
//Alt: xor eax,eax
//Alt: mov [rbx],cl
//Alt: add rsp,20
//Alt: pop rbx
//Alt: ret
unregistersymbol(originalcode_someFlagRead382AOB)

///*****************************************///
dealloc(newmem2)
shipGodFlagChkAOB: //"ACOdyssey.exe"+2E87198:
readmem(originalcode2_shipGodFlagChkAOB,18)
//db 80 B9 C0 01 00 00 00 75 EF 48 8B 01 FF 90 00 01 00 00
//Alt: cmp byte ptr [rcx+000001C0],00
//Alt: jne ACOdyssey.exe+2E87190
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+00000100]
unregistersymbol(originalcode2_shipGodFlagChkAOB)

///*****************************************///
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24043</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>78704940</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24044</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>78704978</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24045</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>787049B0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24046</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>78704A58</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24047</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(altcabilitiessetkeyiddefault,12)

label(bAltCAbilitiesSetKey)
registersymbol(bAltCAbilitiesSetKey)

alloc(newmem,2048,"ACOdyssey.exe"+362C006)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfq
mov rcx,bAltCAbilitiesSetKey
cmp byte ptr [rcx],1
jne notpressing
cmp byte ptr [rcx+2],1
je nend
popfq
mov byte ptr [rcx+2],1
jmp docombatabilitiessettoggle

notpressing:
cmp byte ptr [rcx+2],1
jne nend
popfq
mov byte ptr [rcx+2],0
jmp docombatabilitiessettoggle

nend:
popfq

je ACOdyssey.exe+362C04A

docombatabilitiessettoggle:
mov [rdi+00000E6A],r14l
call ACOdyssey.exe+1D0A230
jmp exit

originalcode:
je ACOdyssey.exe+362C04A
mov [rdi+00000E6A],r14l
call ACOdyssey.exe+1D0A230

exit:
jmp "ACOdyssey.exe"+362C014

///
bAltCAbilitiesSetKey:
dd 0
///

"ACOdyssey.exe"+362C006:
jmp newmem

///**************************************************///
label(bEndThread_altCAbilitiesSkillSetKey_keylistener_mem)
registersymbol(bEndThread_altCAbilitiesSkillSetKey_keylistener_mem)

label(bAltCAbilitiesSetKeyID)
registersymbol(bAltCAbilitiesSetKeyID)

alloc(altCAbilitiesSkillSetKey_keylistener_mem,1024,"ACOdyssey.exe")
registersymbol(altCAbilitiesSkillSetKey_keylistener_mem)
createthread(altCAbilitiesSkillSetKey_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)

altCAbilitiesSkillSetKey_keylistener_mem:
sub rsp,28

keylistenerstart:
mov rcx,bAltCAbilitiesSetKeyID
mov rcx,[rcx]
//mov rcx,05 //X1 mouse button
//push rcx
call GetAsyncKeyState
//add rsp,08
shr ax,#15
mov rcx,bAltCAbilitiesSetKey
mov [rcx],ax
jmp keylistenerend

keylistenerend:
mov rcx,#100
call Sleep
mov rbx,bEndThread_altCAbilitiesSkillSetKey_keylistener_mem
cmp dword ptr [rbx],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov rbx,bEndThread_altCAbilitiesSkillSetKey_keylistener_mem
mov dword ptr [rbx],2
ret

///
bEndThread_altCAbilitiesSkillSetKey_keylistener_mem:
dd 0
bAltCAbilitiesSetKeyID:
dd altcabilitiessetkeyiddefault
///

///**************************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_altCAbilitiesSkillSetKey_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_altCAbilitiesSkillSetKey_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_altCAbilitiesSkillSetKey_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_altCAbilitiesSkillSetKey_keylistener_mem:
//dd 1

///********************************************************///
dealloc(newmem)
"ACOdyssey.exe"+362C006:
db 74 42 44 88 B7 6A 0E 00 00 E8 1C E2 6D FE
//Alt: je ACOdyssey.exe+362C04A
//Alt: mov [rdi+00000E6A],r14l
//Alt: call ACOdyssey.exe+1D0A230

unregistersymbol(bAltCAbilitiesSetKey)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24053</ID>
          <Description>"enable .9"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11

///***********************************************///
aobscanmodule(petHealthRegenCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 0F ** ** ** ** 0F ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(petHealthRegenCallerAOB)

label(bHavePet)
registersymbol(bHavePet)
label(pPet)
registersymbol(pPet)

alloc(newmem17,2048,petHealthRegenCallerAOB+5) //"ACOdyssey.exe"+239845B)
label(originalcode17_enable)
registersymbol(originalcode17_enable)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
mov rsi,bHavePet
mov sil,[rsi]
test sil,sil
jz @f
mov rsi,pPet
mov [rsi],rcx
test rcx,rcx
jz @f
cmp rcx,1
je @f
//mov rdi,[rcx+10]
mov rdi,[rsp+8]
mov [rsi+8],rdi
end17:

originalcode17_enable:
readmem(petHealthRegenCallerAOB+5,15)
//movaps xmm6,[rsp+30]
//movaps xmm7,[rsp+20]
//mov rsi,[rsp+58]

exit17:
jmp petHealthRegenCallerAOB+14 //"ACOdyssey.exe"+239846A

///
bHavePet:
dd 0
pPet:
///

petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
jmp newmem17

///***********************************************///
aobscanmodule(havePetFlagChkForPetHealthRegenAOB,ACOdyssey.exe,40 ** 48 ** ** ** 80 ** 38 00 48 ** ** 74 ** 48 ** ** ** ** E8 ** ** ** ** 48 ** ** E8)
registersymbol(havePetFlagChkForPetHealthRegenAOB)

alloc(newmem17b,2048,havePetFlagChkForPetHealthRegenAOB) //"ACOdyssey.exe"+23CE6F0)
label(originalcode17b_enable)
registersymbol(originalcode17b_enable)
label(exit17b)

newmem17b: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(havePetFlagChkForPetHealthRegenAOB,6)
push rax
mov rdi,bHavePet
mov al,[rcx+38]
mov [rdi],al
test al,al
jnz @f

xor rax,rax
mov rdi,pPet
mov [rdi],rax
mov [rdi+8],rax

@@:
pop rax
readmem(havePetFlagChkForPetHealthRegenAOB+6,7)
jnz @f

push rax
mov rax,havePetFlagChkForPetHealthRegenAOB
xor rdi,rdi
mov dil,[rax+e]
lea rdi,[rax+rdi+f]
pop rax
jmp rdi

@@:
jmp exit17b

originalcode17b_enable:
readmem(havePetFlagChkForPetHealthRegenAOB,15)
//push rdi
//sub rsp,20
//cmp byte ptr [rcx+38],00
//mov rdi,rcx
//je ACOdyssey.exe+23CE74F

exit17b:
jmp havePetFlagChkForPetHealthRegenAOB+f //"ACOdyssey.exe"+23CE6FF

///

havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
jmp newmem17b

///***********************************************///
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,41 8B C7 2B ** ** ** 41 89 06 85 C0)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB) //"ACOdyssey.exe"+22CD77D)
label(originalcode18_healthCalOnHitAOB)
registersymbol(originalcode18_healthCalOnHitAOB)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,[rsp+78]

mov rcx,pPlayer
test rcx,rcx
jz @f
cmp [rcx+8],rax
je isplayer18
mov rcx,pPet
cmp [rcx+8],rax
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+40],rcx
je @f
cmp [rsp+50],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
readmem(healthCalOnHitAOB,7)
//mov eax,r15d
//sub eax,[rsp+20]

test eax,eax
jg @f
mov r15d,[rsp+20]
inc r15d
@@:
jmp end18

//
domaxdamage18:
cmp [rsp+20],r15d
jge @f
mov [rsp+20],r15d
//mov [rbx+84],r15d
@@:
jmp end18

//
end18:
mov rcx,healthCalOnHitAOB
lea rcx,[rcx+e]
push rbx
xor rbx,rbx
mov bl,[rcx-1]
lea rcx,[rcx+rbx]
pop rbx
readmem(healthCalOnHitAOB,12)
jle exit18
jmp rcx

originalcode18_healthCalOnHitAOB:
readmem(healthCalOnHitAOB,14)
//mov eax,r15d
//sub eax,[rsp+20]
//mov [r14],eax
//test eax,eax
//jg ACOdyssey.exe+22CD7F8

exit18:
jmp healthCalOnHitAOB+e

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB: //"ACOdyssey.exe"+22CD77D:
jmp newmem18

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
dealloc(newmem17)
petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
readmem(originalcode17_enable,15)
//db 0F 28 74 24 30 0F 28 7C 24 20 48 8B 74 24 58
//Alt: movaps xmm6,[rsp+30]
//Alt: movaps xmm7,[rsp+20]
//Alt: mov rsi,[rsp+58]
unregistersymbol(originalcode17_enable)

unregistersymbol(bHavePet)
unregistersymbol(pPet)

///***********************************************///
dealloc(newmem17b)
havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
readmem(originalcode17b_enable,15)
//db 40 57 48 83 EC 20 80 79 38 00 48 8B F9 74 50
//Alt: push rdi
//Alt: sub rsp,20
//Alt: cmp byte ptr [rcx+38],00
//Alt: mov rdi,rcx
//Alt: je ACOdyssey.exe+23CE74F
unregistersymbol(originalcode17b_enable)

///***********************************************///
dealloc(newmem18)
healthCalOnHitAOB: //"ACOdyssey.exe"+22CD77D:
readmem(originalcode18_healthCalOnHitAOB,14)
//db 41 8B C7 2B 44 24 20 41 89 06 85 C0 7F 6D
//Alt: mov eax,r15d
//Alt: sub eax,[rsp+20]
//Alt: mov [r14],eax
//Alt: test eax,eax
//Alt: jg ACOdyssey.exe+22CD7F8
unregistersymbol(originalcode18_healthCalOnHitAOB)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)

/*
mov eax,*
sub eax,*
mov [*],eax
test eax,eax
jg *
///***********************************************///
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24054</ID>
          <Description>"healthCalOnHitAOB v1.3.0"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,8B ** 2B ** 41 ** ** 85 C0 7F ** 48 ** ** ** ** 44)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB) //"ACOdyssey.exe"+22F5C35)
label(originalcode18_healthCalOnHitAOB)
registersymbol(originalcode18_healthCalOnHitAOB)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdi,[rsp+78]

mov rcx,pPlayer
test rcx,rcx
jz @f
cmp [rcx+8],rdi
je isplayer18
mov rcx,pPet
cmp [rcx+8],rdi
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+40],rcx
je @f
cmp [rsp+50],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
mov eax,ebp
sub eax,edx

test eax,eax
jg @f
mov ebp,edx
inc ebp
@@:
jmp end18

//
domaxdamage18:
cmp edx,ebp
cmovl edx,ebp
jmp end18

//
end18:
mov rcx,healthCalOnHitAOB //"ACOdyssey.exe"+22F5C35
lea rcx,[rcx+b]
xor rdi,rdi
mov dil,[rcx-1]
lea rcx,[rcx+rdi]

readmem(healthCalOnHitAOB,9)
//mov eax,ebp
//sub eax,edx
//mov [r14],eax
//test eax,eax
jle @f
jmp rcx

@@:
readmem(healthCalOnHitAOB+b,5)
//mov rdx,[rsp+30]
jmp exit18

originalcode18_healthCalOnHitAOB:
readmem(healthCalOnHitAOB,16)
//mov eax,ebp
//sub eax,edx
//mov [r14],eax
//test eax,eax
//jg ACOdyssey.exe+22F5C5E
//mov rdx,[rsp+30]

exit18:
jmp healthCalOnHitAOB+10 //"ACOdyssey.exe"+22F5C45

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB: //"ACOdyssey.exe"+22F5C35:
jmp newmem18




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem18)
healthCalOnHitAOB: //"ACOdyssey.exe"+22F5C35:
readmem(originalcode18_healthCalOnHitAOB,16)
//db 8B C5 2B C2 41 89 06 85 C0 7F 1E 48 8B 54 24 30
//Alt: mov eax,ebp
//Alt: sub eax,edx
//Alt: mov [r14],eax
//Alt: test eax,eax
//Alt: jg ACOdyssey.exe+22F5C5E
//Alt: mov rdx,[rsp+30]
unregistersymbol(originalcode18_healthCalOnHitAOB)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24055</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>10532BA840</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24056</ID>
          <Description>"No Description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>1F67084B0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24057</ID>
          <Description>"No Description"</Description>
          <VariableType>Float</VariableType>
          <Address>1384CE0D0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24058</ID>
          <Description>"enable .10a"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//vng21092's aobscan lua script
{$lua}

function lua_aobscan(name,module,bytes,index)
  index = index - 1
  if(module == "") then
    local resultSet = AOBScan(bytes)
      if(resultSet == nil) then
        unregisterSymbol(name)
        print(name.." not found")
      else
        unregisterSymbol(name)
        registerSymbol(name,resultSet[index])
        resultSet.destroy()
      end
  else
    if(getModuleSize(module) == nil) then
      print("Module "..module.." not found")
    else
      local memScanner = createMemScan()
      local memFoundList = createFoundList(memScanner)
      memScanner.firstScan(
        soExactValue,vtByteArray,rtRounded,bytes,nil,
        getAddress(module),(getAddress(module)+getModuleSize(module)),"",
        fsmNotAligned,"",true,false,false,false)
      memScanner.waitTillDone()
      memFoundList.initialize()
        if(memFoundList.Count == 0) then
          unregisterSymbol(name)
          print(name.." in module "..module.." not found")
        else
          unregisterSymbol(name)
          registerSymbol(name,memFoundList.Address[index])
        end
      memScanner.destroy()
      memFoundList.destroy()
    end
  end
end
{$asm}

//////////////////////////
aobscanmodule(invisibleFlagChk12AOB,ACOdyssey.exe,74 09 80 ** ** ** ** ** ** 75 ** B0 01)
registersymbol(invisibleFlagChk12AOB)
//////////////////////////

aobscanmodule(playerFetchAOB,ACOdyssey.exe,74 0C E8 ** ** ** ** C6 87 ** ** ** ** 00 F6 87)
registersymbol(playerFetchAOB)

label(bStealthMod)
registersymbol(bStealthMod)
label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048,playerFetchAOB)
label(originalcode_enable)
registersymbol(originalcode_enable)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//readmem(playerFetchAOB,2)
je @f
reassemble(playerFetchAOB+2)
readmem(playerFetchAOB+7,7)
@@:
readmem(playerFetchAOB+e,7)
push rax
mov rax,pPlayer
mov [rax],rdi
mov [rax+8],r13
mov rsi,[rsp+218]          //210
mov [rax+10],rsi
mov rsi,[rsp+228]          //220
mov [rax+18],rsi

/*pushfq
test rsi,rsi
jz endstealth
mov rax,bStealthMod
cmp byte ptr [rax],1
jne @f
mov byte ptr [rsi+a6],1
jmp endstealth
@@:
cmp byte ptr [rax+1],1
jne @f
mov byte ptr [rax+1],0
mov byte ptr [rsi+a6],0

endstealth:
popfq*/

end:
pop rax
jmp exit

originalcode_enable:
readmem(playerFetchAOB,21)

exit:
jmp playerFetchAOB+15

///
bStealthMod:
dd 0
pPlayer:
///

playerFetchAOB:
jmp newmem

///***********************************************///
aobscanmodule(playerShipBase1ReadAOB,ACOdyssey.exe,48 ** ** ** 48 ** ** ** 48 83 ** ** C6 ** ** ** ** FF)
registersymbol(playerShipBase1ReadAOB)

label(pPlayerShipBase1)
registersymbol(pPlayerShipBase1)

alloc(newmem2,2048,playerShipBase1ReadAOB) //"ACOdyssey.exe"+2761780)
label(originalcode2_enable)
registersymbol(originalcode2_enable)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(playerShipBase1ReadAOB,12)
push rcx
mov rcx,pPlayerShipBase1
pop [rcx]
jmp exit2

originalcode2_enable:
readmem(playerShipBase1ReadAOB,17)
//sub rsp,28
//mov rax,[rcx-50]
//add rcx,-50
//mov byte ptr [rsp+30],00

exit2:
jmp playerShipBase1ReadAOB+11

///
pPlayerShipBase1:
///

playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
jmp newmem2

///***********************************************///
aobscanmodule(playerShipBase2ReadAOB,ACOdyssey.exe,E8 ** ** ** ** 48 8B ** 0F 28 ** E8 ** ** ** ** 0F 2F ** ** 0F)
registersymbol(playerShipBase2ReadAOB)

label(pPlayerShipHealthBase)
registersymbol(pPlayerShipHealthBase)

alloc(newmem3,2048,playerShipBase2ReadAOB+5) //"ACOdyssey.exe"+2DC5553)
label(originalcode3_enable)
registersymbol(originalcode3_enable)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
push rcx
mov rcx,pPlayerShipHealthBase
pop [rcx]

readmem(playerShipBase2ReadAOB+5,6)
reassemble(playerShipBase2ReadAOB+b)
readmem(playerShipBase2ReadAOB+10,4)
jmp exit3

originalcode3_enable:
readmem(playerShipBase2ReadAOB+5,15)
//mov rcx,rbx
//movaps xmm6,xmm0
//call ACOdyssey.exe+1FA38A0
//comiss xmm6,[rax+10]

exit3:
jmp playerShipBase2ReadAOB+14 //"ACOdyssey.exe"+2DC5562

///
pPlayerShipHealthBase:
///

playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
jmp newmem3

///***********************************************///
aobscanmodule(playerShipBase2Read2aAOB,ACOdyssey.exe,48 ** ** ** 49 ** ** 48 ** ** 48 ** ** FF ** ** ** ** ** 84 C0 74 ** 32 C0)
registersymbol(playerShipBase2Read2aAOB)

alloc(newmem10,2048,playerShipBase2Read2aAOB+7) //"ACOdyssey.exe"+2E07781)
label(originalcode10_enable)
registersymbol(originalcode10_enable)
label(exit10)

newmem10: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,pPlayerShipHealthBase
mov [rax],rcx

originalcode10_enable:
readmem(playerShipBase2Read2aAOB+7,14)
//mov rdi,rdx
//mov rax,[rcx]
//call qword ptr [rax+000000A8]
//test al,al

exit10:
jmp playerShipBase2Read2aAOB+15 //"ACOdyssey.exe"+2E0778F

///

playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
jmp newmem10

///***********************************************///
aobscanmodule(playerShipBase2Read2bAOB,ACOdyssey.exe,74 ** 48 ** ** 48 ** ** FF 92 ** ** ** ** 84 C0 0F 94 C0)
registersymbol(playerShipBase2Read2bAOB)

alloc(newmem11,2048,playerShipBase2Read2bAOB+2) //"ACOdyssey.exe"+2E7C4E9)
label(originalcode11_enable)
registersymbol(originalcode11_enable)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here
mov rdx,pPlayerShipHealthBase
mov [rdx],rax

originalcode11_enable:
readmem(playerShipBase2Read2bAOB+2,14)
//mov rdx,[rax]
//mov rcx,rax
//call qword ptr [rdx+000000E8]
//test al,al

exit11:
jmp playerShipBase2Read2bAOB+10 //"ACOdyssey.exe"+2E7C4FA

///

playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
jmp newmem11

///***********************************************///
aobscanmodule(petHealthRegenCallerAOB,ACOdyssey.exe,E8 ** ** ** ** 0F ** ** ** ** 0F ** ** ** ** 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(petHealthRegenCallerAOB)

label(bHavePet)
registersymbol(bHavePet)
label(pPet)
registersymbol(pPet)

alloc(newmem17,2048,petHealthRegenCallerAOB+5) //"ACOdyssey.exe"+239845B)
label(originalcode17_enable)
registersymbol(originalcode17_enable)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here
//lea rcx,[rcx]
mov rsi,bHavePet
mov sil,[rsi]
test sil,sil
jz @f
mov rsi,pPet
mov [rsi],rcx
test rcx,rcx
jz @f
cmp rcx,1
je @f
//mov rdi,[rcx+10]
mov rdi,[rsp+8]
mov [rsi+8],rdi
end17:

originalcode17_enable:
readmem(petHealthRegenCallerAOB+5,15)
//movaps xmm6,[rsp+30]
//movaps xmm7,[rsp+20]
//mov rsi,[rsp+58]

exit17:
jmp petHealthRegenCallerAOB+14 //"ACOdyssey.exe"+239846A

///
bHavePet:
dd 0
pPet:
///

petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
jmp newmem17

///***********************************************///
aobscanmodule(havePetFlagChkForPetHealthRegenAOB,ACOdyssey.exe,40 ** 48 ** ** ** 80 ** 38 00 48 ** ** 74 ** 48 ** ** ** ** E8 ** ** ** ** 48 ** ** E8)
registersymbol(havePetFlagChkForPetHealthRegenAOB)

alloc(newmem17b,2048,havePetFlagChkForPetHealthRegenAOB) //"ACOdyssey.exe"+23CE6F0)
label(originalcode17b_enable)
registersymbol(originalcode17b_enable)
label(exit17b)

newmem17b: //this is allocated memory, you have read,write,execute access
//place your code here
readmem(havePetFlagChkForPetHealthRegenAOB,6)
push rax
mov rdi,bHavePet
mov al,[rcx+38]
mov [rdi],al
test al,al
jnz @f

xor rax,rax
mov rdi,pPet
mov [rdi],rax
mov [rdi+8],rax

@@:
pop rax
readmem(havePetFlagChkForPetHealthRegenAOB+6,7)
jnz @f

push rax
mov rax,havePetFlagChkForPetHealthRegenAOB
xor rdi,rdi
mov dil,[rax+e]
lea rdi,[rax+rdi+f]
pop rax
jmp rdi

@@:
jmp exit17b

originalcode17b_enable:
readmem(havePetFlagChkForPetHealthRegenAOB,15)
//push rdi
//sub rsp,20
//cmp byte ptr [rcx+38],00
//mov rdi,rcx
//je ACOdyssey.exe+23CE74F

exit17b:
jmp havePetFlagChkForPetHealthRegenAOB+f //"ACOdyssey.exe"+23CE6FF

///

havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
jmp newmem17b

///***********************************************///
aobscanmodule(healthCalOnHitAOB,ACOdyssey.exe,8B ** 2B ** 41 ** ** 85 C0 7F ** 48 ** ** ** ** 44)
registersymbol(healthCalOnHitAOB)

label(bPlayerUndead)
registersymbol(bPlayerUndead)
label(bPetUndead)
registersymbol(bPetUndead)
label(bOneHitKill)
registersymbol(bOneHitKill)

alloc(newmem18,2048,healthCalOnHitAOB) //"ACOdyssey.exe"+22F5C35)
label(originalcode18_healthCalOnHitAOB)
registersymbol(originalcode18_healthCalOnHitAOB)
label(exit18)

newmem18: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,[rsp+78]

push rdi

mov rdi,pPlayer
test rdi,rdi
jz @f
cmp [rdi+8],rcx
je isplayer18
mov rdi,pPet
cmp [rdi+8],rcx
je ispet18

@@:
jmp notplayerpet18

//
isplayer18:
mov rcx,bPlayerUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
ispet18:
mov rcx,bHavePet
mov ecx,[rcx]
test ecx,ecx
jz notplayerpet18

@@://
mov rcx,bPetUndead
cmp byte ptr [rcx],1
jne end18
jmp dominhealth18

//
notplayerpet18:
mov rcx,bOneHitKill
cmp byte ptr [rcx],1
jne end18

mov rcx,pPlayer
test rcx,rcx
jz end18
mov rcx,[rcx+10]
cmp [rsp+48],rcx
je @f
cmp [rsp+58],rcx
je @f
jmp end18

@@:
jmp domaxdamage18

//
dominhealth18:
readmem(healthCalOnHitAOB,4)
//mov eax,ebp
//sub eax,edx

test eax,eax
jg @f
mov ebp,edx
inc ebp
@@:
jmp end18

//
domaxdamage18:
cmp edx,ebp
cmovl edx,ebp
jmp end18

//
end18:
mov rcx,healthCalOnHitAOB //"ACOdyssey.exe"+22F5C35
lea rcx,[rcx+b]
xor rdi,rdi
mov dil,[rcx-1]
lea rcx,[rcx+rdi]
pop rdi

readmem(healthCalOnHitAOB,9)
//mov eax,ebp
//sub eax,edx
//mov [r14],eax
//test eax,eax
jle @f
jmp rcx

@@:
readmem(healthCalOnHitAOB+b,5)
//mov rdx,[rsp+30]
jmp exit18

originalcode18_healthCalOnHitAOB:
readmem(healthCalOnHitAOB,16)
//mov eax,ebp
//sub eax,edx
//mov [r14],eax
//test eax,eax
//jg ACOdyssey.exe+22F5C5E
//mov rdx,[rsp+30]

exit18:
jmp healthCalOnHitAOB+10 //"ACOdyssey.exe"+22F5C45

///
bPlayerUndead:
dd 0
bPetUndead:
dd 0
bOneHitKill:
dd 0
///

healthCalOnHitAOB: //"ACOdyssey.exe"+22F5C35:
jmp newmem18

///***********************************************///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//////////////////////////
unregistersymbol(invisibleFlagChk12AOB)
//////////////////////////

dealloc(newmem)
playerFetchAOB:
readmem(originalcode_enable,21)
unregistersymbol(originalcode_enable)

unregistersymbol(bStealthMod)
unregistersymbol(pPlayer)
unregistersymbol(playerFetchAOB)

///***********************************************///
dealloc(newmem2)
playerShipBase1ReadAOB: //"ACOdyssey.exe"+2761780:
readmem(originalcode2_enable,17)
//db 48 83 EC 28 48 8B 41 B0 48 83 C1 B0 C6 44 24 30 00
//Alt: sub rsp,28
//Alt: mov rax,[rcx-50]
//Alt: add rcx,-50
//Alt: mov byte ptr [rsp+30],00
unregistersymbol(originalcode2_enable)

unregistersymbol(pPlayerShipBase1)

///***********************************************///
dealloc(newmem3)
playerShipBase2ReadAOB+5: //"ACOdyssey.exe"+2DC5553:
readmem(originalcode3_enable,15)
//db 48 8B CB 0F 28 F0 E8 42 E3 1D FF 0F 2F 70 10
//Alt: mov rcx,rbx
//Alt: movaps xmm6,xmm0
//Alt: call ACOdyssey.exe+1FA38A0
//Alt: comiss xmm6,[rax+10]
unregistersymbol(originalcode3_enable)

unregistersymbol(pPlayerShipHealthBase)

///***********************************************///
dealloc(newmem10)
playerShipBase2Read2aAOB+7: //"ACOdyssey.exe"+2E07781:
readmem(originalcode10_enable,14)
//db 48 8B FA 48 8B 01 FF 90 A8 00 00 00 84 C0
//Alt: mov rdi,rdx
//Alt: mov rax,[rcx]
//Alt: call qword ptr [rax+000000A8]
//Alt: test al,al
unregistersymbol(originalcode10_enable)

///***********************************************///
dealloc(newmem11)
playerShipBase2Read2bAOB+2: //"ACOdyssey.exe"+2E7C4E9:
readmem(originalcode11_enable,14)
//db 48 8B 10 48 8B C8 FF 92 E8 00 00 00 84 C0
//Alt: mov rdx,[rax]
//Alt: mov rcx,rax
//Alt: call qword ptr [rdx+000000E8]
//Alt: test al,al
unregistersymbol(originalcode11_enable)

///***********************************************///
dealloc(newmem17)
petHealthRegenCallerAOB+5: //"ACOdyssey.exe"+239845B:
readmem(originalcode17_enable,15)
//db 0F 28 74 24 30 0F 28 7C 24 20 48 8B 74 24 58
//Alt: movaps xmm6,[rsp+30]
//Alt: movaps xmm7,[rsp+20]
//Alt: mov rsi,[rsp+58]
unregistersymbol(originalcode17_enable)

unregistersymbol(bHavePet)
unregistersymbol(pPet)

///***********************************************///
dealloc(newmem17b)
havePetFlagChkForPetHealthRegenAOB: //"ACOdyssey.exe"+23CE6F0:
readmem(originalcode17b_enable,15)
//db 40 57 48 83 EC 20 80 79 38 00 48 8B F9 74 50
//Alt: push rdi
//Alt: sub rsp,20
//Alt: cmp byte ptr [rcx+38],00
//Alt: mov rdi,rcx
//Alt: je ACOdyssey.exe+23CE74F
unregistersymbol(originalcode17b_enable)

///***********************************************///
dealloc(newmem18)
healthCalOnHitAOB: //"ACOdyssey.exe"+22F5C35:
readmem(originalcode18_healthCalOnHitAOB,16)
//db 8B C5 2B C2 41 89 06 85 C0 7F 1E 48 8B 54 24 30
//Alt: mov eax,ebp
//Alt: sub eax,edx
//Alt: mov [r14],eax
//Alt: test eax,eax
//Alt: jg ACOdyssey.exe+22F5C5E
//Alt: mov rdx,[rsp+30]
unregistersymbol(originalcode18_healthCalOnHitAOB)

unregistersymbol(bPlayerUndead)
unregistersymbol(bPetUndead)
unregistersymbol(bOneHitKill)

///***********************************************///
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>24116</ID>
      <Description>"+1.5.4 v1 Info"</Description>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then
  getMainForm().CommentButton.doClick()
  memrec.color = 0x008000;
end;
{$asm}

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23930</ID>
      <Description>"Compact Mode"</Description>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

{$lua}

if not syntaxcheck then

  function cycleFullCompact( sender, force )
    local state = not( compactmenuitem.Caption == 'Compact View Mode' )
    if force ~= nil then
      state = not force
    end
    compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
    getMainForm().Splitter1.Visible = state
    getMainForm().Panel4.Visible = state
    getMainForm().Panel5.Visible = state
  end

  function addCompactMenu()
    if compactmenualreadyexists then return end
      local parent = getMainForm().Menu.Items
      compactmenuitem = createMenuItem( parent )
      parent.add( compactmenuitem )
      compactmenuitem.Caption = 'Compact View Mode'
      compactmenuitem.OnClick = cycleFullCompact
      compactmenualreadyexists = 'yes'
  end

  addCompactMenu()
  cycleFullCompact( nil, true )

end

[DISABLE]

{$lua}

if not syntaxcheck then
  cycleFullCompact( nil, false )
end
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24113</ID>
      <Description>"+Inventory"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>24634</ID>
          <Description>"+Inventory: Get Item"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( scan_GetItem,  ACOdyssey.exe, 48896C24?? 48897424?? 574883EC?? 8BEA 410FB6F1 488BD1 418BF8 488D0D???????? 41B9AB7590C6 4533C0 )
aobScanModule( scan_TlsIndex, ACOdyssey.exe, 8B05???????? 4881C210140000 41BFC?250000 )
aobScanModule( scan_TlsInit,  ACOdyssey.exe, 48895C24?? 48897424?? 574883EC?? 0FAE5C24?? 8B4424?? 89D7 0FBAE80F )
aobScanModule( scan_ScaleLvl, ACOdyssey.exe, 448BC7 488D5424?? 488D4C24?? E8???????? 8B8424???????? 488D4C24?? C64424??00 4533C9 40887424?? )


globalAlloc( newmem_GetItem,0x8000 )

registerSymbol( scan_ScaleLvl,bThreadLock,dqIID,dwLevel,pIIDList )

fullAccess( scan_ScaleLvl,8 )

define( pIIDList, newmem_GetItem+3000 )

CreateThread( call_GetItem )

newmem_GetItem:
  call_GetItem:
    sub rsp, 38
    //init thread's static TLS (__declspec(thread) long tls_x = val_y;)
      reassemble(scan_TlsIndex)  //mov eax, [7FF74523A268] //TlsIndex ACOD v1.1.3
      mov r8d, eax
      mov rax, gs:[58] //TLS
      mov rax, [rax+r8*8]
      lea r8, [TLS_static]
      mov qword ptr [rax+2498], r8         //init thread's val_2498
      mov dword ptr [r8+B40], FFFFFFFF //init thread's val_b40
   //init thread's dynamic TLS (TlsAlloc)
      mov r8d, FFFFFFFF
      mov edx, r8d
      mov ecx, 4000
      mov rax, scan_TlsInit
      call rax
    add rsp, 38

    sleep_loop:
      sub rsp, 28 //x64 shadow and align
        mov rcx, #100
        call kernel32.sleep
      add rsp, 28
      cmp byte ptr [bThreadLock], 0 //Sleep
      je short sleep_loop
      cmp byte ptr [bThreadLock], 1 //Proceed
      je short proceed
      cmp byte ptr [bThreadLock], 2 //Exit
      je short exit_A
    exit_A:
      ret
    proceed:
      mov [rsp+8], rsi
      mov [rsp+10], r15
      sub rsp, 38 //x64 shadow and align
      //call GetItem
        mov rsi, pIIDList
        mov r15, rsi
        cmp [rsi], 0
        je short get_single
        add rsi, 8
        jmp short get_loop
      get_single:
        mov rsi, dqIID
        mov r15, rsi
        add rsi, 8
      get_loop:
        mov dword ptr [rsp+20], 2 // Source, 2 - Loot, [01..1F]
        mov r9,  1                // 0 - Silent, 1 - Popup
        mov r8d,  [dwLevel]       // Level, 0 to autoscale
          cmp r8d, FFFFFFFF //do a patch of the leveling system
          jne short @f
          mov rdx, scan_ScaleLvl
          mov dword ptr [rdx], 48C03145 //xor r8d, r8d
      @@:
        mov edx, [r15]   // Amount
        mov rcx, [rsi]
        mov rax, scan_GetItem
        call rax
        add rsi, 8
        cmp [rsi], 0
          //restore patched bytes
          mov rdx, scan_ScaleLvl
          mov dword ptr [rdx], 48C78B44 //mov r8d, edi
        je short exit_loop
        jmp get_loop
      exit_loop:
        mov dword ptr [r15], 0
        mov byte ptr [bThreadLock], 0 //Sleep
        add rsp, 38
        mov rsi, [rsp+8]
        mov r15, [rsp+10]
        jmp sleep_loop
  align 10 CC

  bThreadLock:
    //0 - Sleep
    //1 - Proceed
    //2 - Exit
    db 0
    align 10 CC
  dqIID:
    dq 0000000000000001 //Amount
    dq 000001766330FC77 //Helmet of Ares, Head, usual
    dq 0000000000000000 //stop pattern
    align 10 CC
  dwLevel:
    dd 00000000 //Level, 0-autoscale, FFFFFFFF-Level 0
    align 10 CC

  TLS_static:
    //should be 0 filled mem

  pIIDList:       //newmem_GetItem+3000
    dq 0000000000000000 // stop pattern


[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
bThreadLock:
  db 2

unregisterSymbol(*)
//dealloc(newmem_GetItem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>24947</ID>
              <Description>"+Single Get Item"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>24635</ID>
                  <Description>"HashID"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>dqIID+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24966</ID>
                  <Description>"Level"</Description>
                  <DropDownList DisplayValueAsItem="1">00000000:Autoscale
00000001:QuestItem
FFFFFFFF:Crafting Materials, Artefact, other
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>4 Bytes</VariableType>
                  <Address>dwLevel</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24637</ID>
                  <Description>"Toggle to Get Single Item"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

dqIID:
  dq 0000000000000001
dwLevel:
  dd 00000000

bThreadLock:
  db 1  //Proceed

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

dqIID:
  dq 0000000000000001
dwLevel:
  dd 00000000

bThreadLock:
  db 1  //Proceed

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>24656</ID>
              <Description>"+Bulk Get Item (packs, quests, materials)"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>000000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>24948</ID>
                  <Description>"+Get Crafting Materials"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24957</ID>
                      <Description>"+Get 1 Ancient Tablet"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 000001506FB5C137 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24949</ID>
                      <Description>"+Get 1 Drachma"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 0000001BFDB9F655 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24953</ID>
                      <Description>"+Get 1 Iron Metal"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000150408F900F //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24962</ID>
                      <Description>"+Get 1 Obsidian Glass"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000150408F9013 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24955</ID>
                      <Description>"+Get 1 Olive Wood"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000150408F7320 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24960</ID>
                      <Description>"+Get 1 Precious Gem"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 000001506FB5C133 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24951</ID>
                      <Description>"+Get 1 Soft Leather"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 000001506FB5C135 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24863</ID>
                  <Description>"+Get Quest Items"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24864</ID>
                      <Description>"+Get 1 Artefact Fragment"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 0000015BD3E6413B //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24868</ID>
                      <Description>"+Get 1 Athenian Polemarch Military Seal"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000181110363A6 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000001

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24866</ID>
                      <Description>"+Get 1 Fort Polemarch Spartan Seal"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000180E5F4A238 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000001

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24870</ID>
                      <Description>"+Get 1 Heirloom Amulet"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000174272B1E39 //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000001

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24965</ID>
                      <Description>"+Get 1 Mysterious Fragment"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
  dq 00000188AF00CEDA //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd FFFFFFFF

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24853</ID>
                      <Description>"+Get 6 Chios Bear Skins"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>0000FF</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000006 //0 Amount
  dq 00000169714164EF //1
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000001

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24991</ID>
                  <Description>"+Get Abstergo Pack (10pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //Amount
    dq 000001868D0CA46B
    dq 000001868D0CDD90
    dq 000001868D0C6B20
    dq 000001868D0C6B46
    dq 000001868D0C6B33
    dq 000001844B09F4C0
    dq 000001868D0C3002
    dq 00000187342F7C6A
    dq 0000017E5A28084A
    dq 0000017E263E467D
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25288</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25171</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24992</ID>
                          <Description>"Entry Not Found (Abstergo Tactical Gloves)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24993</ID>
                          <Description>"Entry Not Found (Abstergo Ballistic Helmet)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24994</ID>
                          <Description>"Entry Not Found (Abstergo Combat Boots)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24995</ID>
                          <Description>"Entry Not Found (Abstergo Protective Vest)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24996</ID>
                          <Description>"Entry Not Found (Abstergo Utility Belt)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24997</ID>
                          <Description>"Entry Not Found (Abstergo Laser Bow)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24998</ID>
                          <Description>"Entry Not Found (Equine Enforcer)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24999</ID>
                          <Description>"Abstergo Soldiers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25000</ID>
                          <Description>"Future's Past"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25001</ID>
                          <Description>"Abstergo Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+50</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24862</ID>
                  <Description>"+Get Athena Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000186B3609F8F //1
    dq 00000186B36062B5 //2
    dq 00000186B360628F //3
    dq 00000186B36062A2 //4
    dq 00000186B360627C //5
    dq 00000186B3606269 //6
    dq 00000186B36B645B //7
    dq 00000189598A4377 //8
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25296</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25297</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24668</ID>
                          <Description>"Princess"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24669</ID>
                          <Description>"The Owl's Roost"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24670</ID>
                          <Description>"Sash of Athens"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24671</ID>
                          <Description>"Bracers Blessed by Ergane"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24672</ID>
                          <Description>"Athena Promachos Belt"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24673</ID>
                          <Description>"Hippia Legs"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24674</ID>
                          <Description>"Talon Dagger"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24676</ID>
                          <Description>"Athena"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24826</ID>
                  <Description>"+Get Celestial Pack (10pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 0000017E263E467E //1
    dq 0000017E5A28084B
    dq 00000187342F7C72
    dq 000001844B098152
    dq 00000186B3609FD3
    dq 00000186B3606327
    dq 00000186B360633A
    dq 00000186B360634D
    dq 00000186B3606360
    dq 00000186B3606373 //10
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25298</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25299</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24827</ID>
                          <Description>"Celestial Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24828</ID>
                          <Description>"The Celestial"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24829</ID>
                          <Description>"The Host"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24830</ID>
                          <Description>"Blade of the Ephemeral"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24831</ID>
                          <Description>"Ghost"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24832</ID>
                          <Description>"Celestial Legs"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24833</ID>
                          <Description>"Celestial Waist"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24834</ID>
                          <Description>"Celestial Torso"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24873</ID>
                          <Description>"Celestial Arms"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24872</ID>
                          <Description>"Celestial Crown"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+50</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24817</ID>
                  <Description>"+Get Dionysos Pack (9pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000189598A4379 //01
    dq 0000017D897391CB
    dq 000001868D0C3184
    dq 00000186B360283A
    dq 00000186B360284D
    dq 00000186B3602860
    dq 00000186B3602873
    dq 00000186B3602886
    dq 00000186B36B2A9F //09
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25314</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25313</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24818</ID>
                          <Description>"Dionysos' Muse"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24819</ID>
                          <Description>"Xiphos of Dionysos"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24820</ID>
                          <Description>"Sacred Bull"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24821</ID>
                          <Description>"Climbing-Vine Greaves"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24822</ID>
                          <Description>"Wine Waistband"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24823</ID>
                          <Description>"Robes for Ritual"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24824</ID>
                          <Description>"Veins of the Grape Vine"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24825</ID>
                          <Description>"Dionysos's Leopard-Skin"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24874</ID>
                          <Description>"Dionysos's Tears"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25449</ID>
                  <Description>"+Get Ezio's Roman Pack (6pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //quantity
dq 000001C9481FADE4
dq 000001C9481FADEF
dq 000001C9481FADFA
dq 000001C9481FAE05
dq 000001C9481FAE10
dq 000001C9481FAE1B
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25450</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25451</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25452</ID>
                          <Description>"Ezio's Roman Vambraces"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25453</ID>
                          <Description>"Ezio's Roman Hood"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25454</ID>
                          <Description>"Ezio's Roman Boots"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25455</ID>
                          <Description>"Ezio's Roman Robe"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25456</ID>
                          <Description>"Ezio's Roman Sash"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25457</ID>
                          <Description>"Milanese Sword"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25439</ID>
                  <Description>"+Get Ikaros Pack (7pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //Amount
dq 000001B22D23C58D
dq 000001B22D23C5D2
dq 000001B22D23C576
dq 000001B22D23C5BB
dq 000001B22D23C5A4
dq 000001B22D23C35C
dq 000001B22D23C55E
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25440</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25441</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25442</ID>
                          <Description>"Eagle Bracers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25443</ID>
                          <Description>"Eagle Mask"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25444</ID>
                          <Description>"Eagle Wrappings"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25445</ID>
                          <Description>"Eagle Harness"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25446</ID>
                          <Description>"Eagle Belt"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25447</ID>
                          <Description>"Daedalus"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25448</ID>
                          <Description>"Petomai"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25107</ID>
                  <Description>"+Get Lawgiver Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000186B3602899
    dq 00000186B36028AC
    dq 00000186B36028BF
    dq 00000186B36028D2
    dq 00000186B36028E5
    dq 000001844B09BAB9
    dq 00000186B3609F6D
    dq 00000189598A437A
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25315</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25312</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25108</ID>
                          <Description>"Lawgiver Greaves"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25109</ID>
                          <Description>"Lawgiver Belt"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25110</ID>
                          <Description>"Lawgiver Chest Plate"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25111</ID>
                          <Description>"Lawgiver Bracers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25112</ID>
                          <Description>"Lawgiver Hood"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25113</ID>
                          <Description>"Lawmaker"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25114</ID>
                          <Description>"Great Rhetra"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25115</ID>
                          <Description>"Lykourgos"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25144</ID>
                  <Description>"+Get Mighty Herakles Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //Amount
    dq 000001B11491C9AC
    dq 000001B11491C97E
    dq 000001B11491C950
    dq 000001B11491C995
    dq 000001B11491C967
    dq 000001B114918FFB
    dq 000001B114918FEF
    dq 000001B5197434CB
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25316</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25311</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25151</ID>
                          <Description>"Mighty Visage"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25147</ID>
                          <Description>"Mighty Harness"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25148</ID>
                          <Description>"Mighty Bracers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25150</ID>
                          <Description>"Mighty Belt"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25152</ID>
                          <Description>"Mighty Greaves"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25149</ID>
                          <Description>"Tartaros Charger"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25153</ID>
                          <Description>"Axe of Trials"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25328</ID>
                          <Description>"Herakles"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24914</ID>
                  <Description>"+Get Mythical Creature Set (5pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000186B3609D8F
    dq 00000186B3609DA2
    dq 00000186B3609D56
    dq 00000186B3609D7C
    dq 00000186B3609D69 //05
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25317</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25310</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24915</ID>
                          <Description>"Arms of Abomination"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24916</ID>
                          <Description>"Helm of Abomination"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24917</ID>
                          <Description>"Boots of Abomination"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24918</ID>
                          <Description>"Armor of Abomination"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24919</ID>
                          <Description>"Belt of Abomination"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24890</ID>
                  <Description>"+Get Nemean Lion Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 000001844B0A2F1E
    dq 000001844B0A2F31
    dq 000001844B0A2EE5
    dq 000001868D0C2FE0
    dq 000001844B0A2F0B
    dq 00000181F8611BB9
    dq 000001844B0A2EF8 //7
    dq 00000189598A4372
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25318</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25309</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24891</ID>
                          <Description>"Bracers of the Brave"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24892</ID>
                          <Description>"The Lion's Pride"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24893</ID>
                          <Description>"Hunter's Treads"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24894</ID>
                          <Description>"Nemea"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24895</ID>
                          <Description>"King of the Forest"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24896</ID>
                          <Description>"Nemean Claws"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24897</ID>
                          <Description>"The Lion's Snare"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24938</ID>
                          <Description>"Lionheart"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25415</ID>
                  <Description>"+Get Northern Traveler's Pack (6pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //quantity
dq 000001C9D8400654
dq 000001C9D840065F
dq 000001C9D840066A
dq 000001C9D8400675
dq 000001C9D8400680
dq 000001C9D840068B
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25416</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25417</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25418</ID>
                          <Description>"Northern Traveler's Bracers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25419</ID>
                          <Description>"Northern Traveler's Helmet"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25420</ID>
                          <Description>"Northern Traveler's Boots"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25421</ID>
                          <Description>"Northern Traveler's Gambeson"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25422</ID>
                          <Description>"Northern Traveler's Waist"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25423</ID>
                          <Description>"Dane Axe"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24808</ID>
                  <Description>"+Get Odysseus Pack (11pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000189598A4376
    dq 00000187342F7C62
    dq 0000017E263E467C
    dq 0000017E5A280849
    dq 00000186B3609FB1
    dq 00000186B3606314
    dq 00000186B36062C8
    dq 00000186B36062DB
    dq 00000186B3606301
    dq 00000186B36062EE //10
    dq 000001844B09F4AC //11
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25319</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25308</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24809</ID>
                          <Description>"Odysseus"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24810</ID>
                          <Description>"Sirens"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24811</ID>
                          <Description>"Mermaid Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24812</ID>
                          <Description>"Siren's Song"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24813</ID>
                          <Description>"Trojan Horse"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24814</ID>
                          <Description>"Odysseus Bracers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24815</ID>
                          <Description>"Odysseus Hood"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24816</ID>
                          <Description>"Odysseus Greaves"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24877</ID>
                          <Description>"Odysseus Breastplate"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24876</ID>
                          <Description>"Odysseus Belt"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24875</ID>
                          <Description>"Odysseus's Bow"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+58</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24657</ID>
                  <Description>"+Get Pegasos Mithycal Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 000001844B0A2ED2 //1
    dq 000001844B0A2EAC //2
    dq 000001844B0A2EBF //3
    dq 000001844B0A2E99 //4
    dq 000001844B0A2E86 //5
    dq 000001844B09813E //6
    dq 000001868D0C2FBE //7
    dq 00000189598A4371 //8
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25327</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25307</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24659</ID>
                          <Description>"The Peak of Pegasos"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24663</ID>
                          <Description>"Plumage of Protection"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24662</ID>
                          <Description>"Feathered Bracers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24661</ID>
                          <Description>"Pegasos's Embrace"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24660</ID>
                          <Description>"Winged Guardian's Greaves"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24665</ID>
                          <Description>"Chrysaor"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24666</ID>
                          <Description>"Pegasos"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24675</ID>
                          <Description>"Pegasos"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25155</ID>
                  <Description>"+Get Sacred Oracle Pack (7pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //Amount
    dq 000001B11497BCDF
    dq 000001B11497BCB1
    dq 000001B11497BCC8
    dq 000001B11497BC9A
    dq 000001B11497BC83
    dq 000001B11497BCEA
    dq 000001B114986A8C
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25321</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25306</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25156</ID>
                          <Description>"Sacred Covering"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25157</ID>
                          <Description>"Sacred Vestments"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25158</ID>
                          <Description>"Sacred Vambraces"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25159</ID>
                          <Description>"Sacred Waistband"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25329</ID>
                          <Description>"Sacred Wrappings"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25160</ID>
                          <Description>"Sacred Deer"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25161</ID>
                          <Description>"The Hunter's Blade"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25289</ID>
                  <Description>"+Get Hydra Naval Pack (3pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //Amount
    dq 000001B5197434C3
    dq 000001B5197434BB
    dq 000001B5197434B3
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25322</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25305</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25290</ID>
                          <Description>"Serpent's Fang"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25291</ID>
                          <Description>"Hydra Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25292</ID>
                          <Description>"The Godlings"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24982</ID>
                  <Description>"+Get Shark Pack (12pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000186B3609D30 //1 Armor
    dq 00000186B3609D43 //2 Armor
    dq 00000186B3609CF7 //3 Armor
    dq 00000186B3609D1D //4 Armor
    dq 00000186B3609D0A //5 Armor
    dq 000001844B09BB31 //6 Heavy Blunt
    dq 00000186B3609FF5 //7 Phobos
    dq 00000187342F7C82 //8 Crew
    dq 0000017E5A28084D //9 Ship Design
    dq 0000017E263E4680 //10 Figurehead
    dq 00000189598A4373 //11 Lieutenant - Biter
    dq 00000189598A4374 //12 Lieutenant - Captain Octopus
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25323</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25304</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24983</ID>
                          <Description>"Claws of the Sea Dog"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24984</ID>
                          <Description>"Dorsal Fin"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24985</ID>
                          <Description>"Reef Guards"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24986</ID>
                          <Description>"Top of the Food Chain"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24987</ID>
                          <Description>"Carnivore's Supply"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24988</ID>
                          <Description>"Hammerhead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24989</ID>
                          <Description>"Acheilos"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24990</ID>
                          <Description>"Teethers"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25002</ID>
                          <Description>"Shark Bite"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25003</ID>
                          <Description>"Shark Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25005</ID>
                          <Description>"Biter"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+58</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25004</ID>
                          <Description>"Captain Octopus"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+60</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24902</ID>
                  <Description>"+Get Spartan Renegate Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000189598A4370
    dq 000001844B09F571
    dq 000001844B09F584
    dq 000001844B09F538
    dq 000001844B0A2F44
    dq 000001868D0C2F9C
    dq 000001844B09F55E
    dq 000001844B09F54B //08
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25320</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25303</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24903</ID>
                          <Description>"Spartan Renegade"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24904</ID>
                          <Description>"Warrior's Restraints"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24905</ID>
                          <Description>"Bloodstained Hood"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24906</ID>
                          <Description>"Blood Waders"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24907</ID>
                          <Description>"Black Thorn"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24908</ID>
                          <Description>"Spartan Renegade / Horse"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24909</ID>
                          <Description>"Armor of Rebellion"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24910</ID>
                          <Description>"Weight of War"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>25095</ID>
                  <Description>"+Get Sphinx Pack (11pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000186B3609CD1
    dq 00000186B3609CE4
    dq 00000186B3606386
    dq 00000186B3609CBE
    dq 00000186B3606399
    dq 00000181F8611BD9
    dq 000001868D0C31A6
    dq 0000017E5A28084C
    dq 00000189598A437B
    dq 0000017E263E467F
    dq 00000187342F7C7A
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25324</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25302</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25096</ID>
                          <Description>"Arms of the Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25097</ID>
                          <Description>"Crown of the Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25098</ID>
                          <Description>"Greaves of the Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25099</ID>
                          <Description>"Armor of the Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25100</ID>
                          <Description>"Belt of the Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25101</ID>
                          <Description>"Enigma"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25102</ID>
                          <Description>"Riddle"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25103</ID>
                          <Description>"The Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25104</ID>
                          <Description>"Sphinx"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25105</ID>
                          <Description>"Sphinx Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>25106</ID>
                          <Description>"The Hush"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+58</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24878</ID>
                  <Description>"+Get Underworld Mythical Pack (11pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000186B3609DAB
    dq 00000186B3602814
    dq 00000186B3602827
    dq 00000186B36027DB
    dq 00000186B3602801
    dq 00000186B36027EE
    dq 00000186B36B2A8B
    dq 00000189598A4375
    dq 00000187342F7C5A
    dq 0000017E263E467B
    dq 0000017E5A280848
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25325</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25301</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24879</ID>
                          <Description>"Cerberus’s Offspring"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24880</ID>
                          <Description>"Bracers of the Underworld"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24881</ID>
                          <Description>"Helm of the Underworld"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24882</ID>
                          <Description>"Greaves of the Underworld"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24883</ID>
                          <Description>"Chest Plate of the Underworld"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24884</ID>
                          <Description>"Belt of the Underworld"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24885</ID>
                          <Description>"Bident of the Underworld"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24886</ID>
                          <Description>"Charon"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24887</ID>
                          <Description>"Ferrymen"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+48</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24888</ID>
                          <Description>"Reaper Figurehead"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+50</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24889</ID>
                          <Description>"The Last Ferry"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+58</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>24835</ID>
                  <Description>"+Get Wild Boar Pack (8pcs)"</Description>
                  <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

pIIDList: //512 slots max
  dq 0000000000000001 //0 Amount
    dq 00000189598A4378 //1
    dq 00000186B3606256 //2
    dq 00000186B3606230 //3
    dq 00000186B3606243 //4
    dq 00000186B360620A //5
    dq 00000186B360621D //6
    dq 000001868D0C31C8 //7
    dq 000001844B09BACD //8
  dq 0000000000000000 //stop pattern

dwLevel:
  dd 00000000

bThreadLock:
  db 1  //wake the thread up

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>25326</ID>
                      <Description>"==Done!"</Description>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25300</ID>
                      <Description>"[Debug Info]"</Description>
                      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24836</ID>
                          <Description>"Artemis"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24837</ID>
                          <Description>"Barbaric Skull"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+10</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24838</ID>
                          <Description>"Bone Graveyard"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+18</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24839</ID>
                          <Description>"Spiny Boar Hide"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+20</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24840</ID>
                          <Description>"The Wild Hunt"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+28</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24841</ID>
                          <Description>"Skeletal Remains"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+30</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24842</ID>
                          <Description>"Wild Boar"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+38</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24843</ID>
                          <Description>"The Underbite"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>pIIDList+40</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>24539</ID>
          <Description>"+Inventory: Editor"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local function _readInteger( Input )
  local Value = readInteger( Input ) or 0
  --ret signed Integer
  return (Value + 0x80000000) % 0x100000000 - 0x80000000
end

local function GetHashNameTbl( input )
  local addr, str, arr_loc;
  arr_loc={};

  for i=1, #input, 1 do
    addr = readQword( input[i] ) or 0;
    addr = addr + 0x38
    addr = readQword( addr ) or 0
    if readBytes( addr, 1 ) == 0xE9 then
      addr = addr + _readInteger( addr + 0x1 ) + 0x5
    end
    addr = addr + _readInteger( addr + 0x3 ) + 0x7
    addr = readQword( addr ) or 0
    str = readString( readQword( addr + 0x18 ), 300, false ) or ""
    addr = readInteger( addr + 0x24 ) or 0
    table.insert(arr_loc, {addr,str} )
  end
  return arr_loc
  --{ObjHash,objName}
end

local function GetMemRecTbl(o,l,s, tbl)
-- o - root memrec to start recursion from
-- l - depth level
-- s - memrec to find
  if not o then return {} end;
  for i=1, o.Count,1 do
   --print(string.rep('\t',l-1),o.Child[i-1].Description)
   if (o.Child[i-1].Description:find(s)) then
     table.insert(tbl, o.Child[i-1] );
   end
   if o.Count~=0 then
     GetMemRecTbl(o.Child[i-1], l+1, s, tbl);
   end
  end
  return tbl
  --{memrec}
end

local function delChildren(o,s)
  local again;
  for _,obj in ipairs(o) do
    repeat
      again = false;
      for i=1,obj.Count, 1 do
        if (obj.Child[i-1].Description:find(s)) then
          obj.Child[i-1].Delete();
          again= true;
          break;
        end
      end
    until(not again)
  end
end

local function GetModifiersTbl(val)
  local qw, ListSize;
  local arr={};
    qw = readQword(val) or 0
    qw = readQword(qw+0x28) or 0;
    qw = readQword(qw) or 0;
    qw = readQword(qw) or 0;
    ListSize = readInteger(qw+0x24) or 0;
    ListSize = bShr(ListSize, 0x11) -- %20000
    qw = readQword(qw+0x1C) or 0;
    for i=1, ListSize, 1 do
      table.insert(arr, readQword(qw+(i-1)*8) or 0 )
    end
  return arr
end

local function GetDescription(in_opt)
  local ret;
  if lookup_tbl[in_opt] then
    ret = lookup_tbl[in_opt]["descr"];
  else
    ret = lookup_tbl[0x00000000]["descr"];
  end;
  return ret
end

local function CreateMemRec(in_obj,opt, idx)
  local mr, ret;
  local lt = lookup_tbl[opt];

  if lt then --key found
    ret = true;
  else --key not found, create default element
    ret = false;
    lt = lookup_tbl[0x00000000];
  end
  for i=1, #lt['offsets'],1 do
    if #lt['offsets'][i] &gt; 0 then --vector is non-empty, do create
      mr = AddressList.createMemoryRecord();
      mr.appendToEntry(in_obj);
      mr.DontSave = true;

      if type(lt['type'])=='table' then
        mr.Type = lt['type'][i];
      else
        mr.Type = lt['type'];
      end

      mr.setAddress('+0');
      mr.setDescription(GetDescription(opt));
      mr.Color = in_obj.Color;
      mr.OffsetCount = #lt['offsets'][i];
      for j=1, #lt['offsets'][i],1 do
        if lt['offsets'][i][j] == -1 then
          mr.Offset[j-1]  = (idx-1)*8;
        else
          mr.Offset[j-1] = lt['offsets'][i][j];
        end
      end
    end
  end
  return ret;
end

local function GetPerkCount(tbl)
  local ListSize = -1;
  ListSize = readInteger(tonumber(tbl[1].Parent.Value,16) + 0x2E) or 0;
  ListSize = bShr(ListSize, 0x11)
  return ListSize
end

local function ResetUIPerksLieutenants(MemRecTbl)
  local dwPerkCount, oSlotMemrec, mr, mr_sub1
    oSlotMemrec = MemRecTbl[1].Parent
    dwPerkCount = GetPerkCount(MemRecTbl);
    for i=1, #MemRecTbl, 1 do --delete all pPerk memrec
      MemRecTbl[i].Delete();
      MemRecTbl[i] = nil --preserves table pointer as "MemRecTbl = {};" -- generates new one
    end
    for i=1, dwPerkCount, 1 do
      mr = AddressList.createMemoryRecord();
      mr.appendToEntry(oSlotMemrec);
      mr.Type = vtQword;
      mr.setAddress('+0');
      mr.setDescription('pPerk'..i);
      mr.Color = 0x000000;
      mr.ShowAsHex = true;
      mr.Options = '[moAllowManualCollapseAndExpand]'
      mr.OffsetCount = 2
      mr.Offset[0] = (i-1)*8
      mr.Offset[1] = 0x26
        mr_sub1 = AddressList.createMemoryRecord();
        mr_sub1.appendToEntry(mr);
        mr_sub1.Type = vtQword
        mr_sub1.setAddress('+0');
        mr_sub1.setDescription('HashId');
        mr_sub1.Color = 0xC0C0C0;
        mr_sub1.ShowAsHex = true;
        mr_sub1.OffsetCount = 1
        mr_sub1.Offset[0] = 0x10
      table.insert(MemRecTbl, mr)
    end
end

lookup_tbl = {
   [0x00000000]={descr='DamageUnknown (may not work)', type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x242571D6]={descr='DamageHunter',                 type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x7C9951C5]={descr='DamageAssassin',               type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xCB27B9AE]={descr='DamageWarrior',                type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x0CC29765]={descr='DamageElemental',   type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xBD78404B]={descr='DamageElemental',   type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x0C065A90]={descr='DamageElemental',   type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x95D4B62E]={descr='DamageElemental',   type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x00743CCF]={descr='DamageAdrenaline',  type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x3674FB4B]={descr='DamageAdrenaline',  type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x6D470A89]={descr='DamageHeadShot',    type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xDC87B36E]={descr='DamageWeapon',      type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x004FCA34]={descr='DamageCritChance',  type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xB60DC3E8]={descr='DamageCritChance',  type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x95ECB86F]={descr='DamageCritChance',  type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x16AA730A]={descr='DamageCritChance',  type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xFF4F6C18]={descr='DamageCritDmg',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xFC38348A]={descr='DamageCritDmg',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x814838EF]={descr='DamageRanged',      type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xE6742EB3]={descr='DamageCondition',   type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xF8A2045B]={descr='DamageSpeed',       type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x956B9A0A]={descr='DamageArmor',       type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x9BED4C11]={descr='DamageArmor',       type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xC83B41AF]={descr='DamageChance',      type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xC6BB05E7]={descr='DamageChance',      type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xA1593345]={descr='DamageHealth',      type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x05CAA1A4]={descr='DamageHealth',      type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x87456946]={descr='DamageBuildup',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xEF33CABE]={descr='DamageTamed',       type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x9DA77F9E]={descr='DamageTamed',       type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xB97BBFEC]={descr='DamageSpecial',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x0CCD7F57]={descr='DamagePhysical',    type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x837219A1]={descr='DamageParry',       type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xE88D0B55]={descr='DamageConsume',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xCDD442B5]={descr='DamageConsume',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x86A99152]={descr='DamageCharge',      type=vtSingle, offsets={{0x14, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x30372CEA]={descr='DamageAdrenaline',  type=vtSingle, offsets={{0x14, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xF90EAAE3]={descr='DamageDeath',       type=vtSingle, offsets={{0x18, -1, 0x1C, 0, 0, 0x28, 0}, {0x1C, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x6C5FA1DD]={descr='DamageDuration',    type=vtDword,  offsets={{0x1C, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x8272F805]={descr='DamageCost',        type=vtDword,  offsets={{0x1C, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x8C1CF2C0]={descr='DamageSpecial',     type=vtDword,  offsets={{0x28, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x3DC5E875]={descr='DamageHealthCap',   type=vtSingle, offsets={{0, 0x14, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x92FCE6A1]={descr='DamageChance',      type=vtSingle, offsets={{0, 0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xD7CD2B17]={descr='DamageAction',      type=vtSingle, offsets={{0x28, 0x10, 0, 0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0xC571DBDC]={descr='DamageAction',      type=vtSingle, offsets={{0x28, 0x10, 0, 0x28, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x02C45038]={descr='DamageBattle',      type=vtSingle, offsets={{0x10, 0, 0x1C, 0, 0, 0x28, 0, 0x18, -1, 0x1C, 0, 0, 0x28, 0}, {0x10, 8, 0x1C, 0, 0, 0x28, 0, 0x18, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x4B0CF79D]={descr='DamageAffliction',  type=vtSingle, offsets={{0x20, 0, 0x1C, 0, 0, 0x28, 0, 0x18, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x7F4D59DC]={descr='DamageBuffOnFight', type=vtSingle, offsets={{0x10, 0, 0x1C, 0, 0, 0x28, 0, 0x28, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x4745FA9F]={descr='DamageBuffOnHit',   type=vtSingle, offsets={{                                                           }} },
   [0xD175F29A]={descr='',                  type=vtSingle, offsets={{                                                           }} },
   [0x07ACCF3F]={descr='',                  type=vtSingle, offsets={{                                                           }} },
   [0xBAE382FF]={descr='DamageArrowPierce', type=vtSingle, offsets={{                                                           }} },
   [0x8F49A689]={descr='',                  type=vtSingle, offsets={{                                                           }} },
   [0x87255DBF]={descr='DamageEnemy',       type={vtSingle,vtDword}, offsets={{0x10, 0, 0x1C, 0, 0, 0x28, 0}, {0x20, 0, 0x1C, 0, 0, 0x28, 0}} },
   [0x38A573F6]={descr='DamageAction',      type=vtSingle, offsets={{0x28, 0, 0x10, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x81FE9EAC]={descr='DamageBoat',        type=vtSingle, offsets={{0x14, -1, 0x1C, 0, 0, 0x28, 0}} },
   [0x8B58FDA2]={descr='DamageCritDmg',     type=vtSingle, offsets={{0x10, -1, 0x1C, 0, 0, 0x28, 0}} }
   }

function main_editor(caller_id)
--1 - Inventory
--2 - Lieutenants
  local addr, strSearch;
  local HashNameTbl, ModifiersTbl, MemRecTbl;

  if caller_id == 1 then
    strSearch = '+Inventory Page';
  elseif caller_id == 2 then
    strSearch = '+Special Lieutenants'
  else
    strSearch = 'Hi, Sun! :)';
  end

  addr = AddressList.getMemoryRecordByDescription(strSearch);
  if addr then
    MemRecTbl = GetMemRecTbl(addr,1, 'Perk', {});  --get all pPerks memrecs
    if caller_id == 2 then
       ResetUIPerksLieutenants(MemRecTbl);
    end
    delChildren(MemRecTbl,'Damage'); -- delete all child memrecs 'Damage*'
    for _,obj in ipairs(MemRecTbl) do
      obj.Parent.reinterpret(); --update UI values by refreshing parent, as symbol is assigned on parent
      ModifiersTbl = GetModifiersTbl(tonumber(obj.GetValue(),16))  --obj.Value
      HashNameTbl = GetHashNameTbl(ModifiersTbl)
      for i=1, #HashNameTbl, 1 do
        if not CreateMemRec(obj,HashNameTbl[i][1], i) then
          outputDebugString("::"..string.format( "%s ObjHash:%X ObjName:%s ListSize: %X", obj.Value, HashNameTbl[i][1],HashNameTbl[i][2], #ModifiersTbl ) )
        end
      end
    end
  end
end


{$asm}

[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>23975</ID>
              <Description>"+Inventory Page"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}
aobScanModule( INJECT_inventory, ACOdyssey.exe, 498B8690020000 488D9688010000 )
alloc( newmem_inventory,0x1000 )

registerSymbol( INJECT_inventory,dqInventorySlotPtr )

loadlibrary( luaclient-x86_64.dll )
luacall( openLuaServer('CELUASERVER') )

CELUA_ServerName:
  db 'CELUASERVER',0

newmem_inventory:
  //inject
    mov [dqInventorySlotPtr], rcx
    sub rsp, 8 //16 bytes alignment: 8 bytes call, 8 bytes push
      call call_lua_proc
    add rsp, 8
  //original code
    mov rax,[r14+00000290]
    lea rdx,[rsi+00000188]
    jmp return_inventory
  align 10 CC

  dqInventorySlotPtr:
    dq 0
    align 10 CC

  funcid:
    dd 0
    align 10 CC

  funcname:
    db 'main_editor',0
    align 10 CC

  ///////////////
  call_lua_proc:
  ///////////////
    sub rsp,70
      //keep #16 bytes alignment
      //20 x64 shadow space
      //40 old registers  rax, rcx, rdx, r8, r9, r10, r11 - volitile (do save)
      //10 paramlist
      mov [rsp+20],rax
      mov [rsp+28],rcx
      mov [rsp+30],rdx
      mov [rsp+38],r8
      mov [rsp+40],r9
      mov [rsp+48],r10
      mov [rsp+50],r11
      //mov [rsp+58],xx //16 bytes alignment

      //params list -&gt; load to edx
      mov qword ptr [rsp+60],01 //arg01 -&gt; load to r8
      mov [rsp+68],rbx          //arg02

      mov ecx,[funcid]
      test ecx,ecx
      jne short hasrefid
          //no reference yet
          mov rcx,funcname
          call CELUA_GetFunctionReferenceFromName
          mov [funcid],eax
          mov ecx,eax
      hasrefid:
          //here ecx contains the referenceid
          mov edx,#1      //numofparams
          lea r8,[rsp+60] //params
          mov r9,0        //0=no async, 1=async
          call CELUA_ExecuteFunctionByReference
          //restoring the possibly changed registers
          mov rax,[rsp+20]
          mov rcx,[rsp+28]
          mov rdx,[rsp+30]
          mov r8, [rsp+38]
          mov r9, [rsp+40]
          mov r10,[rsp+48]
          mov r11,[rsp+50]
          //mov xx,[rsp+58]
    add rsp,70 //free stackspace
    ret
    align 10 CC


INJECT_inventory:
  jmp far newmem_inventory //#14 bytes
  return_inventory:


[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_inventory:
  db 49 8B 86 90 02 00 00 48 8D 96 88 01 00 00

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>23976</ID>
                  <Description>"pSlotSettings"</Description>
                  <Options moAllowManualCollapseAndExpand="1"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>808080</Color>
                  <VariableType>Array of byte</VariableType>
                  <ByteLength>0</ByteLength>
                  <Address>dqInventorySlotPtr</Address>
                  <Offsets>
                    <Offset>+8</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>23983</ID>
                      <Description>"Level"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+74</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23982</ID>
                      <Description>"Rarity"</Description>
                      <DropDownList DisplayValueAsItem="1">1:Rare
2:Legendary
3:Epic
4:Common
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+6C</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23977</ID>
                      <Description>"pItem"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>000000</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+8</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23979</ID>
                          <Description>"Category"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>String</VariableType>
                          <Length>100</Length>
                          <Unicode>0</Unicode>
                          <CodePage>0</CodePage>
                          <ZeroTerminate>1</ZeroTerminate>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+0</Offset>
                            <Offset>+10</Offset>
                            <Offset>+0</Offset>
                            <Offset>+28</Offset>
                            <Offset>+0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>23978</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>24093</ID>
                          <Description>"SubCategory"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>String</VariableType>
                          <Length>100</Length>
                          <Unicode>0</Unicode>
                          <CodePage>0</CodePage>
                          <ZeroTerminate>1</ZeroTerminate>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>0</Offset>
                            <Offset>+10</Offset>
                            <Offset>+0</Offset>
                            <Offset>+0</Offset>
                            <Offset>+30</Offset>
                            <Offset>+0</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23980</ID>
                      <Description>"pItemNameOverride"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+50</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23981</ID>
                          <Description>"HashId (if 0, then no override)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23984</ID>
                      <Description>"pPerk1"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>80</Offset>
                        <Offset>20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24166</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23990</ID>
                      <Description>"pPerk2 (blacksmith)"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>88</Offset>
                        <Offset>20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23991</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23986</ID>
                      <Description>"pPerk3"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>90</Offset>
                        <Offset>20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23987</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23988</ID>
                      <Description>"pPerk4"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>98</Offset>
                        <Offset>20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23989</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>23992</ID>
              <Description>"+Ship Cosmetics"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobScanModule( INJECT_ship_cosmetics, ACOdyssey.exe, 48B956C852434D010000 498DAF90020000 483BC1 )

alloc( newmem_ship_cosmetics,0x1000 )

registerSymbol( INJECT_ship_cosmetics,dqShipCosmeticsSlotPtr )

newmem_ship_cosmetics:
  //original code
    mov rcx,0000014D4352C856
    lea rbp,[r15+00000290]
    cmp rax,rcx
  //inject
    jne short @f  // not Crew Theme
      lea rcx, [r12+38]
      mov [dqShipCosmeticsSlotPtr], rcx
    @@:
      mov [dqShipCosmeticsSlotPtr], rbp
    jmp return_ship_cosmetics
    align 10 CC

dqShipCosmeticsSlotPtr:
  dq baadf00d
  align 10 CC

INJECT_ship_cosmetics:
  jmp far newmem_ship_cosmetics //#14 bytes
  db 90 90 90 90 90 90
  return_ship_cosmetics:

{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_ship_cosmetics:
  db 48 B9 56 C8 52 43 4D 01 00 00 49 8D AF 90 02 00 00 48 3B C1

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>23993</ID>
                  <Description>"pSlotSettings"</Description>
                  <Options moAllowManualCollapseAndExpand="1"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>808080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>dqShipCosmeticsSlotPtr</Address>
                  <Offsets>
                    <Offset>+8</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24000</ID>
                      <Description>"Level"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+74</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23999</ID>
                      <Description>"Rarity"</Description>
                      <DropDownList DisplayValueAsItem="1">1:Rare
2:Legendary
3:Epic
4:Common
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+6C</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23994</ID>
                      <Description>"pItem"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+8</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23996</ID>
                          <Description>"Category"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>808080</Color>
                          <VariableType>String</VariableType>
                          <Length>100</Length>
                          <Unicode>0</Unicode>
                          <CodePage>0</CodePage>
                          <ZeroTerminate>1</ZeroTerminate>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+0</Offset>
                            <Offset>+10</Offset>
                            <Offset>+0</Offset>
                            <Offset>+28</Offset>
                            <Offset>+0</Offset>
                          </Offsets>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>23995</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>23997</ID>
                      <Description>"pItemNameOverride"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+50</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>23998</ID>
                          <Description>"HashId (if 0, then no override)"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24001</ID>
                      <Description>"pPerk1"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+80</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24002</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24007</ID>
                      <Description>"pPerk2 (blacksmith)"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+88</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24008</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24003</ID>
                      <Description>"pPerk3"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+90</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24004</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>24005</ID>
                      <Description>"pPerk4"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+98</Offset>
                        <Offset>+20</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>24006</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>+10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>24022</ID>
              <Description>"+Special Lieutenants"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}
aobScanModule( INJECT_special_lieutenants, ACOdyssey.exe, 8B9368020000 488BCB 4889742430 )

alloc( newmem_special_lieutenants, 0x1000 )
registerSymbol( INJECT_special_lieutenants,dqShipLieutenantViewModel )

loadlibrary( luaclient-x86_64.dll )
luacall( openLuaServer('CELUASERVER') )

CELUA_ServerName:
  db 'CELUASERVER',0

newmem_special_lieutenants:
  //inject
    mov [dqShipLieutenantViewModel], rdi
    sub rsp, 8 //16 bytes alignment: 8 bytes call, 8 bytes push
      call call_lua_proc
    add rsp, 8
  //original code
    mov edx,[rbx+00000268]
    mov rcx,rbx
    mov [rsp+30],rsi
    jmp return_special_lieutenants
    align 10 CC

  dqShipLieutenantViewModel:
    dq 0
    align 10 CC

  funcid:
    dd 0
    align 10 CC

  funcname:
    db 'main_editor',0
    align 10 CC

  ///////////////
  call_lua_proc:
  ///////////////
    sub rsp,70
      //keep #16 bytes alignment
      //20 x64 shadow space
      //40 old registers  rax, rcx, rdx, r8, r9, r10, r11 - volitile (do save)
      //10 paramlist
      mov [rsp+20],rax
      mov [rsp+28],rcx
      mov [rsp+30],rdx
      mov [rsp+38],r8
      mov [rsp+40],r9
      mov [rsp+48],r10
      mov [rsp+50],r11
      //mov [rsp+58],xx //16 bytes alignment

      //params list -&gt; load to edx
      mov qword ptr [rsp+60],02 //arg01 -&gt; load to r8
      mov [rsp+68],rbx          //arg02

      mov ecx,[funcid]
      test ecx,ecx
      jne short hasrefid
          //no reference yet
          mov rcx,funcname
          call CELUA_GetFunctionReferenceFromName  //Basically calls createRef(functionname) and returns the value
          mov [funcid],eax
          mov ecx,eax
      hasrefid:
          //here ecx contains the referenceid
          mov edx,#1      //numofparams
          lea r8,[rsp+60] //params
          mov r9,0        //0=no async, 1=async
          call CELUA_ExecuteFunctionByReference
          //restoring the possibly changed registers
          mov rax,[rsp+20]
          mov rcx,[rsp+28]
          mov rdx,[rsp+30]
          mov r8, [rsp+38]
          mov r9, [rsp+40]
          mov r10,[rsp+48]
          mov r11,[rsp+50]
          //mov xx,[rsp+58]
    add rsp,70 //free stackspace
    ret
    align 10 CC


INJECT_special_lieutenants:
  jmp far newmem_special_lieutenants //#14 bytes
  return_special_lieutenants:

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_special_lieutenants:
  db 8B 93 68 02 00 00 48 8B CB 48 89 74 24 30

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>24355</ID>
                  <Description>"pSlotSettings"</Description>
                  <Options moAllowManualCollapseAndExpand="1"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>808080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>dqShipLieutenantViewModel</Address>
                  <Offsets>
                    <Offset>2D8</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>24377</ID>
                      <Description>"Rariry"</Description>
                      <DropDownList DisplayValueAsItem="1">1:Rare
2:Legendary
3:Epic
4:Common
</DropDownList>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>Binary</VariableType>
                      <BitStart>0</BitStart>
                      <BitLength>3</BitLength>
                      <ShowAsBinary>0</ShowAsBinary>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>+18+0A</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25162</ID>
                      <Description>"pPerk1"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>000000</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>0</Offset>
                        <Offset>26</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25163</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25164</ID>
                      <Description>"pPerk2"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>000000</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>8</Offset>
                        <Offset>26</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25165</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25166</ID>
                      <Description>"pPerk3"</Description>
                      <Options moAllowManualCollapseAndExpand="1"/>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>000000</Color>
                      <VariableType>8 Bytes</VariableType>
                      <Address>+0</Address>
                      <Offsets>
                        <Offset>10</Offset>
                        <Offset>26</Offset>
                      </Offsets>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>25167</ID>
                          <Description>"HashId"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <Color>C0C0C0</Color>
                          <VariableType>8 Bytes</VariableType>
                          <Address>+0</Address>
                          <Offsets>
                            <Offset>10</Offset>
                          </Offsets>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>25438</ID>
          <Description>"+Inventory: Settings"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>24769</ID>
              <Description>"+Set Crafting Materials"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
function main_inv_lua(InvStart)
  ------------------------------------
  local erase        = "no"  -- "yes" or "no"
  local hash_to_wipe = 0x00000189598A4379
  local listall      = "no"
  ------------------------------------

  res = {}; --global
  local s, s1, s2, s3, s4, s5, s6
  local t1, t2, t3, t4, t5, t6, t7
  local cReplaced, cFound, a;
  local startaddr = InvStart;
        a = readInteger( startaddr + 8 ) or 0;
        a = a//0x20000*0x20-0x20;
        startaddr = readQword( startaddr ) or 0;
  local endaddr = startaddr+a;

for i=0, memrec.Count-1, 1 do
  memrec.Child[i].Active = false; --Unfreeze all children
end

  cReplaced = 0; cFound = 0;
  if listall == 'yes' then
    print("pInventoryListSlot\tpSlotSettings\tpItem\thash\tcount\tCategory\tSubCategory")
  end
  for p = startaddr, endaddr, 0x20 do
    s1 = readQword(p+0x10) or 0;
    s2 = readQword(s1+0x20) or 0;
    s2 = readQword(s2+0x08) or 0; --pItem
    s3 = readQword(s2+0x10) or 0; --hash
    s4 = readInteger(p) or -1;    --count

    t1 = readQword(s2) or 0 ;  t2 = readQword(t1+0x28) or 0;
    t3 = readQword(t2) or 0;  t4 = readQword(t3+0x10) or 0;
    s5 = readString(t4) or "0";  --CategoryStr  --0 28 0 10 0
    s5 = s5:gsub("\n", " "); s5 = s5:gsub("\r", " "); s5 = ansiToUtf8(s5);

    t1 = readQword(s2) or 0 ;  t2 = readQword(t1+0x30) or 0;
      t7 = readInteger(t1+0x38) or 0; --t2 is SubCategoryList; t7=ListSize
      t7 = bShr(t7, 0x11);
      if t2~=0 and t7~=0  then --if List is not empty
        t3 = readQword(t2) or 0;  t4 = readQword(t3+0x00) or 0;
        t5 = readQword(t4+0x10) or 0;
        s6 = readString(t5) or "";  -- SubCategoryStr 0 30 0 0 10 0
        s6 = s6:gsub("\n", ""); s6 = s6:gsub("\r", ""); s6 = ansiToUtf8(s6);
      else
        s6 =  "";
      end

    if s3 == hash_to_wipe then
      cFound = cFound + 1;
      if erase == "yes" then
        writeInteger(p, 0);
        cReplaced = cReplaced + 1;
      end;
    end;
    local iids =
    {
     0x000001506FB5C137, --01 Ancient Tablets
     0x00000150408F900F, --02 Iron Metal
     0x00000150408F9013, --03 Obsidian Glass
     0x00000150408F7320, --04 Olive Wood
     0x000001506FB5C133, --05 Precious Gems
     0x000001506FB5C135, --06 Soft Leather
     0x0000001BFDB9F655, --07 Drachmae
    }

    for i=1, #iids, 1 do
     if iids[i]==s3 then
       res[i] = p;
     end
    end

    s = string.format("%016X\t%016X\t%016X\t%016X\t%4d\t%s\t%s",p,s1,s2,s3,s4,s5,s6)
    if listall=='yes' then
      print(s);
    end
    outputDebugString("::"..s);
  end;

  if listall=='yes' or erase=='yes' then
    print("deleted:",cReplaced, "found:",cFound)
  end
  for i=0,memrec.count-1, 1 do
    memrec.Child[i].reinterpret() --refresh UI/symbols
  end
end

if not syntaxcheck then
  memrec.color = 0x008000;
  --injectDll('luaclient-x86_64.dll')
  --openLuaServer('CELUASERVER')
end

{$asm}
loadlibrary( luaclient-x86_64.dll )
luacall( openLuaServer('CELUASERVER') )

aobScanModule( scan_params2_inv, ACOdyssey.exe, 488B0D???????? 41B001 498BD6 E8???????? 4885C0 74?? 488BC8 E8???????? 4C8BC6 48894424?? 488BD5 488D4C24?? E8???????? 85C0 74?? )
aobScanModule( scan_params3_inv, ACOdyssey.exe, 488B1D???????? 48 8B 01 FF 90 A0 00 00 00 0F B6 4B 49 48 8B 5C 24 ?? 48 8B 00 48 8B 0C C8 48 85 C9 74?? 48 8B 01 4C 8B C7 48 8B D6 48 8B 74 24 ?? 48 83 C4 ?? 5F 48 FF 60 60 )

globalalloc( newmem_inv,0x1000 )

registerSymbol( bThreadLock_inv )

CreateThread( main_inv_asm )

CELUA_ServerName:
  db 'CELUASERVER',0

newmem_inv:
  extract_params:
      //---
      mov rax, scan_params2_inv
      mov ebx, [rax+3]
      movsxd rbx, ebx
      mov rax, [rax+rbx+7]
      mov [PlayerProgressionManager], rax
      //---
      mov rax, scan_params2_inv+0D
      mov ebx, [rax+1]
      movsxd rbx, ebx
      lea  rax, [rax+rbx+5]
      mov [sub_GetEntity], rax
      //---
      mov rax, scan_params2_inv+1A
      mov ebx, [rax+1]
      movsxd rbx, ebx
      lea  rax, [rax+rbx+5]
      mov [sub_GetCharacterAI], rax
      //---
      mov rax, scan_params3_inv
      mov ebx, [rax+3]
      movsxd rbx, ebx
      mov rax, [rax+rbx+7]
      mov [inv_idx], rax
    ret
    align 10 CC

  get_inv:
    sub rsp, 20
      mov r8l,01
      mov rcx, [PlayerProgressionManager]
      lea rdx, [rcx+B0]
      mov rax, sub_GetEntity
      call qword ptr [rax]
      test rax, rax
      je @f
        mov rcx, rax
        mov rax, sub_GetCharacterAI
        call qword ptr [rax]
        test rax, rax
        je @f
          mov rcx, [rax+10]
          mov rax, [rcx]
          call qword ptr [rax+0A0]
            mov rdx, [inv_idx]
            movzx ecx, byte ptr [rdx+49]
            mov rax, [rax]
            mov rcx, [rax+rcx*8]
            test rcx, rcx
            je @f
              sub rcx, 50 //
              add rcx, 2C //InvStart
              mov rax, rcx
              add rsp, 20
              ret
    @@:
    xor rax, rax
    add rsp, 20
    ret
    align 10 CC

  ///////////////
  call_lua_proc:
  ///////////////
    sub rsp,70
      //keep #16 bytes alignment
      //20 x64 shadow space
      //40 old registers  rax, rcx, rdx, r8, r9, r10, r11 - volitile (do save)
      //10 paramlist
      mov [rsp+20],rax
      mov [rsp+28],rcx
      mov [rsp+30],rdx
      mov [rsp+38],r8
      mov [rsp+40],r9
      mov [rsp+48],r10
      mov [rsp+50],r11
      //mov [rsp+58],xx //16 bytes alignment

      //params list -&gt; load to edx
      mov qword ptr [rsp+60], rcx //arg01 -&gt; load to r8
      mov qword ptr [rsp+68], rbx           //arg02

      mov ecx,[funcid]
      test ecx,ecx
      jne short hasrefid
          //no reference yet
          mov rcx,funcname
          call CELUA_GetFunctionReferenceFromName
          mov [funcid],eax
          mov ecx,eax
      hasrefid:
          //here ecx contains the referenceid
          mov edx,#1      //numofparams
          lea r8,[rsp+60] //params
          mov r9,0        //0=no async, 1=async
          call CELUA_ExecuteFunctionByReference
          //restoring the possibly changed registers
          mov rax,[rsp+20]
          mov rcx,[rsp+28]
          mov rdx,[rsp+30]
          mov r8, [rsp+38]
          mov r9, [rsp+40]
          mov r10,[rsp+48]
          mov r11,[rsp+50]
          //mov xx,[rsp+58]
    add rsp,70 //free stackspace
    ret
    align 10 CC

  main_inv_asm:
    sub rsp, 20
    call extract_params
    loop:
      call get_inv
      test rax, rax
      je exit_loop
        mov rcx, rax
        //sub rsp, 8
        call call_lua_proc
        //add rsp, 8
      //sub rsp, 20
        mov rcx, #10000
        call kernel32.sleep
      //add rsp, 20
      cmp byte ptr [bThreadLock_inv], 0 //loop
      je loop
    exit_loop:
      add rsp, 20
      ret
      align 10 CC

  funcid:
    dd 0
    align 10 CC
  funcname:
    db 'main_inv_lua',0
    align 10 CC

  bThreadLock_inv:
    //0 - Sleep
    //1 - Proceed
    //2 - Exit
    db 0
    align 10 CC

  sub_GetEntity:
    dq 0
    align 10 CC
  sub_GetCharacterAI:
    dq 0
    align 10 CC
  PlayerProgressionManager:
    dq 0
    align 10 CC
  inv_idx:
    dq 0
    align 10 CC

[DISABLE]
{$lua}
  if not syntaxcheck then
    res=nil;
    memrec.color = 0x0000ff;
  end;
{$asm}
  bThreadLock_inv:
    //0 - Sleep
    //1 - Proceed
    //2 - Exit
    db 2

unregisterSymbol(*)
  //dealloc(*)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>24959</ID>
                  <Description>"==if you see ??, first use cheat 'GetItem/GetCraftingMaterials', then come back"</Description>
                  <Color>FF0000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>24774</ID>
                  <Description>"Ancient Tablets"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[01]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24770</ID>
                  <Description>"Drachmae"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[7]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24772</ID>
                  <Description>"Iron Metal"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[02]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24775</ID>
                  <Description>"Obsidian Glass"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[03]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24773</ID>
                  <Description>"Olive Wood"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[04]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24776</ID>
                  <Description>"Precious Gems"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[05]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24771</ID>
                  <Description>"Soft Leather"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>res[06]</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>24032</ID>
              <Description>"+Set Gear/Storage Capacity"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobScanModule( scan_GamePlaySettings, ACOdyssey.exe, 488B05???????? 488B8850110000 8B81FC010000 3983C0000000 )

alloc( newmem_settings,0x1000 )

registerSymbol( GamePlaySettings )

CreateThread( GetGamePlaySettings )

newmem_settings:
  GetGamePlaySettings:
    reassemble(scan_GamePlaySettings)
    mov [GamePlaySettings], rax
    ret
    align 10 CC

    GamePlaySettings:
      dq baadf00d
      align 10 CC

{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

unregisterSymbol(*)
dealloc(*)


</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>24033</ID>
                  <Description>"Gear/Storage Capacity"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>GamePlaySettings</Address>
                  <Offsets>
                    <Offset>+1FC</Offset>
                    <Offset>+1150</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>23963</ID>
      <Description>"+Boosters"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>25458</ID>
          <Description>"+Quests x/y booster"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( INJECT_boost_quest_resources, ACOdyssey.exe, 398300020000 7214 )
aobScanModule( INJECT_boost_quest_kills,     ACOdyssey.exe, FF8708010000 488BD3 488B01 FF10 )

alloc(newmem_boost,0x1000)
registerSymbol( INJECT_boost_quest_resources,INJECT_boost_quest_kills )

newmem_boost:
  boost_quest_kills:
  //inject
    add dword ptr [rdi+00000108], #30
  //original
    mov rdx,rbx
    mov rax,[rcx]
    call qword ptr [rax]
    jmp return_boost_quest_kills
    align 10 CC

INJECT_boost_quest_resources:
  mov dword ptr [rbx+00000200],eax
  db 90 90

INJECT_boost_quest_kills:
  jmp far boost_quest_kills
  return_boost_quest_kills:

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_boost_quest_resources:
  db 39 83 00 02 00 00 72 14

INJECT_boost_quest_kills:
  db FF 87 08 01 00 00 48 8B D3 48 8B 01 FF 10

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25143</ID>
              <Description>"== Done! Now each kill/burn/sink/etc. will be counted x30 times."</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>23957</ID>
          <Description>"+Engraving x/y booster"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( INJECT_engraving_list, ACOdyssey.exe, 4C8D4320 4C896DD7 488D55D7 4C896DC7 )

alloc( newmem_engraving_list,0x1000 )
alloc( strItemNameFilter, $200 )
registerSymbol( INJECT_engraving_list,ItemPerkAIConditionChallengeEntity,pstrItemName,strItemNameFilter )
label(return_engraving_list)

newmem_engraving_list:
  //inject
    push rax    //rax, rcx, rdx, r8, r9, r10, r11 - volitile (do save)
    push rcx    //rbx, rbp, rdi, rsi, rsp, r12, r13, r14, r15 - nonvolatile (preserved)
    push rdx
    push r8
    push r9
    push r10
    push r11
    sub rsp, 20
      mov rdx, strItemNameFilter //SubStr
      mov rcx, [rsi]             //Str
      call msvcrt.wcsstr
      test rax, rax
        je short @f
          mov r8, [r12]
          mov [ItemPerkAIConditionChallengeEntity], r8
          mov [pstrItemName], rsi
        @@:
    add rsp, 20
    pop r11
    pop r10
    pop r9
    pop r8
    pop rdx
    pop rcx
    pop rax
  //original code
    lea r8,[rbx+20]
    mov [rbp-29],r13
    lea rdx,[rbp-29]
    mov [rbp-39],r13
    jmp return_engraving_list
    align 10 CC

ItemPerkAIConditionChallengeEntity:
    dq baadf00d-10
    align 10 CC
pstrItemName:
    dq baadf00d
    align 10 CC
strItemNameFilter:
    db 'H',0,'i',0,'t',0,0,0

INJECT_engraving_list:
  jmp far newmem_engraving_list //#14 bytes
  db 90 90
  return_engraving_list:

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_engraving_list:
  db 4C 8D 43 20 4C 89 6D D7 48 8D 55 D7 4C 89 6D C7

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>24130</ID>
              <Description>"==To populate values update Filter and re-open ACOD Inventory/Engraving"</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>23962</ID>
              <Description>"Filter"</Description>
              <VariableType>String</VariableType>
              <Length>100</Length>
              <Unicode>1</Unicode>
              <CodePage>0</CodePage>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>strItemNameFilter</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>23960</ID>
              <Description>"Item x/y Challenge Value X"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>ItemPerkAIConditionChallengeEntity</Address>
              <Offsets>
                <Offset>+1C</Offset>
                <Offset>+0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>24131</ID>
              <Description>"Item x/y Challenge Limit Y"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <Color>808080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ItemPerkAIConditionChallengeEntity</Address>
              <Offsets>
                <Offset>+18</Offset>
                <Offset>+0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>23959</ID>
              <Description>"Item Name"</Description>
              <Color>808080</Color>
              <VariableType>String</VariableType>
              <Length>100</Length>
              <Unicode>1</Unicode>
              <CodePage>0</CodePage>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pstrItemName</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>23961</ID>
              <Description>"Item HashId"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>8 Bytes</VariableType>
              <Address>ItemPerkAIConditionChallengeEntity</Address>
              <Offsets>
                <Offset>+10</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>23931</ID>
          <Description>"+Damage multiplier"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>000000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>25380</ID>
              <Description>"+Adrestia"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( INJECT_shipdmg,   ACOdyssey.exe, 66410F6E8E???????? 0F5BC9 F30F59C8 0F57C0 0F2FC8 )
aobScanModule( GetRideableActor, ACOdyssey.exe, 4883EC28 4885C9 744B E8???????? 4885C0 7441 48895C2420 488B58?? 4885DB 7424 488B03 488BCB FF50?? 488B15???????? 0FB74A?? 663948?? 720A 0FB74A?? 663948?? 7602 33DB 488BC3 488B5C2420 4883C428 C3 33C0 4883C428 C3 )
aobScanModule( err_stub,         ACOdyssey.exe, 488D4F50 8887301E0000 488B01 FF5030 )

alloc(newmem_shipdmg, 0x1000 )

registerSymbol( fDmgMult,ShipDamageMultiplier,INJECT_shipdmg )

newmem_shipdmg:
  ShipDamageMultiplier:
  //origial code
    readmem( INJECT_shipdmg, 9 )
  //injected code
    mov rax, [r14+50]
    mov rcx, [rax+8]
    shl rcx, 20
    sar rcx, 3F
    and rcx, [rax]
    jz short @f
      mov rax, GetRideableActor
      call rax
      test rax, rax
    jz short @f
      lea rcx, [rax+50]
      mov rax, [rcx]
      call qword ptr [rax+30]
      test al, al
    jz short @f
      mov rax, fDmgMult
      movss xmm0, [rax]
  @@:
    //original code
    cvtdq2ps xmm1, xmm1
    mulss xmm1, xmm0
    jmp far return_shipdmg
    align 10 CC

   fDmgMult:
     dd (float)35.0
     align 10 CC


INJECT_shipdmg:
    jmp far ShipDamageMultiplier  //#14 bytes
    db 90 90
    return_shipdmg:

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_shipdmg:
  readmem( ShipDamageMultiplier, 9 )
  db 0F 5B C9 F3 0F 59 C8

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>25381</ID>
                  <Description>"DamageMultiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>fDmgMult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>24370</ID>
              <Description>"+Player"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( INJECT_DmgMultWarHunt, ACOdyssey.exe, 488D542438 488BCE C74424500000803F )
aobScanModule( INJECT_DmgMultAss,     ACOdyssey.exe, 8B8194010000 C3 CCCCCCCCCCCCCC )

alloc( newmem_dmg, 0x1000 )

registerSymbol( INJECT_DmgMultWarHunt,INJECT_DmgMultAss,dMultAss,fMultWarHunt )

newmem_dmg:
  DmgMultWarHunt:
    //inject
    mov rcx, [fMultWarHunt]
    mov [rsp+50],rcx
    //code
    lea rdx,[rsp+38]
    mov rcx,rsi
    //mov [rsp+50],3F800000
    jmp back_A
    align 10 CC

  DmgMultAss:
    mov eax,[rcx+00000194]
    imul eax, [dMultAss]
    ret
    align 10 CC

  dMultAss:
    dd #10
    align 10 CC

  fMultWarHunt:
    dd (float)30.0
    align 10 CC


INJECT_DmgMultWarHunt:
  jmp far DmgMultWarHunt //#14 bytes
  db 90 90
  back_A:

INJECT_DmgMultAss:
  jmp far DmgMultAss //#14 bytes

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_DmgMultWarHunt:
  db 48 8D 54 24 38 48 8B CE C7 44 24 50 00 00 80 3F

INJECT_DmgMultAss:
  db 8B 81 94 01 00 00 C3 CC CC CC CC CC CC CC

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>24372</ID>
                  <Description>"Assassin"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>dMultAss</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>24371</ID>
                  <Description>"WarriorHunter"</Description>
                  <VariableType>Float</VariableType>
                  <Address>fMultWarHunt</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>24502</ID>
          <Description>"+XP/Drachma booster"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( scan_SaveData,        ACOdyssey.exe, 488B05???????? 4C8B7008 48897424?? 488D0D???????? 48897C24?? E8???????? 488B0D???????? 4533C0 498BD6 E8???????? 4885C0 0F85???????? 4C8B05???????? 8D5008 B990000000 48896C24?? )
aobScanModule( scan_GetXPMultiplier, ACOdyssey.exe, 488B8188000000 4885C0 74?? 80B8D100000000 74?? F30F1080E4000000 C3 F30F1005???????? C3 )
aobScanModule( scan_PopupInfoText1,  ACOdyssey.exe, 4055 57 4156 4157 4881EC???????? 488B05???????? 4833C4 48898424???????? 488B02 4D8BF9 418BE8 4C8BF2 488BF9 4885C0 0F84???????? 66833800 0F84???????? 488B01 4885C0 0F84???????? 66833800 0F84???????? 48899C24???????? E8???????? )

alloc( newmem_boost,0x1000 )

registerSymbol( OnlineGameSaveData )

label( OnlineGameSaveData )

CreateThread(main)

newmem_boost:
  main:
  sub rsp, 28
    reassemble(scan_SaveData)
    mov rax,[rax+8]
    mov rax,[rax+8]
    mov [OnlineGameSaveData], rax
    mov byte ptr [rax+D1], 01
    mov dword ptr [rax+E4], (float)4.5 //XP multiplier
    mov dword ptr [rax+E8], (float)2.5 //Drachmae multiplier
    mov dword ptr [rax+EC], 0          //Permanent XP, time passed 0-#7200
    mov dword ptr [rax+F0], 0          //Permanent Drachmae, time passed 0-#7200

    xor r9d, r9d
    lea r8d, [r9+1]
    mov rdx, pTextMsg
    mov rcx, pTextMsg+8
    mov rax, scan_PopupInfoText1
    call rax

  add rsp, 28
  ret
  align 10 CC

  OnlineGameSaveData:
   dq 0
   align 10 CC

  pTextMsg:
    dq strPopupHead
    dq strPopupBody
    align 10 CC
  strPopupHead:
    db 'D',0,'e',0,'a',0,'r',0,' ',0,'F',0,'r',0,'i',0,'e',0,'n',0,'d',0,'s',0,'!',0,' ',0,'B',0,'o',0,'n',0,'u',0,'s',0,' ',0,'C',0,'o',0,'n',0,'t',0,'e',0,'n',0,'t',0,' ',0,'U',0,'n',0,'l',0,'o',0,'c',0,'k',0,'e',0,'d',0,'.',0,0,0
    align 10 CC
  strPopupBody:
    db 'E',0,'x',0,'p',0,'e',0,'r',0,'i',0,'e',0,'n',0,'c',0,'e',0,' ',0,'b',0,'o',0,'o',0,'s',0,'t',0,'e',0,'r',0,' ',0,'h',0,'a',0,'s',0,' ',0,'b',0,'e',0,'e',0,'n',0,' ',0,'a',0,'c',0,'t',0,'i',0,'v',0,'a',0,'t',0,'e',0,'d',0,' ',0,'o',0,'n',0,' ',0,'y',0,'o',0,'u',0,'r',0,' ',0,'a',0,'c',0,'c',0,'o',0,'u',0,'n',0,'t',0,'.',0,' ',0,'Y',0,'o',0,'u',0,' ',0,'n',0,'o',0,'w',0,' ',0,'e',0,'a',0,'r',0,'n',0,' ',0,'m',0,'o',0,'r',0,'e',0,' ',0,'X',0,'P',0,' ',0,'o',0,'n',0,' ',0,'e',0,'v',0,'e',0,'r',0,'y',0,'t',0,'h',0,'i',0,'n',0,'g',0,' ',0,'f',0,'o',0,'r',0,'e',0,'v',0,'e',0,'r',0,'.',0,' ',0,'T',0,'h',0,'i',0,'s',0,' ',0,'b',0,'o',0,'o',0,'s',0,'t',0,'e',0,'r',0,' ',0,'i',0,'s',0,' ',0,'v',0,'a',0,'l',0,'i',0,'d',0,' ',0,'o',0,'n',0,' ',0,'a',0,'l',0,'l',0,' ',0,'y',0,'o',0,'u',0,'r',0,' ',0,'S',0,'a',0,'v',0,'e',0,' ',0,'G',0,'a',0,'m',0,'e',0,'s',0,'.',0,0,0
    align 10 CC

[DISABLE]
{$lua}
  if not syntaxcheck then memrec.color = 0x0000ff; end;
--[[
    local addr = readQword("OnlineGameSaveData")
    writeFloat  ( addr+0xE4, 1)
    writeFloat  ( addr+0xE8, 1)
    writeInteger( addr+0xEC, 7200)
    writeInteger( addr+0xF0, 7200)
--]]
{$asm}
  unregisterSymbol(*)
  dealloc(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25333</ID>
              <Description>"==To disable booster, set Value to 1.0"</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>24506</ID>
              <Description>"Drachma Multiplier"</Description>
              <VariableType>Float</VariableType>
              <Address>OnlineGameSaveData</Address>
              <Offsets>
                <Offset>E8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>24505</ID>
              <Description>"XP Multiplier"</Description>
              <VariableType>Float</VariableType>
              <Address>OnlineGameSaveData</Address>
              <Offsets>
                <Offset>E4</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>25013</ID>
          <Description>"+Map pack booster"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( scan_OnlineUniverseComponents, ACOdyssey.exe, 488B05???????? 488B8050070000 4885C0 0F84???????? 488B80602F0000 488B4810 E8???????? 84C0 0F84???????? 488B05???????? )
aobScanModule( scan_PopupInfoText,            ACOdyssey.exe, 4055 57 4156 4157 4881EC???????? 488B05???????? 4833C4 48898424???????? 488B02 4D8BF9 418BE8 4C8BF2 488BF9 4885C0 0F84???????? 66833800 0F84???????? 488B01 4885C0 0F84???????? 66833800 0F84???????? 48899C24???????? E8???????? )
aobScanModule( scan_EnableTimeSaver,          ACOdyssey.exe, 4056 4883EC50 488B35???????? 4885F6 75?? 32C0 4883C450 5E C3 48895C24?? 488D0D???????? 4C897424?? 41B9B97890B9 )
aobScanModule( scan_WorldMapManager,          ACOdyssey.exe, 488B05???????? 48899C24???????? 32DB 4889B424???????? 4032F6 4889BC24???????? C680CF00000001 )

alloc( newmem_map,0x2000 )

registerSymbol( newmem_map,strPopupHead,strPopupBody,pTextMsg,OnlineUniverseComponents,WorldMapManager )

define(strPopupBody,newmem_map+500)

CreateThread( main_map )

newmem_map:
  call_PopupInfoText:
    sub rsp, 20
      xor r9, r9
      mov r8d, 01 //{1,9-club}
      mov rdx, pTextMsg
      mov rcx, pTextMsg+8
      mov rax, scan_PopupInfoText
      call rax
    add rsp, 20
    ret
    align 10 CC

  call_GetOnlineUniverseComponents:
    reassemble(scan_OnlineUniverseComponents)
    mov [OnlineUniverseComponents], rax
    ret
    align 10 CC

  call_EnableTimeSaver:
    mov [rsp+08], rsi
    sub rsp, 20
      mov rsi, TimeSaverIDs
      loop:
        mov rdx, [rsi]
        mov rcx, [OnlineUniverseComponents]
        add rcx, 2C8
        mov rax, scan_EnableTimeSaver
        call rax
        add rsi, 8
        cmp [rsi], 0
        je short @f
        jmp short loop
        @@:
    add rsp, 20
    mov rsi, [rsp+8]
    ret
    align 10 CC

  call_GetSetWorldMapManager:
    reassemble(scan_WorldMapManager)
    mov [WorldMapManager], rax
    mov byte ptr [rax+CF],01 //enable tab PURCHASED MAPS
    mov byte ptr [rax+D0],01 //First Civilization Stele
    mov byte ptr [rax+D1],01 //Legendary Chest
    mov byte ptr [rax+D2],01 //Ancient Tablets
    mov byte ptr [rax+D3],01 //Orichalcum Fragment
    ret
    align 10 CC

  main_map:
    sub rsp, 30
      call call_GetOnlineUniverseComponents
      call call_GetSetWorldMapManager
      call call_EnableTimeSaver
      call call_PopupInfoText
    add rsp, 30
    ret
    align 10 CC

  OnlineUniverseComponents:
    dq 0
    align 10 CC

  WorldMapManager:
    dq 0
    align 10 CC

  TimeSaverIDs:
    dq 0000018E05C101D6 //Legendary Chest
    dq 0000018E05C101D7 //Ancient Tablets
    dq 0000018E05C101D8 //First Civilization Stele
    dq 0000018E05C101D9 //Orichalcum Fragment
    dq 0000000000000000 //stop pattern

  pTextMsg:
    dq strPopupHead
    dq strPopupBody
    align 10 CC

  strPopupHead:
    db 'D',0,'e',0,'a',0,'r',0,' ',0,'F',0,'r',0,'i',0,'e',0,'n',0,'d',0,'s',0,'!',0,' ',0,'B',0,'o',0,'n',0,'u',0,'s',0,' ',0,'C',0,'o',0,'n',0,'t',0,'e',0,'n',0,'t',0,' ',0,'U',0,'n',0,'l',0,'o',0,'c',0,'k',0,'e',0,'d',0,'.',0,0,0
    align 10 CC

  strPopupBody:
    db 'A',0,' ',0,'n',0,'e',0,'w',0,' ',0,'f',0,'i',0,'l',0,'t',0,'e',0,'r',0,',',0,' ',0,'P',0,'u',0,'r',0,'c',0,'h',0,'a',0,'s',0,'e',0,'d',0,' ',0,'M',0,'a',0,'p',0,'s',0,',',0,' ',0,'h',0,'a',0,'s',0,' ',0,'b',0,'e',0,'e',0,'n',0,' ',0,'a',0,'d',0,'d',0,'e',0,'d',0,' ',0,'t',0,'o',0,' ',0,'y',0,'o',0,'u',0,'r',0,' ',0,'m',0,'a',0,'p',0,' ',0,'a',0,'n',0,'d',0,' ',0,'d',0,'i',0,'s',0,'p',0,'l',0,'a',0,'y',0,'s',0,' ',0,'a',0,'l',0,'l',0,' ',0,'t',0,'h',0,'e',0,' ',0,'b',0,'o',0,'n',0,'u',0,'s',0,' ',0,'l',0,'o',0,'c',0,'a',0,'t',0,'i',0,'o',0,'n',0,'s',0,' ',0,'u',0,'n',0,'v',0,'e',0,'i',0,'l',0,'e',0,'d',0,'.',0,0,0
    align 10 CC

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

unregisterSymbol(*)
dealloc(*)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25020</ID>
              <Description>"== Done! In ACOD go to Map (or press 'M') and click Tab until you see 'PURCHASED MAPS'."</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>25412</ID>
      <Description>"+Misc"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>25138</ID>
          <Description>"+Remove Horse Speed Limit"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( INJECT_horse_speed_limit, ACOdyssey.exe, 483BDD 0F84???????? 660F1F840000000000 0F1003 )

registerSymbol( INJECT_horse_speed_limit)

INJECT_horse_speed_limit:
  xor rax, rax

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_horse_speed_limit:
  db 48 3B DD

unregisterSymbol(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25142</ID>
              <Description>"== Done! You may need to leave restricted area once for the cheat to take effect."</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>25382</ID>
          <Description>"+Infinite Health: Felucca Small Boat"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule( INJECT_boatdmg, ACOdyssey.exe, 488B8648010000 4889BC2450030000 488B7808 48C1E720 48C1FF3F 482338 0F84???????? 48837F??00 0F84???????? 488B4130 )
aobScanModule( err_stub,       ACOdyssey.exe, 488D4F50 8887301E0000 488B01 FF5030 )

alloc(newmem_boatdmg, 0x1000)

registerSymbol(INJECT_boatdmg)

newmem_boatdmg:
   main:
  //original code
    mov rax,[rsi+00000148]
    mov [rsp+00000350],rdi
    mov rdi,[rax+08]
    shl rdi,20
    sar rdi,3F
    and rdi,[rax]
    jz skip_handler
  //inject
    mov rax, [rcx+30]
    lea rcx, [rax+50]
    mov rax, [rcx]
    call qword ptr [rax+30]
    test al, al
    jnz skip_handler
    proceed_handler: //proceed with handler routine
      mov rcx, [rsi+140]
      or rax, -1
      jmp far return_boatdmg
    skip_handler:   //skip handler routine
      mov rcx, [rsi+140]
      xor rax, rax
      jmp far return_boatdmg
      align 10 CC

INJECT_boatdmg:
  jmp far main
  db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
  return_boatdmg:

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_boatdmg:
  db 48 8B 86 48 01 00 00 48 89 BC 24 50 03 00 00 48 8B 78 08 48 C1 E7 20 48 C1 FF 3F 48 23 38

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25383</ID>
              <Description>"== Done!. God mode is in effect when you take control over felucca."</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>25330</ID>
          <Description>"+Set Level Scaling Delta"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x008000; end;
{$asm}

aobScanModule(INJECT_delta, ACOdyssey.exe, 7408 8B4018 4883C428 C3 B804000000 )

alloc(newmem_delta, 0x1000 )

registerSymbol(INJECT_delta,LevelScalingDelta)

newmem_delta:
  LevelScalingDelta:
    dd #10
    align 10 CC

INJECT_delta:
  mov eax, [LevelScalingDelta]
  db 66 0F 1F 44 00 00

[DISABLE]
{$lua}
if not syntaxcheck then memrec.color = 0x0000ff; end;
{$asm}

INJECT_delta:
  db 74 08 8B 40 18 48 83 C4 28 C3 B8 04 00 00 00

unregisterSymbol(*)
dealloc(*)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25332</ID>
              <Description>"==Now content can fall up to {...} levels behind your level. Mercenaries and Civilians are not affected."</Description>
              <Color>FF0000</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>25331</ID>
              <Description>"LevelScalingDelta"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>LevelScalingDelta</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :mov edx,[rdi+000000B4]</Description>
      <AddressString>ACOdyssey.exe+26E6B88</AddressString>
      <Before>
        <Byte>8F</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>97</Byte>
        <Byte>B4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>0D</Byte>
        <Byte>63</Byte>
        <Byte>CE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :call ACOdyssey.exe+2E54C70</Description>
      <AddressString>ACOdyssey.exe+2EACD79</AddressString>
      <Before>
        <Byte>75</Byte>
        <Byte>19</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>F2</Byte>
        <Byte>7E</Byte>
        <Byte>FA</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>0D</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :or eax,28B0190</Description>
      <AddressString>ACOdyssey.exe+952B10F</AddressString>
      <Before>
        <Byte>25</Byte>
        <Byte>D4</Byte>
        <Byte>A2</Byte>
        <Byte>A8</Byte>
        <Byte>B5</Byte>
      </Before>
      <Actual>
        <Byte>0D</Byte>
        <Byte>90</Byte>
        <Byte>01</Byte>
        <Byte>8B</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>20</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov r8d,[rcx+0000050C]</Description>
      <AddressString>ACOdyssey.exe+2EC6900</AddressString>
      <Before>
        <Byte>FE</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>8B</Byte>
        <Byte>C0</Byte>
        <Byte>C1</Byte>
        <Byte>E8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[rbx+0000050C]</Description>
      <AddressString>ACOdyssey.exe+2EB0249</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>D7</Byte>
        <Byte>A0</Byte>
        <Byte>95</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[rbx+0000050C]</Description>
      <AddressString>ACOdyssey.exe+2EB02D9</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>47</Byte>
        <Byte>A0</Byte>
        <Byte>95</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :test byte ptr [rsi+0000050C],01</Description>
      <AddressString>ACOdyssey.exe+2EB3390</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>1B</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>86</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>0E</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov edx,[rdi+0000050C]</Description>
      <AddressString>ACOdyssey.exe+2EB4596</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>32</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>97</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>C2</Byte>
        <Byte>C1</Byte>
        <Byte>E8</Byte>
        <Byte>0E</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rdi+0000050C],eax</Description>
      <AddressString>ACOdyssey.exe+2EB45BC</AddressString>
      <Before>
        <Byte>BA</Byte>
        <Byte>C2</Byte>
        <Byte>D0</Byte>
        <Byte>5E</Byte>
        <Byte>17</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>D9</Byte>
        <Byte>20</Byte>
        <Byte>93</Byte>
        <Byte>FE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov ecx,[rdi+0000050C]</Description>
      <AddressString>ACOdyssey.exe+2EB45C7</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>D9</Byte>
        <Byte>20</Byte>
        <Byte>93</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>8F</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
        <Byte>C1</Byte>
        <Byte>E8</Byte>
        <Byte>06</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov edx,[rbx+0000050C]</Description>
      <AddressString>ACOdyssey.exe+2EAF940</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>32</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>93</Byte>
        <Byte>0C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>C2</Byte>
        <Byte>C1</Byte>
        <Byte>E8</Byte>
        <Byte>06</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov r14,[rsp+40]</Description>
      <AddressString>ACOdyssey.exe+2405F66</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>DA</Byte>
        <Byte>5E</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>74</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>74</Byte>
        <Byte>24</Byte>
        <Byte>38</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movd xmm1,[r14]</Description>
      <AddressString>ACOdyssey.exe+2DFB8C0</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>7E</Byte>
        <Byte>1E</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>6E</Byte>
        <Byte>0E</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6E</Byte>
        <Byte>C0</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movd xmm0,[rcx]</Description>
      <AddressString>ACOdyssey.exe+2DFC057</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>7E</Byte>
        <Byte>13</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6E</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6E</Byte>
        <Byte>C8</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :sub r12d,[rbp+7C]</Description>
      <AddressString>ACOdyssey.exe+2E5F826</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>65</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>2B</Byte>
        <Byte>65</Byte>
        <Byte>7C</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>8B</Byte>
        <Byte>86</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss xmm6,[rdi+000002B0]</Description>
      <AddressString>ACOdyssey.exe+340F8FE</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>E2</Byte>
        <Byte>BA</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>B7</Byte>
        <Byte>B0</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>C0</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[rcx+0000018C]</Description>
      <AddressString>ACOdyssey.exe+27738E0</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>8C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsp+28],edi</Description>
      <AddressString>ACOdyssey.exe+2744F58</AddressString>
      <Before>
        <Byte>30</Byte>
        <Byte>01</Byte>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>7C</Byte>
        <Byte>24</Byte>
        <Byte>28</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>49</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>lvl of last eq on change tmp Code :mov r9d,[rbx+10]</Description>
      <AddressString>ACOdyssey.exe+273020E</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>82</Byte>
        <Byte>7B</Byte>
        <Byte>27</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>4B</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>43</Byte>
        <Byte>14</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movaps [rdi+60],xmm0</Description>
      <AddressString>ACOdyssey.exe+2CF18FF</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>01</Byte>
        <Byte>67</Byte>
        <Byte>61</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>47</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>C7</Byte>
        <Byte>47</Byte>
        <Byte>70</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss xmm0,[r8+000003C0]</Description>
      <AddressString>ACOdyssey.exe+1E3C475</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>49</Byte>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>80</Byte>
        <Byte>C0</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>48</Byte>
        <Byte>10</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mulss xmm0,[rsp+30]</Description>
      <AddressString>ACOdyssey.exe+1E3DCF7</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>69</Byte>
        <Byte>D9</Byte>
        <Byte>9B</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>59</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>4F</Byte>
        <Byte>38</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov edx,[rbp+7F]</Description>
      <AddressString>ACOdyssey.exe+2FDE269</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>87</Byte>
        <Byte>F0</Byte>
        <Byte>85</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>7F</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>E8</Byte>
        <Byte>9C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :cmp edx,[rcx+00000378]</Description>
      <AddressString>ACOdyssey.exe+3003816</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>3B</Byte>
        <Byte>91</Byte>
        <Byte>78</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>0F</Byte>
        <Byte>93</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,ebp</Description>
      <AddressString>ACOdyssey.exe+22F5C35</AddressString>
      <Before>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>C5</Byte>
      </Actual>
      <After>
        <Byte>2B</Byte>
        <Byte>C2</Byte>
        <Byte>41</Byte>
        <Byte>89</Byte>
        <Byte>06</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>godModeFlagChkCallAOB</Name>
      <Address>142159830</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>adrenalineWriteOnChangeAOB</Name>
      <Address>1420FF05E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>adrenalineWrite1OnChangeAOB</Name>
      <Address>141FC2A81</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobt21</Name>
      <Address>1408C60AA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>adrenalineWrite2OnChangeAOB</Name>
      <Address>141D18152</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>damageBarsVisualCalAOB</Name>
      <Address>1423B0668</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>curseHealthPenaltyWriteAOB</Name>
      <Address>141CD9020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>currencyChkOnBuyQChangeMerchantAccessAOB</Name>
      <Address>14202CB40</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>newmem_GetItem</Name>
      <Address>23231220000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>newmem_inv</Name>
      <Address>2E24C848000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Game Title    : Assassin’s Creed® Odyssey
Game Version  : 1.5.4
Table Updates : cs.rin.ru/Forum/Main
  
Table features:
● +Inventory
    ○ +Inventory: Get Item
        ▪ +Single Get Item  
        ▪ +Bulk Get Item (packs, quests, materials)
    ○ +Inventory: Editor
        ▪ +Inventory Page
        ▪ +Ship Cosmetics
        ▪ +Special Lieutenants
    ○ +Inventory: Settings
        ▪ +Set Crafting Materials
        ▪ +Set Gear/Storage Capacity
● Boosters
    ○ +Quests x/y boost x30
    ○ +Engraving x/y booster
    ○ +Damage multiplier
        ▪ +Adrestia
        ▪ +Player
    ○ +XP/Drachmae booster
    ○ +Map pack booster
● Misc
    ○ +Remove Horse Speed Limit
    ○ +Infinite Health: Felucca Small Boat
    ○ +Set Level Scaling Delta
   
General note on colors: 
  'black' all editable records are colored 'black'. when you edit a record, you edit record's column 'Value'
  'gray'  records not recommenced for edit are marked as 'gray'
  'blue'  consider 'blue' items as in-line comments/hints
  'red'   all scripts and a few groups are marked as 'red'
  'green' just enabled script changes its color from red to green and vise versa when you disable it
  
Description:
    
    ○ +Get Item / ▪ +Single Get Item
    
As simple as.
 - Paste HashID from the Excel HashList into 'Value' column
 - Toggle script by ticking line 'Toggle to Get Item'
 - On each toggle(Enable or Disable) the cheat will invoke internal game routine to provide you new item
 - You should see in-game new item pop-up and hear celebration sound
    
    ○ +Get Item / ▪ +Bulk Get Item  
    
Automated way of getting pack items, quest items and materials. Cheat hooks standard in-game functions, and invokes them on enabling.
  
    ▪ +Inventory Page &amp; +Ship Cosmetics
 
This section allows you to buff specific engravings of the picked item or directly engrave any perk without restrictions.
On each item re-equip, CE table will dynamically create/delete children under each pPerk item. Work with pPerk/DamageXXX items to buff engravings.
IMPORTANT: for Inventory Page buff changes to take effect you need to save/load the game.
***Next section is outdated, kept for history. The section provides steps how to swap items manually.
1. Make new Save before you start. And keep it for next at least 10h of game-play. Who knows what may go wrong
2. It is not recommended to change HashID values. Work with pItem and pPerk
3. In CE, activate Inventory Page or Ship Cosmetics
4. In ACOD, go to the Inventory Page and equip a donor item to use to swap. The CE table will get populated
5. Recommendation:
  Choose donor item with the same type of Perk1 that target item possesses. Not following this recommendation you may observer on next blacksmith upgrade 
  that swapped item changed Perk1 back to donor's Perk1 instead of keeping correct one. E.g. target item's Perk1 = Warrior Damage, pick donor item with Perk1 "xx% Warrior Damage"
6. Grab and search the HashID for the wanted item
7. Search 8 bytes as HEX. You should get 1 result under "Found". If more results are found, try alt way of search
8. Take the value under "Address" and subtract by 10 using Hex calculator
9. Alternative way of search:
  - select value type 'Grouped'
  - paste into search string the following pattern "BA:1 1:0 2:0x8000 w:4 8:0xHASH"
  - instead of HASH paste yours
  - once value is found. grab it and subtract this time by 9. Use windows calc in Programmer/HEX mode or any other online hex calculator
10. Take that calculated value and enter it under "Value" in the line "pItem".
If the calculated value is correct, the hash value showed in the grayed line "HashID" under "pItem" should match the HashID value you took from the Excel table.
10a. Choose the rarity of the target item in the line "Rarity"
11. Now go to ACOD and equip another item from the type of your donor item, leave the inventory, reenter the inventory. Now you should see the new item but it's still holds old texture and old name
12. Leave the inventory again and quick-save (F5) to save the changes and quick-load (F9) to load the changed game. Or make a new save after every item
13. After you completed swap, start repairing Perks list
13a. Expand "Ref Settings Group" section and copy 4 times from pRefPerk1..4 to pPerk1..4
13b. Alternative: or search by HashID for each Perk and paste adjusted values into pPerk1...pPerk4
  
    ▪ +Special Lieutenants
  
1. This section opens you capability to collect HashID of Lieutenants for future. No swapping is supported through this section.
1a. caveats: you will be getting HashId=0000000000000000 for regular Lieutenants and real HashID for special characters like Deimos/Evie etc.
This section also allows you to buff specific engravings of the picked Lieutenant. Buffs take effect immediately. No F5/F9 is required.
  
    ▪ +Set Crafting Materials
  
After enabling you are getting up to date amounts for the crafting materials: Drachma / Soft Leather / Iron Metal / Olive Wood / Ancient Tablets / Obsidian Glass / Precious Gems. If amount is shown as ??, first go to GetItem/Bulk cheat section and get 1 item of missing resource.
  
    ▪ +Set Gear/Storage Capacity
  
For hamsters, you are free to remove Ship and Inventory storage limit. Default value is 350.
As note: when you hit 350 Inventory Limit, your character slows down and can't run any more until you dismatle a few items.
When you hit 350 Ship Storage limit, the game blocks you to store more items on the ship.   
  
    ▪ +Quest x/y booster
  
Applicable for quests with objectives like "Kill 0/30 Spartans", "Sink 0/15 Athenian Triremes", "Burn 0/6 Supplies" or similar.
After enabling each of the objectives will be completed after first kill/sink/burn. The cheat is useful for weekly reset quests.
 
    ▪ +Engraving x/y booster
  
This cheat allows you speeding up completion of engraving chellenges  like "Kill 150 Spartans to unlock engraving" or similar. 
The engraving booster will only work if you can see the engraving tooltip.
1. Activate the CT as usual
2. Activate "Boosters" -&gt; "Engraving x/y booster"
3. Double click on "Hit" under Filter-&gt;Value and replace the word with a string showing in the tooltip text of the engraving you want to boost, e.g. "Adrenaline per Hit" (The string is case sensitive).
4. In-game, open Inventory-&gt; Engraving List. If the Script found the string, its current value will be shown under "Item x/y Change Value"
5. Change the value to the one you want. Go to the game and leave the Inventory
  
Repeat the steps for every engraving you want to boost.
   
IMPORTANT!
Always change to 1 value below the last value of the actual engraving level and then meet the requirement by playing normally to increase the counter by 1 and enable the next value.
After activating the new lvl normally you can boost again to the last value of the actual lvl.
If you change the value to a value of the next engraving lvl, you will break the counter.
  
Example:
Something to-do from 5 to 50.
Change 5 to 49, meet the requirements by playing normally to change the counter to 50 and again to enable the next lvl 51 to XY. Only now boost again.
                                  
    ○ Damage multiplier
  
Self-descriptive. After enabling you'll be able to tune damage values per your preferred game experience.
    
    ○ +XP/Drachma booster
    
Standard in-game boosters which are carried between saves. Enable and set preferred multiplier. Default game value is 1.0
    
    ○ +Map pack booster
    
After enabling go to Map (or press 'M') and click Tab until you see 'PURCHASED MAPS' text. This cheat is not carried between saves.
    
    ○ +Remove Horse Speed Limit
    
Your mount slows down when you reach a settlement. The cheat removes that restriction.
        
    ○ +Infinite Health: Felucca Small Boat
    
Enable god mode for small boats (greeks call them felucca). The mode is in effect when you take control over a boat. And automatically disabled when you drop it.
    
    ○ +Set Level Scaling Delta
    
When you level up your character, the game does the same with the world. The game levels up enemies, quests and regions. The goal of the cheat is to provide scaling delta value you can change. Now you can have a situation where, i.e. an enemy is 5 or 10 levels below your character dependng on delta you set. Setting delta to 99 effectivelly disables scaling logic.
</Comments>
</CheatTable>
